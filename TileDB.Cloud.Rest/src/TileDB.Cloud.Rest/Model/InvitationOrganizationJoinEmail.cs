/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Encapsulates information regarding inviting people using email to join organization, same permissions for all invitees
    /// </summary>
    [DataContract(Name = "InvitationOrganizationJoinEmail")]
    public partial class InvitationOrganizationJoinEmail : IEquatable<InvitationOrganizationJoinEmail>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OrganizationRole
        /// </summary>
        [DataMember(Name = "organization_role", IsRequired = true, EmitDefaultValue = false)]
        public OrganizationRoles OrganizationRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationOrganizationJoinEmail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvitationOrganizationJoinEmail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationOrganizationJoinEmail" /> class.
        /// </summary>
        /// <param name="actions">List of permitted actions.</param>
        /// <param name="organizationRole">organizationRole (required).</param>
        /// <param name="inviteeEmail">inviteeEmail (required).</param>
        public InvitationOrganizationJoinEmail(List<NamespaceActions> actions = default(List<NamespaceActions>), OrganizationRoles organizationRole = default(OrganizationRoles), List<string> inviteeEmail = default(List<string>))
        {
            this.OrganizationRole = organizationRole;
            // to ensure "inviteeEmail" is required (not null)
            if (inviteeEmail == null)
            {
                throw new ArgumentNullException("inviteeEmail is a required property for InvitationOrganizationJoinEmail and cannot be null");
            }
            this.InviteeEmail = inviteeEmail;
            this.Actions = actions;
        }

        /// <summary>
        /// List of permitted actions
        /// </summary>
        /// <value>List of permitted actions</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<NamespaceActions> Actions { get; set; }

        /// <summary>
        /// Gets or Sets InviteeEmail
        /// </summary>
        [DataMember(Name = "invitee_email", IsRequired = true, EmitDefaultValue = false)]
        public List<string> InviteeEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvitationOrganizationJoinEmail {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  OrganizationRole: ").Append(OrganizationRole).Append("\n");
            sb.Append("  InviteeEmail: ").Append(InviteeEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvitationOrganizationJoinEmail);
        }

        /// <summary>
        /// Returns true if InvitationOrganizationJoinEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of InvitationOrganizationJoinEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvitationOrganizationJoinEmail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.OrganizationRole == input.OrganizationRole ||
                    this.OrganizationRole.Equals(input.OrganizationRole)
                ) && 
                (
                    this.InviteeEmail == input.InviteeEmail ||
                    this.InviteeEmail != null &&
                    input.InviteeEmail != null &&
                    this.InviteeEmail.SequenceEqual(input.InviteeEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrganizationRole.GetHashCode();
                if (this.InviteeEmail != null)
                {
                    hashCode = (hashCode * 59) + this.InviteeEmail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
