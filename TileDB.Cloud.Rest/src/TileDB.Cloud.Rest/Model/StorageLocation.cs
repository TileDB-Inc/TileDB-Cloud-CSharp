/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// The path at which a given asset will be stored, and the credentials used to access that asset. 
    /// </summary>
    [DataContract(Name = "StorageLocation")]
    public partial class StorageLocation : IEquatable<StorageLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageLocation" /> class.
        /// </summary>
        /// <param name="path">The path to store this asset type. If unset, a suffix of the user&#39;s &#x60;default_s3_path&#x60; is used. When updating, explicitly set to &#x60;\&quot;\&quot;&#x60;, the empty string, to clear this path; leaving it &#x60;null&#x60; (or absent) will leave the path unchanged. .</param>
        /// <param name="credentialsName">The name of the credentials used to acess this storage path. If unset, the &#x60;default_s3_path_credentials_name&#x60; is used. When updating, explicitly set to &#x60;\&quot;\&quot;&#x60;, the empty string, to clear this name; leaving it &#x60;null&#x60; (or absent) will leave the name unchanged. .</param>
        public StorageLocation(string path = default(string), string credentialsName = default(string))
        {
            this.Path = path;
            this.CredentialsName = credentialsName;
        }

        /// <summary>
        /// The path to store this asset type. If unset, a suffix of the user&#39;s &#x60;default_s3_path&#x60; is used. When updating, explicitly set to &#x60;\&quot;\&quot;&#x60;, the empty string, to clear this path; leaving it &#x60;null&#x60; (or absent) will leave the path unchanged. 
        /// </summary>
        /// <value>The path to store this asset type. If unset, a suffix of the user&#39;s &#x60;default_s3_path&#x60; is used. When updating, explicitly set to &#x60;\&quot;\&quot;&#x60;, the empty string, to clear this path; leaving it &#x60;null&#x60; (or absent) will leave the path unchanged. </value>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// The name of the credentials used to acess this storage path. If unset, the &#x60;default_s3_path_credentials_name&#x60; is used. When updating, explicitly set to &#x60;\&quot;\&quot;&#x60;, the empty string, to clear this name; leaving it &#x60;null&#x60; (or absent) will leave the name unchanged. 
        /// </summary>
        /// <value>The name of the credentials used to acess this storage path. If unset, the &#x60;default_s3_path_credentials_name&#x60; is used. When updating, explicitly set to &#x60;\&quot;\&quot;&#x60;, the empty string, to clear this name; leaving it &#x60;null&#x60; (or absent) will leave the name unchanged. </value>
        [DataMember(Name = "credentials_name", EmitDefaultValue = true)]
        public string CredentialsName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StorageLocation {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  CredentialsName: ").Append(CredentialsName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageLocation);
        }

        /// <summary>
        /// Returns true if StorageLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageLocation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.CredentialsName == input.CredentialsName ||
                    (this.CredentialsName != null &&
                    this.CredentialsName.Equals(input.CredentialsName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.CredentialsName != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialsName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
