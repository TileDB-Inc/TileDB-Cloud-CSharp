/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Dimension of array
    /// </summary>
    [DataContract]
    public partial class Dimension :  IEquatable<Dimension>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public Datatype Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimension" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Dimension() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dimension" /> class.
        /// </summary>
        /// <param name="name">Dimension name.</param>
        /// <param name="type">type (required).</param>
        /// <param name="domain">domain (required).</param>
        /// <param name="nullTileExtent">Is tile extent null (required).</param>
        /// <param name="tileExtent">tileExtent.</param>
        /// <param name="filterPipeline">filterPipeline.</param>
        public Dimension(string name = default(string), Datatype type = default(Datatype), DomainArray domain = default(DomainArray), bool nullTileExtent = default(bool), DimensionTileExtent tileExtent = default(DimensionTileExtent), FilterPipeline filterPipeline = default(FilterPipeline))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Dimension and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new InvalidDataException("domain is a required property for Dimension and cannot be null");
            }
            else
            {
                this.Domain = domain;
            }

            // to ensure "nullTileExtent" is required (not null)
            if (nullTileExtent == null)
            {
                throw new InvalidDataException("nullTileExtent is a required property for Dimension and cannot be null");
            }
            else
            {
                this.NullTileExtent = nullTileExtent;
            }

            this.Name = name;
            this.TileExtent = tileExtent;
            this.FilterPipeline = filterPipeline;
        }

        /// <summary>
        /// Dimension name
        /// </summary>
        /// <value>Dimension name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=true)]
        public DomainArray Domain { get; set; }

        /// <summary>
        /// Is tile extent null
        /// </summary>
        /// <value>Is tile extent null</value>
        [DataMember(Name="nullTileExtent", EmitDefaultValue=true)]
        public bool NullTileExtent { get; set; }

        /// <summary>
        /// Gets or Sets TileExtent
        /// </summary>
        [DataMember(Name="tileExtent", EmitDefaultValue=false)]
        public DimensionTileExtent TileExtent { get; set; }

        /// <summary>
        /// Gets or Sets FilterPipeline
        /// </summary>
        [DataMember(Name="filterPipeline", EmitDefaultValue=false)]
        public FilterPipeline FilterPipeline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dimension {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  NullTileExtent: ").Append(NullTileExtent).Append("\n");
            sb.Append("  TileExtent: ").Append(TileExtent).Append("\n");
            sb.Append("  FilterPipeline: ").Append(FilterPipeline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dimension);
        }

        /// <summary>
        /// Returns true if Dimension instances are equal
        /// </summary>
        /// <param name="input">Instance of Dimension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dimension input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.NullTileExtent == input.NullTileExtent ||
                    (this.NullTileExtent != null &&
                    this.NullTileExtent.Equals(input.NullTileExtent))
                ) && 
                (
                    this.TileExtent == input.TileExtent ||
                    (this.TileExtent != null &&
                    this.TileExtent.Equals(input.TileExtent))
                ) && 
                (
                    this.FilterPipeline == input.FilterPipeline ||
                    (this.FilterPipeline != null &&
                    this.FilterPipeline.Equals(input.FilterPipeline))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.NullTileExtent != null)
                    hashCode = hashCode * 59 + this.NullTileExtent.GetHashCode();
                if (this.TileExtent != null)
                    hashCode = hashCode * 59 + this.TileExtent.GetHashCode();
                if (this.FilterPipeline != null)
                    hashCode = hashCode * 59 + this.FilterPipeline.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
