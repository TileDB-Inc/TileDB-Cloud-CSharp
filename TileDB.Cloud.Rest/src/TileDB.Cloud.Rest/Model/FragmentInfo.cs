/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Fragment info of an array
    /// </summary>
    [DataContract(Name = "FragmentInfo")]
    public partial class FragmentInfo : IEquatable<FragmentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FragmentInfo" /> class.
        /// </summary>
        /// <param name="arraySchemaAll">map of all array schemas.</param>
        /// <param name="fragmentInfo">information about fragments in the array.</param>
        /// <param name="toVacuum">the URIs of the fragments to vacuum.</param>
        public FragmentInfo(Dictionary<string, ArraySchema> arraySchemaAll = default(Dictionary<string, ArraySchema>), List<SingleFragmentInfo> fragmentInfo = default(List<SingleFragmentInfo>), List<string> toVacuum = default(List<string>))
        {
            this.ArraySchemaAll = arraySchemaAll;
            this._FragmentInfo = fragmentInfo;
            this.ToVacuum = toVacuum;
        }

        /// <summary>
        /// map of all array schemas
        /// </summary>
        /// <value>map of all array schemas</value>
        [DataMember(Name = "arraySchemaAll", EmitDefaultValue = false)]
        public Dictionary<string, ArraySchema> ArraySchemaAll { get; set; }

        /// <summary>
        /// information about fragments in the array
        /// </summary>
        /// <value>information about fragments in the array</value>
        [DataMember(Name = "fragmentInfo", EmitDefaultValue = false)]
        public List<SingleFragmentInfo> _FragmentInfo { get; set; }

        /// <summary>
        /// the URIs of the fragments to vacuum
        /// </summary>
        /// <value>the URIs of the fragments to vacuum</value>
        [DataMember(Name = "toVacuum", EmitDefaultValue = false)]
        public List<string> ToVacuum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FragmentInfo {\n");
            sb.Append("  ArraySchemaAll: ").Append(ArraySchemaAll).Append("\n");
            sb.Append("  _FragmentInfo: ").Append(_FragmentInfo).Append("\n");
            sb.Append("  ToVacuum: ").Append(ToVacuum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FragmentInfo);
        }

        /// <summary>
        /// Returns true if FragmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of FragmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FragmentInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ArraySchemaAll == input.ArraySchemaAll ||
                    this.ArraySchemaAll != null &&
                    input.ArraySchemaAll != null &&
                    this.ArraySchemaAll.SequenceEqual(input.ArraySchemaAll)
                ) && 
                (
                    this._FragmentInfo == input._FragmentInfo ||
                    this._FragmentInfo != null &&
                    input._FragmentInfo != null &&
                    this._FragmentInfo.SequenceEqual(input._FragmentInfo)
                ) && 
                (
                    this.ToVacuum == input.ToVacuum ||
                    this.ToVacuum != null &&
                    input.ToVacuum != null &&
                    this.ToVacuum.SequenceEqual(input.ToVacuum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArraySchemaAll != null)
                {
                    hashCode = (hashCode * 59) + this.ArraySchemaAll.GetHashCode();
                }
                if (this._FragmentInfo != null)
                {
                    hashCode = (hashCode * 59) + this._FragmentInfo.GetHashCode();
                }
                if (this.ToVacuum != null)
                {
                    hashCode = (hashCode * 59) + this.ToVacuum.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
