/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Synchronous Task to Run
    /// </summary>
    [DataContract]
    public partial class ArrayTask :  IEquatable<ArrayTask>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ArrayTaskStatus? Status { get; set; }
        /// <summary>
        /// Gets or Sets QueryType
        /// </summary>
        [DataMember(Name="query_type", EmitDefaultValue=false)]
        public Querytype? QueryType { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ArrayTaskType? Type { get; set; }
        /// <summary>
        /// Gets or Sets ResultFormat
        /// </summary>
        [DataMember(Name="result_format", EmitDefaultValue=false)]
        public ResultFormat? ResultFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayTask" /> class.
        /// </summary>
        /// <param name="id">task ID.</param>
        /// <param name="name">Optional task name.</param>
        /// <param name="description">Optional task description (Tasks purpose).</param>
        /// <param name="arrayMetadata">arrayMetadata.</param>
        /// <param name="subarray">subarray.</param>
        /// <param name="memory">memory allocated to task in bytes.</param>
        /// <param name="cpu">millicpu allocated to task.</param>
        /// <param name="_namespace">namespace task is tied to.</param>
        /// <param name="status">status.</param>
        /// <param name="startTime">Start time RFC3339 for job.</param>
        /// <param name="finishTime">Finish time RFC3339 for job.</param>
        /// <param name="cost">Total accumulated for task in USD, example is $0.12.</param>
        /// <param name="egressCost">Total accumulated for egress task in USD, example is $0.12.</param>
        /// <param name="accessCost">Cost accumulated for access task in USD, example is $0.12.</param>
        /// <param name="queryType">queryType.</param>
        /// <param name="udfCode">Optional actual code that is going to be executed.</param>
        /// <param name="udfLanguage">Optional actual language used to express udf_code.</param>
        /// <param name="sqlQuery">Optional actual sql query that is going to be executed.</param>
        /// <param name="type">type.</param>
        /// <param name="activity">Array activity logs for task.</param>
        /// <param name="logs">logs from array task.</param>
        /// <param name="duration">duration in nanoseconds of an array task.</param>
        /// <param name="sqlInitCommands">SQL queries or commands to run before main sql query.</param>
        /// <param name="sqlParameters">SQL query parameters.</param>
        /// <param name="resultFormat">resultFormat.</param>
        /// <param name="taskGraphUuid">If set, the ID of the log for the task graph that this was part of. .</param>
        /// <param name="clientNodeUuid">If set, the client-defined ID of the node within this task&#39;s graph. .</param>
        public ArrayTask(string id = default(string), string name = default(string), string description = default(string), ArrayInfo arrayMetadata = default(ArrayInfo), DomainArray subarray = default(DomainArray), int memory = default(int), int cpu = default(int), string _namespace = default(string), ArrayTaskStatus? status = default(ArrayTaskStatus?), DateTime startTime = default(DateTime), DateTime? finishTime = default(DateTime?), double cost = default(double), double egressCost = default(double), double accessCost = default(double), Querytype? queryType = default(Querytype?), string udfCode = default(string), string udfLanguage = default(string), string sqlQuery = default(string), ArrayTaskType? type = default(ArrayTaskType?), List<ArrayActivityLog> activity = default(List<ArrayActivityLog>), string logs = default(string), decimal duration = default(decimal), List<string> sqlInitCommands = default(List<string>), List<Object> sqlParameters = default(List<Object>), ResultFormat? resultFormat = default(ResultFormat?), string taskGraphUuid = default(string), string clientNodeUuid = default(string))
        {
            this.FinishTime = finishTime;
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.ArrayMetadata = arrayMetadata;
            this.Subarray = subarray;
            this.Memory = memory;
            this.Cpu = cpu;
            this.Namespace = _namespace;
            this.Status = status;
            this.StartTime = startTime;
            this.FinishTime = finishTime;
            this.Cost = cost;
            this.EgressCost = egressCost;
            this.AccessCost = accessCost;
            this.QueryType = queryType;
            this.UdfCode = udfCode;
            this.UdfLanguage = udfLanguage;
            this.SqlQuery = sqlQuery;
            this.Type = type;
            this.Activity = activity;
            this.Logs = logs;
            this.Duration = duration;
            this.SqlInitCommands = sqlInitCommands;
            this.SqlParameters = sqlParameters;
            this.ResultFormat = resultFormat;
            this.TaskGraphUuid = taskGraphUuid;
            this.ClientNodeUuid = clientNodeUuid;
        }

        /// <summary>
        /// task ID
        /// </summary>
        /// <value>task ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Optional task name
        /// </summary>
        /// <value>Optional task name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Optional task description (Tasks purpose)
        /// </summary>
        /// <value>Optional task description (Tasks purpose)</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ArrayMetadata
        /// </summary>
        [DataMember(Name="array_metadata", EmitDefaultValue=false)]
        public ArrayInfo ArrayMetadata { get; set; }

        /// <summary>
        /// Gets or Sets Subarray
        /// </summary>
        [DataMember(Name="subarray", EmitDefaultValue=false)]
        public DomainArray Subarray { get; set; }

        /// <summary>
        /// memory allocated to task in bytes
        /// </summary>
        /// <value>memory allocated to task in bytes</value>
        [DataMember(Name="memory", EmitDefaultValue=false)]
        public int Memory { get; set; }

        /// <summary>
        /// millicpu allocated to task
        /// </summary>
        /// <value>millicpu allocated to task</value>
        [DataMember(Name="cpu", EmitDefaultValue=false)]
        public int Cpu { get; set; }

        /// <summary>
        /// namespace task is tied to
        /// </summary>
        /// <value>namespace task is tied to</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }


        /// <summary>
        /// Start time RFC3339 for job
        /// </summary>
        /// <value>Start time RFC3339 for job</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Finish time RFC3339 for job
        /// </summary>
        /// <value>Finish time RFC3339 for job</value>
        [DataMember(Name="finish_time", EmitDefaultValue=true)]
        public DateTime? FinishTime { get; set; }

        /// <summary>
        /// Total accumulated for task in USD, example is $0.12
        /// </summary>
        /// <value>Total accumulated for task in USD, example is $0.12</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double Cost { get; set; }

        /// <summary>
        /// Total accumulated for egress task in USD, example is $0.12
        /// </summary>
        /// <value>Total accumulated for egress task in USD, example is $0.12</value>
        [DataMember(Name="egress_cost", EmitDefaultValue=false)]
        public double EgressCost { get; set; }

        /// <summary>
        /// Cost accumulated for access task in USD, example is $0.12
        /// </summary>
        /// <value>Cost accumulated for access task in USD, example is $0.12</value>
        [DataMember(Name="access_cost", EmitDefaultValue=false)]
        public double AccessCost { get; set; }


        /// <summary>
        /// Optional actual code that is going to be executed
        /// </summary>
        /// <value>Optional actual code that is going to be executed</value>
        [DataMember(Name="udf_code", EmitDefaultValue=false)]
        public string UdfCode { get; set; }

        /// <summary>
        /// Optional actual language used to express udf_code
        /// </summary>
        /// <value>Optional actual language used to express udf_code</value>
        [DataMember(Name="udf_language", EmitDefaultValue=false)]
        public string UdfLanguage { get; set; }

        /// <summary>
        /// Optional actual sql query that is going to be executed
        /// </summary>
        /// <value>Optional actual sql query that is going to be executed</value>
        [DataMember(Name="sql_query", EmitDefaultValue=false)]
        public string SqlQuery { get; set; }


        /// <summary>
        /// Array activity logs for task
        /// </summary>
        /// <value>Array activity logs for task</value>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public List<ArrayActivityLog> Activity { get; set; }

        /// <summary>
        /// logs from array task
        /// </summary>
        /// <value>logs from array task</value>
        [DataMember(Name="logs", EmitDefaultValue=false)]
        public string Logs { get; set; }

        /// <summary>
        /// duration in nanoseconds of an array task
        /// </summary>
        /// <value>duration in nanoseconds of an array task</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// SQL queries or commands to run before main sql query
        /// </summary>
        /// <value>SQL queries or commands to run before main sql query</value>
        [DataMember(Name="sql_init_commands", EmitDefaultValue=false)]
        public List<string> SqlInitCommands { get; set; }

        /// <summary>
        /// SQL query parameters
        /// </summary>
        /// <value>SQL query parameters</value>
        [DataMember(Name="sql_parameters", EmitDefaultValue=false)]
        public List<Object> SqlParameters { get; set; }


        /// <summary>
        /// If set, the ID of the log for the task graph that this was part of. 
        /// </summary>
        /// <value>If set, the ID of the log for the task graph that this was part of. </value>
        [DataMember(Name="task_graph_uuid", EmitDefaultValue=false)]
        public string TaskGraphUuid { get; set; }

        /// <summary>
        /// If set, the client-defined ID of the node within this task&#39;s graph. 
        /// </summary>
        /// <value>If set, the client-defined ID of the node within this task&#39;s graph. </value>
        [DataMember(Name="client_node_uuid", EmitDefaultValue=false)]
        public string ClientNodeUuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArrayTask {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ArrayMetadata: ").Append(ArrayMetadata).Append("\n");
            sb.Append("  Subarray: ").Append(Subarray).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  Cpu: ").Append(Cpu).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  FinishTime: ").Append(FinishTime).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  EgressCost: ").Append(EgressCost).Append("\n");
            sb.Append("  AccessCost: ").Append(AccessCost).Append("\n");
            sb.Append("  QueryType: ").Append(QueryType).Append("\n");
            sb.Append("  UdfCode: ").Append(UdfCode).Append("\n");
            sb.Append("  UdfLanguage: ").Append(UdfLanguage).Append("\n");
            sb.Append("  SqlQuery: ").Append(SqlQuery).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  SqlInitCommands: ").Append(SqlInitCommands).Append("\n");
            sb.Append("  SqlParameters: ").Append(SqlParameters).Append("\n");
            sb.Append("  ResultFormat: ").Append(ResultFormat).Append("\n");
            sb.Append("  TaskGraphUuid: ").Append(TaskGraphUuid).Append("\n");
            sb.Append("  ClientNodeUuid: ").Append(ClientNodeUuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArrayTask);
        }

        /// <summary>
        /// Returns true if ArrayTask instances are equal
        /// </summary>
        /// <param name="input">Instance of ArrayTask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArrayTask input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ArrayMetadata == input.ArrayMetadata ||
                    (this.ArrayMetadata != null &&
                    this.ArrayMetadata.Equals(input.ArrayMetadata))
                ) && 
                (
                    this.Subarray == input.Subarray ||
                    (this.Subarray != null &&
                    this.Subarray.Equals(input.Subarray))
                ) && 
                (
                    this.Memory == input.Memory ||
                    (this.Memory != null &&
                    this.Memory.Equals(input.Memory))
                ) && 
                (
                    this.Cpu == input.Cpu ||
                    (this.Cpu != null &&
                    this.Cpu.Equals(input.Cpu))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.FinishTime == input.FinishTime ||
                    (this.FinishTime != null &&
                    this.FinishTime.Equals(input.FinishTime))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.EgressCost == input.EgressCost ||
                    (this.EgressCost != null &&
                    this.EgressCost.Equals(input.EgressCost))
                ) && 
                (
                    this.AccessCost == input.AccessCost ||
                    (this.AccessCost != null &&
                    this.AccessCost.Equals(input.AccessCost))
                ) && 
                (
                    this.QueryType == input.QueryType ||
                    (this.QueryType != null &&
                    this.QueryType.Equals(input.QueryType))
                ) && 
                (
                    this.UdfCode == input.UdfCode ||
                    (this.UdfCode != null &&
                    this.UdfCode.Equals(input.UdfCode))
                ) && 
                (
                    this.UdfLanguage == input.UdfLanguage ||
                    (this.UdfLanguage != null &&
                    this.UdfLanguage.Equals(input.UdfLanguage))
                ) && 
                (
                    this.SqlQuery == input.SqlQuery ||
                    (this.SqlQuery != null &&
                    this.SqlQuery.Equals(input.SqlQuery))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Activity == input.Activity ||
                    this.Activity != null &&
                    input.Activity != null &&
                    this.Activity.SequenceEqual(input.Activity)
                ) && 
                (
                    this.Logs == input.Logs ||
                    (this.Logs != null &&
                    this.Logs.Equals(input.Logs))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.SqlInitCommands == input.SqlInitCommands ||
                    this.SqlInitCommands != null &&
                    input.SqlInitCommands != null &&
                    this.SqlInitCommands.SequenceEqual(input.SqlInitCommands)
                ) && 
                (
                    this.SqlParameters == input.SqlParameters ||
                    this.SqlParameters != null &&
                    input.SqlParameters != null &&
                    this.SqlParameters.SequenceEqual(input.SqlParameters)
                ) && 
                (
                    this.ResultFormat == input.ResultFormat ||
                    (this.ResultFormat != null &&
                    this.ResultFormat.Equals(input.ResultFormat))
                ) && 
                (
                    this.TaskGraphUuid == input.TaskGraphUuid ||
                    (this.TaskGraphUuid != null &&
                    this.TaskGraphUuid.Equals(input.TaskGraphUuid))
                ) && 
                (
                    this.ClientNodeUuid == input.ClientNodeUuid ||
                    (this.ClientNodeUuid != null &&
                    this.ClientNodeUuid.Equals(input.ClientNodeUuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ArrayMetadata != null)
                    hashCode = hashCode * 59 + this.ArrayMetadata.GetHashCode();
                if (this.Subarray != null)
                    hashCode = hashCode * 59 + this.Subarray.GetHashCode();
                if (this.Memory != null)
                    hashCode = hashCode * 59 + this.Memory.GetHashCode();
                if (this.Cpu != null)
                    hashCode = hashCode * 59 + this.Cpu.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.FinishTime != null)
                    hashCode = hashCode * 59 + this.FinishTime.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.EgressCost != null)
                    hashCode = hashCode * 59 + this.EgressCost.GetHashCode();
                if (this.AccessCost != null)
                    hashCode = hashCode * 59 + this.AccessCost.GetHashCode();
                if (this.QueryType != null)
                    hashCode = hashCode * 59 + this.QueryType.GetHashCode();
                if (this.UdfCode != null)
                    hashCode = hashCode * 59 + this.UdfCode.GetHashCode();
                if (this.UdfLanguage != null)
                    hashCode = hashCode * 59 + this.UdfLanguage.GetHashCode();
                if (this.SqlQuery != null)
                    hashCode = hashCode * 59 + this.SqlQuery.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Activity != null)
                    hashCode = hashCode * 59 + this.Activity.GetHashCode();
                if (this.Logs != null)
                    hashCode = hashCode * 59 + this.Logs.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.SqlInitCommands != null)
                    hashCode = hashCode * 59 + this.SqlInitCommands.GetHashCode();
                if (this.SqlParameters != null)
                    hashCode = hashCode * 59 + this.SqlParameters.GetHashCode();
                if (this.ResultFormat != null)
                    hashCode = hashCode * 59 + this.ResultFormat.GetHashCode();
                if (this.TaskGraphUuid != null)
                    hashCode = hashCode * 59 + this.TaskGraphUuid.GetHashCode();
                if (this.ClientNodeUuid != null)
                    hashCode = hashCode * 59 + this.ClientNodeUuid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
