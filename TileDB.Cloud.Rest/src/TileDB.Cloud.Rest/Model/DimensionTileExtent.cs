/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Extent of tile
    /// </summary>
    [DataContract]
    public partial class DimensionTileExtent :  IEquatable<DimensionTileExtent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DimensionTileExtent" /> class.
        /// </summary>
        /// <param name="int8">int8.</param>
        /// <param name="uint8">uint8.</param>
        /// <param name="int16">int16.</param>
        /// <param name="uint16">uint16.</param>
        /// <param name="int32">int32.</param>
        /// <param name="uint32">uint32.</param>
        /// <param name="int64">int64.</param>
        /// <param name="uint64">uint64.</param>
        /// <param name="float32">float32.</param>
        /// <param name="float64">float64.</param>
        public DimensionTileExtent(int int8 = default(int), int uint8 = default(int), int int16 = default(int), int uint16 = default(int), int int32 = default(int), int uint32 = default(int), long int64 = default(long), int uint64 = default(int), int float32 = default(int), int float64 = default(int))
        {
            this.Int8 = int8;
            this.Uint8 = uint8;
            this.Int16 = int16;
            this.Uint16 = uint16;
            this.Int32 = int32;
            this.Uint32 = uint32;
            this.Int64 = int64;
            this.Uint64 = uint64;
            this.Float32 = float32;
            this.Float64 = float64;
        }

        /// <summary>
        /// Gets or Sets Int8
        /// </summary>
        [DataMember(Name="int8", EmitDefaultValue=false)]
        public int Int8 { get; set; }

        /// <summary>
        /// Gets or Sets Uint8
        /// </summary>
        [DataMember(Name="uint8", EmitDefaultValue=false)]
        public int Uint8 { get; set; }

        /// <summary>
        /// Gets or Sets Int16
        /// </summary>
        [DataMember(Name="int16", EmitDefaultValue=false)]
        public int Int16 { get; set; }

        /// <summary>
        /// Gets or Sets Uint16
        /// </summary>
        [DataMember(Name="uint16", EmitDefaultValue=false)]
        public int Uint16 { get; set; }

        /// <summary>
        /// Gets or Sets Int32
        /// </summary>
        [DataMember(Name="int32", EmitDefaultValue=false)]
        public int Int32 { get; set; }

        /// <summary>
        /// Gets or Sets Uint32
        /// </summary>
        [DataMember(Name="uint32", EmitDefaultValue=false)]
        public int Uint32 { get; set; }

        /// <summary>
        /// Gets or Sets Int64
        /// </summary>
        [DataMember(Name="int64", EmitDefaultValue=false)]
        public long Int64 { get; set; }

        /// <summary>
        /// Gets or Sets Uint64
        /// </summary>
        [DataMember(Name="uint64", EmitDefaultValue=false)]
        public int Uint64 { get; set; }

        /// <summary>
        /// Gets or Sets Float32
        /// </summary>
        [DataMember(Name="float32", EmitDefaultValue=false)]
        public int Float32 { get; set; }

        /// <summary>
        /// Gets or Sets Float64
        /// </summary>
        [DataMember(Name="float64", EmitDefaultValue=false)]
        public int Float64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DimensionTileExtent {\n");
            sb.Append("  Int8: ").Append(Int8).Append("\n");
            sb.Append("  Uint8: ").Append(Uint8).Append("\n");
            sb.Append("  Int16: ").Append(Int16).Append("\n");
            sb.Append("  Uint16: ").Append(Uint16).Append("\n");
            sb.Append("  Int32: ").Append(Int32).Append("\n");
            sb.Append("  Uint32: ").Append(Uint32).Append("\n");
            sb.Append("  Int64: ").Append(Int64).Append("\n");
            sb.Append("  Uint64: ").Append(Uint64).Append("\n");
            sb.Append("  Float32: ").Append(Float32).Append("\n");
            sb.Append("  Float64: ").Append(Float64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DimensionTileExtent);
        }

        /// <summary>
        /// Returns true if DimensionTileExtent instances are equal
        /// </summary>
        /// <param name="input">Instance of DimensionTileExtent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DimensionTileExtent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Int8 == input.Int8 ||
                    (this.Int8 != null &&
                    this.Int8.Equals(input.Int8))
                ) && 
                (
                    this.Uint8 == input.Uint8 ||
                    (this.Uint8 != null &&
                    this.Uint8.Equals(input.Uint8))
                ) && 
                (
                    this.Int16 == input.Int16 ||
                    (this.Int16 != null &&
                    this.Int16.Equals(input.Int16))
                ) && 
                (
                    this.Uint16 == input.Uint16 ||
                    (this.Uint16 != null &&
                    this.Uint16.Equals(input.Uint16))
                ) && 
                (
                    this.Int32 == input.Int32 ||
                    (this.Int32 != null &&
                    this.Int32.Equals(input.Int32))
                ) && 
                (
                    this.Uint32 == input.Uint32 ||
                    (this.Uint32 != null &&
                    this.Uint32.Equals(input.Uint32))
                ) && 
                (
                    this.Int64 == input.Int64 ||
                    (this.Int64 != null &&
                    this.Int64.Equals(input.Int64))
                ) && 
                (
                    this.Uint64 == input.Uint64 ||
                    (this.Uint64 != null &&
                    this.Uint64.Equals(input.Uint64))
                ) && 
                (
                    this.Float32 == input.Float32 ||
                    (this.Float32 != null &&
                    this.Float32.Equals(input.Float32))
                ) && 
                (
                    this.Float64 == input.Float64 ||
                    (this.Float64 != null &&
                    this.Float64.Equals(input.Float64))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Int8 != null)
                    hashCode = hashCode * 59 + this.Int8.GetHashCode();
                if (this.Uint8 != null)
                    hashCode = hashCode * 59 + this.Uint8.GetHashCode();
                if (this.Int16 != null)
                    hashCode = hashCode * 59 + this.Int16.GetHashCode();
                if (this.Uint16 != null)
                    hashCode = hashCode * 59 + this.Uint16.GetHashCode();
                if (this.Int32 != null)
                    hashCode = hashCode * 59 + this.Int32.GetHashCode();
                if (this.Uint32 != null)
                    hashCode = hashCode * 59 + this.Uint32.GetHashCode();
                if (this.Int64 != null)
                    hashCode = hashCode * 59 + this.Int64.GetHashCode();
                if (this.Uint64 != null)
                    hashCode = hashCode * 59 + this.Uint64.GetHashCode();
                if (this.Float32 != null)
                    hashCode = hashCode * 59 + this.Float32.GetHashCode();
                if (this.Float64 != null)
                    hashCode = hashCode * 59 + this.Float64.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
