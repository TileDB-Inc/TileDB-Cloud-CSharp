/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Contains array details for multi-array query including uri, ranges buffers
    /// </summary>
    [DataContract]
    public partial class UDFArrayDetails :  IEquatable<UDFArrayDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UDFArrayDetails" /> class.
        /// </summary>
        /// <param name="parameterId">An optional client-generated identifier to distinguish between multiple range/buffer requests from the same array in the same call. This may be set for MultiArrayUDFs that use the &#x60;argument_json&#x60; style of passing arrays. .</param>
        /// <param name="uri">array to set ranges and buffers on, must be in tiledb:// format.</param>
        /// <param name="ranges">ranges.</param>
        /// <param name="buffers">List of buffers to fetch (attributes + dimensions).</param>
        public UDFArrayDetails(string parameterId = default(string), string uri = default(string), QueryRanges ranges = default(QueryRanges), List<string> buffers = default(List<string>))
        {
            this.ParameterId = parameterId;
            this.ParameterId = parameterId;
            this.Uri = uri;
            this.Ranges = ranges;
            this.Buffers = buffers;
        }

        /// <summary>
        /// An optional client-generated identifier to distinguish between multiple range/buffer requests from the same array in the same call. This may be set for MultiArrayUDFs that use the &#x60;argument_json&#x60; style of passing arrays. 
        /// </summary>
        /// <value>An optional client-generated identifier to distinguish between multiple range/buffer requests from the same array in the same call. This may be set for MultiArrayUDFs that use the &#x60;argument_json&#x60; style of passing arrays. </value>
        [DataMember(Name="parameter_id", EmitDefaultValue=true)]
        public string ParameterId { get; set; }

        /// <summary>
        /// array to set ranges and buffers on, must be in tiledb:// format
        /// </summary>
        /// <value>array to set ranges and buffers on, must be in tiledb:// format</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Ranges
        /// </summary>
        [DataMember(Name="ranges", EmitDefaultValue=false)]
        public QueryRanges Ranges { get; set; }

        /// <summary>
        /// List of buffers to fetch (attributes + dimensions)
        /// </summary>
        /// <value>List of buffers to fetch (attributes + dimensions)</value>
        [DataMember(Name="buffers", EmitDefaultValue=false)]
        public List<string> Buffers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UDFArrayDetails {\n");
            sb.Append("  ParameterId: ").Append(ParameterId).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Ranges: ").Append(Ranges).Append("\n");
            sb.Append("  Buffers: ").Append(Buffers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UDFArrayDetails);
        }

        /// <summary>
        /// Returns true if UDFArrayDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of UDFArrayDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UDFArrayDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParameterId == input.ParameterId ||
                    (this.ParameterId != null &&
                    this.ParameterId.Equals(input.ParameterId))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Ranges == input.Ranges ||
                    (this.Ranges != null &&
                    this.Ranges.Equals(input.Ranges))
                ) && 
                (
                    this.Buffers == input.Buffers ||
                    this.Buffers != null &&
                    input.Buffers != null &&
                    this.Buffers.SequenceEqual(input.Buffers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParameterId != null)
                    hashCode = hashCode * 59 + this.ParameterId.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Ranges != null)
                    hashCode = hashCode * 59 + this.Ranges.GetHashCode();
                if (this.Buffers != null)
                    hashCode = hashCode * 59 + this.Buffers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
