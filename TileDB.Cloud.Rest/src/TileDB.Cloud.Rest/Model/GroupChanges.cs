/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// A request to change the members of a group. Contains assets to add or remove.
    /// </summary>
    [DataContract]
    public partial class GroupChanges :  IEquatable<GroupChanges>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupChanges" /> class.
        /// </summary>
        /// <param name="add">the assets, arrays or groups, to add to the group..</param>
        /// <param name="remove">the assets, arrays or groups, to remove from the group..</param>
        public GroupChanges(List<GroupMember> add = default(List<GroupMember>), List<GroupMember> remove = default(List<GroupMember>))
        {
            this.Add = add;
            this.Remove = remove;
        }

        /// <summary>
        /// the assets, arrays or groups, to add to the group.
        /// </summary>
        /// <value>the assets, arrays or groups, to add to the group.</value>
        [DataMember(Name="add", EmitDefaultValue=false)]
        public List<GroupMember> Add { get; set; }

        /// <summary>
        /// the assets, arrays or groups, to remove from the group.
        /// </summary>
        /// <value>the assets, arrays or groups, to remove from the group.</value>
        [DataMember(Name="remove", EmitDefaultValue=false)]
        public List<GroupMember> Remove { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupChanges {\n");
            sb.Append("  Add: ").Append(Add).Append("\n");
            sb.Append("  Remove: ").Append(Remove).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupChanges);
        }

        /// <summary>
        /// Returns true if GroupChanges instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupChanges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupChanges input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Add == input.Add ||
                    this.Add != null &&
                    input.Add != null &&
                    this.Add.SequenceEqual(input.Add)
                ) && 
                (
                    this.Remove == input.Remove ||
                    this.Remove != null &&
                    input.Remove != null &&
                    this.Remove.SequenceEqual(input.Remove)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Add != null)
                    hashCode = hashCode * 59 + this.Add.GetHashCode();
                if (this.Remove != null)
                    hashCode = hashCode * 59 + this.Remove.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
