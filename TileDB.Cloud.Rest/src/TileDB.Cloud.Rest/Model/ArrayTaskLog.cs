/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Array task stderr/stdout logs
    /// </summary>
    [DataContract]
    public partial class ArrayTaskLog :  IEquatable<ArrayTaskLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayTaskLog" /> class.
        /// </summary>
        /// <param name="arrayTaskId">ID of associated task.</param>
        /// <param name="logs">logs from array task.</param>
        public ArrayTaskLog(string arrayTaskId = default(string), string logs = default(string))
        {
            this.ArrayTaskId = arrayTaskId;
            this.Logs = logs;
        }

        /// <summary>
        /// ID of associated task
        /// </summary>
        /// <value>ID of associated task</value>
        [DataMember(Name="array_task_id", EmitDefaultValue=false)]
        public string ArrayTaskId { get; set; }

        /// <summary>
        /// logs from array task
        /// </summary>
        /// <value>logs from array task</value>
        [DataMember(Name="logs", EmitDefaultValue=false)]
        public string Logs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArrayTaskLog {\n");
            sb.Append("  ArrayTaskId: ").Append(ArrayTaskId).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArrayTaskLog);
        }

        /// <summary>
        /// Returns true if ArrayTaskLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ArrayTaskLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArrayTaskLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArrayTaskId == input.ArrayTaskId ||
                    (this.ArrayTaskId != null &&
                    this.ArrayTaskId.Equals(input.ArrayTaskId))
                ) && 
                (
                    this.Logs == input.Logs ||
                    (this.Logs != null &&
                    this.Logs.Equals(input.Logs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArrayTaskId != null)
                    hashCode = hashCode * 59 + this.ArrayTaskId.GetHashCode();
                if (this.Logs != null)
                    hashCode = hashCode * 59 + this.Logs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
