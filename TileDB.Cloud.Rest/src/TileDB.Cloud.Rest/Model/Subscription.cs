/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Subscription of a user (customer) to another user&#39;s arrays
    /// </summary>
    [DataContract]
    public partial class Subscription :  IEquatable<Subscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="id">Unique id of subscription as defined by Stripe.</param>
        /// <param name="ownerNamespaceUuid">Unique id of the array (product) owner.</param>
        /// <param name="customerNamespaceUuid">Unique id of the array (product) user (customer).</param>
        /// <param name="pricing">list of pricing used by this subscription.</param>
        public Subscription(string id = default(string), string ownerNamespaceUuid = default(string), string customerNamespaceUuid = default(string), List<Pricing> pricing = default(List<Pricing>))
        {
            this.Id = id;
            this.OwnerNamespaceUuid = ownerNamespaceUuid;
            this.CustomerNamespaceUuid = customerNamespaceUuid;
            this.Pricing = pricing;
        }

        /// <summary>
        /// Unique id of subscription as defined by Stripe
        /// </summary>
        /// <value>Unique id of subscription as defined by Stripe</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Unique id of the array (product) owner
        /// </summary>
        /// <value>Unique id of the array (product) owner</value>
        [DataMember(Name="owner_namespace_uuid", EmitDefaultValue=false)]
        public string OwnerNamespaceUuid { get; set; }

        /// <summary>
        /// Unique id of the array (product) user (customer)
        /// </summary>
        /// <value>Unique id of the array (product) user (customer)</value>
        [DataMember(Name="customer_namespace_uuid", EmitDefaultValue=false)]
        public string CustomerNamespaceUuid { get; set; }

        /// <summary>
        /// list of pricing used by this subscription
        /// </summary>
        /// <value>list of pricing used by this subscription</value>
        [DataMember(Name="pricing", EmitDefaultValue=false)]
        public List<Pricing> Pricing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OwnerNamespaceUuid: ").Append(OwnerNamespaceUuid).Append("\n");
            sb.Append("  CustomerNamespaceUuid: ").Append(CustomerNamespaceUuid).Append("\n");
            sb.Append("  Pricing: ").Append(Pricing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OwnerNamespaceUuid == input.OwnerNamespaceUuid ||
                    (this.OwnerNamespaceUuid != null &&
                    this.OwnerNamespaceUuid.Equals(input.OwnerNamespaceUuid))
                ) && 
                (
                    this.CustomerNamespaceUuid == input.CustomerNamespaceUuid ||
                    (this.CustomerNamespaceUuid != null &&
                    this.CustomerNamespaceUuid.Equals(input.CustomerNamespaceUuid))
                ) && 
                (
                    this.Pricing == input.Pricing ||
                    this.Pricing != null &&
                    input.Pricing != null &&
                    this.Pricing.SequenceEqual(input.Pricing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OwnerNamespaceUuid != null)
                    hashCode = hashCode * 59 + this.OwnerNamespaceUuid.GetHashCode();
                if (this.CustomerNamespaceUuid != null)
                    hashCode = hashCode * 59 + this.CustomerNamespaceUuid.GetHashCode();
                if (this.Pricing != null)
                    hashCode = hashCode * 59 + this.Pricing.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
