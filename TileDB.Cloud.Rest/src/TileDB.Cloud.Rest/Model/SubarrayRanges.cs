/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// A set of 1D ranges for a subarray
    /// </summary>
    [DataContract(Name = "SubarrayRanges")]
    public partial class SubarrayRanges : IEquatable<SubarrayRanges>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public Datatype? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubarrayRanges" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="hasDefaultRange">True if the range is the default range.</param>
        /// <param name="buffer">The bytes of the ranges.</param>
        public SubarrayRanges(Datatype? type = default(Datatype?), bool hasDefaultRange = default(bool), List<int> buffer = default(List<int>))
        {
            this.Type = type;
            this.HasDefaultRange = hasDefaultRange;
            this.Buffer = buffer;
        }

        /// <summary>
        /// True if the range is the default range
        /// </summary>
        /// <value>True if the range is the default range</value>
        [DataMember(Name = "hasDefaultRange", EmitDefaultValue = true)]
        public bool HasDefaultRange { get; set; }

        /// <summary>
        /// The bytes of the ranges
        /// </summary>
        /// <value>The bytes of the ranges</value>
        [DataMember(Name = "buffer", EmitDefaultValue = false)]
        public List<int> Buffer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubarrayRanges {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  HasDefaultRange: ").Append(HasDefaultRange).Append("\n");
            sb.Append("  Buffer: ").Append(Buffer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubarrayRanges);
        }

        /// <summary>
        /// Returns true if SubarrayRanges instances are equal
        /// </summary>
        /// <param name="input">Instance of SubarrayRanges to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubarrayRanges input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.HasDefaultRange == input.HasDefaultRange ||
                    this.HasDefaultRange.Equals(input.HasDefaultRange)
                ) && 
                (
                    this.Buffer == input.Buffer ||
                    this.Buffer != null &&
                    input.Buffer != null &&
                    this.Buffer.SequenceEqual(input.Buffer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.HasDefaultRange.GetHashCode();
                if (this.Buffer != null)
                {
                    hashCode = (hashCode * 59) + this.Buffer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
