/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Custom storage locations on a perâ€“asset type basis. If any is unset, a suffix of the owning (user/organization) &#x60;default_s3_path&#x60; is used. 
    /// </summary>
    [DataContract(Name = "AssetLocations")]
    public partial class AssetLocations : IEquatable<AssetLocations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetLocations" /> class.
        /// </summary>
        /// <param name="arrays">arrays.</param>
        /// <param name="files">files.</param>
        /// <param name="groups">groups.</param>
        /// <param name="mlModels">mlModels.</param>
        /// <param name="notebooks">notebooks.</param>
        /// <param name="taskGraphs">taskGraphs.</param>
        /// <param name="udfs">udfs.</param>
        public AssetLocations(StorageLocation arrays = default(StorageLocation), StorageLocation files = default(StorageLocation), StorageLocation groups = default(StorageLocation), StorageLocation mlModels = default(StorageLocation), StorageLocation notebooks = default(StorageLocation), StorageLocation taskGraphs = default(StorageLocation), StorageLocation udfs = default(StorageLocation))
        {
            this.Arrays = arrays;
            this.Files = files;
            this.Groups = groups;
            this.MlModels = mlModels;
            this.Notebooks = notebooks;
            this.TaskGraphs = taskGraphs;
            this.Udfs = udfs;
        }

        /// <summary>
        /// Gets or Sets Arrays
        /// </summary>
        [DataMember(Name = "arrays", EmitDefaultValue = false)]
        public StorageLocation Arrays { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name = "files", EmitDefaultValue = false)]
        public StorageLocation Files { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public StorageLocation Groups { get; set; }

        /// <summary>
        /// Gets or Sets MlModels
        /// </summary>
        [DataMember(Name = "ml_models", EmitDefaultValue = false)]
        public StorageLocation MlModels { get; set; }

        /// <summary>
        /// Gets or Sets Notebooks
        /// </summary>
        [DataMember(Name = "notebooks", EmitDefaultValue = false)]
        public StorageLocation Notebooks { get; set; }

        /// <summary>
        /// Gets or Sets TaskGraphs
        /// </summary>
        [DataMember(Name = "task_graphs", EmitDefaultValue = false)]
        public StorageLocation TaskGraphs { get; set; }

        /// <summary>
        /// Gets or Sets Udfs
        /// </summary>
        [DataMember(Name = "udfs", EmitDefaultValue = false)]
        public StorageLocation Udfs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetLocations {\n");
            sb.Append("  Arrays: ").Append(Arrays).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  MlModels: ").Append(MlModels).Append("\n");
            sb.Append("  Notebooks: ").Append(Notebooks).Append("\n");
            sb.Append("  TaskGraphs: ").Append(TaskGraphs).Append("\n");
            sb.Append("  Udfs: ").Append(Udfs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetLocations);
        }

        /// <summary>
        /// Returns true if AssetLocations instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetLocations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetLocations input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Arrays == input.Arrays ||
                    (this.Arrays != null &&
                    this.Arrays.Equals(input.Arrays))
                ) && 
                (
                    this.Files == input.Files ||
                    (this.Files != null &&
                    this.Files.Equals(input.Files))
                ) && 
                (
                    this.Groups == input.Groups ||
                    (this.Groups != null &&
                    this.Groups.Equals(input.Groups))
                ) && 
                (
                    this.MlModels == input.MlModels ||
                    (this.MlModels != null &&
                    this.MlModels.Equals(input.MlModels))
                ) && 
                (
                    this.Notebooks == input.Notebooks ||
                    (this.Notebooks != null &&
                    this.Notebooks.Equals(input.Notebooks))
                ) && 
                (
                    this.TaskGraphs == input.TaskGraphs ||
                    (this.TaskGraphs != null &&
                    this.TaskGraphs.Equals(input.TaskGraphs))
                ) && 
                (
                    this.Udfs == input.Udfs ||
                    (this.Udfs != null &&
                    this.Udfs.Equals(input.Udfs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Arrays != null)
                {
                    hashCode = (hashCode * 59) + this.Arrays.GetHashCode();
                }
                if (this.Files != null)
                {
                    hashCode = (hashCode * 59) + this.Files.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                if (this.MlModels != null)
                {
                    hashCode = (hashCode * 59) + this.MlModels.GetHashCode();
                }
                if (this.Notebooks != null)
                {
                    hashCode = (hashCode * 59) + this.Notebooks.GetHashCode();
                }
                if (this.TaskGraphs != null)
                {
                    hashCode = (hashCode * 59) + this.TaskGraphs.GetHashCode();
                }
                if (this.Udfs != null)
                {
                    hashCode = (hashCode * 59) + this.Udfs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
