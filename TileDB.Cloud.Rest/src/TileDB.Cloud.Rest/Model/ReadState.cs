/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// state for reads
    /// </summary>
    [DataContract]
    public partial class ReadState :  IEquatable<ReadState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadState" /> class.
        /// </summary>
        /// <param name="initialized">True if the reader has been initialized..</param>
        /// <param name="overflowed">True if the query produced results that could not fit in some buffer..</param>
        /// <param name="unsplittable">True if the current subarray partition is unsplittable..</param>
        /// <param name="subarrayPartitioner">subarrayPartitioner.</param>
        public ReadState(bool initialized = default(bool), bool overflowed = default(bool), bool unsplittable = default(bool), SubarrayPartitioner subarrayPartitioner = default(SubarrayPartitioner))
        {
            this.Initialized = initialized;
            this.Overflowed = overflowed;
            this.Unsplittable = unsplittable;
            this.SubarrayPartitioner = subarrayPartitioner;
        }

        /// <summary>
        /// True if the reader has been initialized.
        /// </summary>
        /// <value>True if the reader has been initialized.</value>
        [DataMember(Name="initialized", EmitDefaultValue=false)]
        public bool Initialized { get; set; }

        /// <summary>
        /// True if the query produced results that could not fit in some buffer.
        /// </summary>
        /// <value>True if the query produced results that could not fit in some buffer.</value>
        [DataMember(Name="overflowed", EmitDefaultValue=false)]
        public bool Overflowed { get; set; }

        /// <summary>
        /// True if the current subarray partition is unsplittable.
        /// </summary>
        /// <value>True if the current subarray partition is unsplittable.</value>
        [DataMember(Name="unsplittable", EmitDefaultValue=false)]
        public bool Unsplittable { get; set; }

        /// <summary>
        /// Gets or Sets SubarrayPartitioner
        /// </summary>
        [DataMember(Name="subarrayPartitioner", EmitDefaultValue=false)]
        public SubarrayPartitioner SubarrayPartitioner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReadState {\n");
            sb.Append("  Initialized: ").Append(Initialized).Append("\n");
            sb.Append("  Overflowed: ").Append(Overflowed).Append("\n");
            sb.Append("  Unsplittable: ").Append(Unsplittable).Append("\n");
            sb.Append("  SubarrayPartitioner: ").Append(SubarrayPartitioner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadState);
        }

        /// <summary>
        /// Returns true if ReadState instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Initialized == input.Initialized ||
                    (this.Initialized != null &&
                    this.Initialized.Equals(input.Initialized))
                ) && 
                (
                    this.Overflowed == input.Overflowed ||
                    (this.Overflowed != null &&
                    this.Overflowed.Equals(input.Overflowed))
                ) && 
                (
                    this.Unsplittable == input.Unsplittable ||
                    (this.Unsplittable != null &&
                    this.Unsplittable.Equals(input.Unsplittable))
                ) && 
                (
                    this.SubarrayPartitioner == input.SubarrayPartitioner ||
                    (this.SubarrayPartitioner != null &&
                    this.SubarrayPartitioner.Equals(input.SubarrayPartitioner))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Initialized != null)
                    hashCode = hashCode * 59 + this.Initialized.GetHashCode();
                if (this.Overflowed != null)
                    hashCode = hashCode * 59 + this.Overflowed.GetHashCode();
                if (this.Unsplittable != null)
                    hashCode = hashCode * 59 + this.Unsplittable.GetHashCode();
                if (this.SubarrayPartitioner != null)
                    hashCode = hashCode * 59 + this.SubarrayPartitioner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
