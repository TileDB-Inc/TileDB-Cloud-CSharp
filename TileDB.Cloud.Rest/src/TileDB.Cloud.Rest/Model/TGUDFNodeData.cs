/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// A node specifying the execution of a user-defined function.
    /// </summary>
    [DataContract(Name = "TGUDFNodeData")]
    public partial class TGUDFNodeData : IEquatable<TGUDFNodeData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ResultFormat
        /// </summary>
        [DataMember(Name = "result_format", EmitDefaultValue = false)]
        public ResultFormat? ResultFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TGUDFNodeData" /> class.
        /// </summary>
        /// <param name="registeredUdfName">If set, the name of the registered UDF to execute, in the format &#x60;namespace/name&#x60;. Either this or &#x60;executable_code&#x60; should be set, but not both. .</param>
        /// <param name="executableCode">If set, the base64 serialization of the code for this step, encoded in a language-specific format (e.g. Pickle for Python, serialization for R). .</param>
        /// <param name="sourceText">Optionally, the source text for the code passed in &#x60;executable_code&#x60;. *For reference only; only the code in &#x60;executable_code&#x60; is actually executed.* This will be included in activity logs and may be useful for debugging. .</param>
        /// <param name="environment">environment.</param>
        /// <param name="arguments">The arguments to a UDF function. This encompasses both named and positional arguments. The format is designed to provide compatibility across languages like Python which have a fairly traditional split between positional arguments and named arguments, and languages like R which has a rather unique way of specifying arguments. For Python (and most other languages), all positional arguments will come before all named arguments (if any are present):      // fn(arg1, arg2, arg3)     [       {value: arg1},       {value: arg2},       {value: arg3},     ]     // fn(arg1, arg2, n&#x3D;kw1, a&#x3D;kw2)     [       {value: arg1},       {value: arg2},       {name: \&quot;n\&quot;, value: kw1},       {name: \&quot;a\&quot;, value: kw2},     ]     // fn(kw&#x3D;k1, only&#x3D;k2)     [       {name: \&quot;kw\&quot;, value: k1},       {name: \&quot;only\&quot;, value: k2},     ]  However, in R, named and positional arguments may be intermixed freely:      // fn(arg, n&#x3D;kw1, arg2)     [       {value: arg},       {name: \&quot;n\&quot;, value: kw1},       {value: arg2},     ] .</param>
        /// <param name="resultFormat">resultFormat.</param>
        public TGUDFNodeData(string registeredUdfName = default(string), string executableCode = default(string), string sourceText = default(string), TGUDFEnvironment environment = default(TGUDFEnvironment), List<TGUDFArgument> arguments = default(List<TGUDFArgument>), ResultFormat? resultFormat = default(ResultFormat?))
        {
            this.RegisteredUdfName = registeredUdfName;
            this.ExecutableCode = executableCode;
            this.SourceText = sourceText;
            this.Environment = environment;
            this.Arguments = arguments;
            this.ResultFormat = resultFormat;
        }

        /// <summary>
        /// If set, the name of the registered UDF to execute, in the format &#x60;namespace/name&#x60;. Either this or &#x60;executable_code&#x60; should be set, but not both. 
        /// </summary>
        /// <value>If set, the name of the registered UDF to execute, in the format &#x60;namespace/name&#x60;. Either this or &#x60;executable_code&#x60; should be set, but not both. </value>
        [DataMember(Name = "registered_udf_name", EmitDefaultValue = true)]
        public string RegisteredUdfName { get; set; }

        /// <summary>
        /// If set, the base64 serialization of the code for this step, encoded in a language-specific format (e.g. Pickle for Python, serialization for R). 
        /// </summary>
        /// <value>If set, the base64 serialization of the code for this step, encoded in a language-specific format (e.g. Pickle for Python, serialization for R). </value>
        [DataMember(Name = "executable_code", EmitDefaultValue = true)]
        public string ExecutableCode { get; set; }

        /// <summary>
        /// Optionally, the source text for the code passed in &#x60;executable_code&#x60;. *For reference only; only the code in &#x60;executable_code&#x60; is actually executed.* This will be included in activity logs and may be useful for debugging. 
        /// </summary>
        /// <value>Optionally, the source text for the code passed in &#x60;executable_code&#x60;. *For reference only; only the code in &#x60;executable_code&#x60; is actually executed.* This will be included in activity logs and may be useful for debugging. </value>
        [DataMember(Name = "source_text", EmitDefaultValue = false)]
        public string SourceText { get; set; }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public TGUDFEnvironment Environment { get; set; }

        /// <summary>
        /// The arguments to a UDF function. This encompasses both named and positional arguments. The format is designed to provide compatibility across languages like Python which have a fairly traditional split between positional arguments and named arguments, and languages like R which has a rather unique way of specifying arguments. For Python (and most other languages), all positional arguments will come before all named arguments (if any are present):      // fn(arg1, arg2, arg3)     [       {value: arg1},       {value: arg2},       {value: arg3},     ]     // fn(arg1, arg2, n&#x3D;kw1, a&#x3D;kw2)     [       {value: arg1},       {value: arg2},       {name: \&quot;n\&quot;, value: kw1},       {name: \&quot;a\&quot;, value: kw2},     ]     // fn(kw&#x3D;k1, only&#x3D;k2)     [       {name: \&quot;kw\&quot;, value: k1},       {name: \&quot;only\&quot;, value: k2},     ]  However, in R, named and positional arguments may be intermixed freely:      // fn(arg, n&#x3D;kw1, arg2)     [       {value: arg},       {name: \&quot;n\&quot;, value: kw1},       {value: arg2},     ] 
        /// </summary>
        /// <value>The arguments to a UDF function. This encompasses both named and positional arguments. The format is designed to provide compatibility across languages like Python which have a fairly traditional split between positional arguments and named arguments, and languages like R which has a rather unique way of specifying arguments. For Python (and most other languages), all positional arguments will come before all named arguments (if any are present):      // fn(arg1, arg2, arg3)     [       {value: arg1},       {value: arg2},       {value: arg3},     ]     // fn(arg1, arg2, n&#x3D;kw1, a&#x3D;kw2)     [       {value: arg1},       {value: arg2},       {name: \&quot;n\&quot;, value: kw1},       {name: \&quot;a\&quot;, value: kw2},     ]     // fn(kw&#x3D;k1, only&#x3D;k2)     [       {name: \&quot;kw\&quot;, value: k1},       {name: \&quot;only\&quot;, value: k2},     ]  However, in R, named and positional arguments may be intermixed freely:      // fn(arg, n&#x3D;kw1, arg2)     [       {value: arg},       {name: \&quot;n\&quot;, value: kw1},       {value: arg2},     ] </value>
        [DataMember(Name = "arguments", EmitDefaultValue = false)]
        public List<TGUDFArgument> Arguments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TGUDFNodeData {\n");
            sb.Append("  RegisteredUdfName: ").Append(RegisteredUdfName).Append("\n");
            sb.Append("  ExecutableCode: ").Append(ExecutableCode).Append("\n");
            sb.Append("  SourceText: ").Append(SourceText).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  ResultFormat: ").Append(ResultFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TGUDFNodeData);
        }

        /// <summary>
        /// Returns true if TGUDFNodeData instances are equal
        /// </summary>
        /// <param name="input">Instance of TGUDFNodeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TGUDFNodeData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RegisteredUdfName == input.RegisteredUdfName ||
                    (this.RegisteredUdfName != null &&
                    this.RegisteredUdfName.Equals(input.RegisteredUdfName))
                ) && 
                (
                    this.ExecutableCode == input.ExecutableCode ||
                    (this.ExecutableCode != null &&
                    this.ExecutableCode.Equals(input.ExecutableCode))
                ) && 
                (
                    this.SourceText == input.SourceText ||
                    (this.SourceText != null &&
                    this.SourceText.Equals(input.SourceText))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.Arguments == input.Arguments ||
                    this.Arguments != null &&
                    input.Arguments != null &&
                    this.Arguments.SequenceEqual(input.Arguments)
                ) && 
                (
                    this.ResultFormat == input.ResultFormat ||
                    this.ResultFormat.Equals(input.ResultFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegisteredUdfName != null)
                {
                    hashCode = (hashCode * 59) + this.RegisteredUdfName.GetHashCode();
                }
                if (this.ExecutableCode != null)
                {
                    hashCode = (hashCode * 59) + this.ExecutableCode.GetHashCode();
                }
                if (this.SourceText != null)
                {
                    hashCode = (hashCode * 59) + this.SourceText.GetHashCode();
                }
                if (this.Environment != null)
                {
                    hashCode = (hashCode * 59) + this.Environment.GetHashCode();
                }
                if (this.Arguments != null)
                {
                    hashCode = (hashCode * 59) + this.Arguments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResultFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
