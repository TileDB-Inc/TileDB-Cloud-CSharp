/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Represents an open array
    /// </summary>
    [DataContract(Name = "Array")]
    public partial class Array : IEquatable<Array>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets QueryType
        /// </summary>
        [DataMember(Name = "queryType", IsRequired = true, EmitDefaultValue = false)]
        public Querytype QueryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Array" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Array() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Array" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (epoch milliseconds) array is opened at (required).</param>
        /// <param name="queryType">queryType (required).</param>
        /// <param name="uri">Array uri (required).</param>
        public Array(decimal timestamp = default(decimal), Querytype queryType = default(Querytype), string uri = default(string))
        {
            this.Timestamp = timestamp;
            this.QueryType = queryType;
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException("uri is a required property for Array and cannot be null");
            }
            this.Uri = uri;
        }

        /// <summary>
        /// timestamp (epoch milliseconds) array is opened at
        /// </summary>
        /// <value>timestamp (epoch milliseconds) array is opened at</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        public decimal Timestamp { get; set; }

        /// <summary>
        /// Array uri
        /// </summary>
        /// <value>Array uri</value>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Array {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  QueryType: ").Append(QueryType).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Array);
        }

        /// <summary>
        /// Returns true if Array instances are equal
        /// </summary>
        /// <param name="input">Instance of Array to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Array input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.QueryType == input.QueryType ||
                    this.QueryType.Equals(input.QueryType)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                hashCode = (hashCode * 59) + this.QueryType.GetHashCode();
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
