/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Encapsulates information regarding inviting people using email to share group, same permissions for all invitees
    /// </summary>
    [DataContract(Name = "InvitationGroupShareEmail")]
    public partial class InvitationGroupShareEmail : IEquatable<InvitationGroupShareEmail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationGroupShareEmail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvitationGroupShareEmail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationGroupShareEmail" /> class.
        /// </summary>
        /// <param name="arrayActions">List of permitted array actions (required).</param>
        /// <param name="groupActions">List of permitted group actions (required).</param>
        /// <param name="inviteeEmailOrName">inviteeEmailOrName (required).</param>
        public InvitationGroupShareEmail(List<ArrayActions> arrayActions = default(List<ArrayActions>), List<GroupActions> groupActions = default(List<GroupActions>), List<string> inviteeEmailOrName = default(List<string>))
        {
            // to ensure "arrayActions" is required (not null)
            if (arrayActions == null)
            {
                throw new ArgumentNullException("arrayActions is a required property for InvitationGroupShareEmail and cannot be null");
            }
            this.ArrayActions = arrayActions;
            // to ensure "groupActions" is required (not null)
            if (groupActions == null)
            {
                throw new ArgumentNullException("groupActions is a required property for InvitationGroupShareEmail and cannot be null");
            }
            this.GroupActions = groupActions;
            // to ensure "inviteeEmailOrName" is required (not null)
            if (inviteeEmailOrName == null)
            {
                throw new ArgumentNullException("inviteeEmailOrName is a required property for InvitationGroupShareEmail and cannot be null");
            }
            this.InviteeEmailOrName = inviteeEmailOrName;
        }

        /// <summary>
        /// List of permitted array actions
        /// </summary>
        /// <value>List of permitted array actions</value>
        [DataMember(Name = "array_actions", IsRequired = true, EmitDefaultValue = false)]
        public List<ArrayActions> ArrayActions { get; set; }

        /// <summary>
        /// List of permitted group actions
        /// </summary>
        /// <value>List of permitted group actions</value>
        [DataMember(Name = "group_actions", IsRequired = true, EmitDefaultValue = false)]
        public List<GroupActions> GroupActions { get; set; }

        /// <summary>
        /// Gets or Sets InviteeEmailOrName
        /// </summary>
        [DataMember(Name = "invitee_email_or_name", IsRequired = true, EmitDefaultValue = false)]
        public List<string> InviteeEmailOrName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvitationGroupShareEmail {\n");
            sb.Append("  ArrayActions: ").Append(ArrayActions).Append("\n");
            sb.Append("  GroupActions: ").Append(GroupActions).Append("\n");
            sb.Append("  InviteeEmailOrName: ").Append(InviteeEmailOrName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvitationGroupShareEmail);
        }

        /// <summary>
        /// Returns true if InvitationGroupShareEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of InvitationGroupShareEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvitationGroupShareEmail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ArrayActions == input.ArrayActions ||
                    this.ArrayActions != null &&
                    input.ArrayActions != null &&
                    this.ArrayActions.SequenceEqual(input.ArrayActions)
                ) && 
                (
                    this.GroupActions == input.GroupActions ||
                    this.GroupActions != null &&
                    input.GroupActions != null &&
                    this.GroupActions.SequenceEqual(input.GroupActions)
                ) && 
                (
                    this.InviteeEmailOrName == input.InviteeEmailOrName ||
                    this.InviteeEmailOrName != null &&
                    input.InviteeEmailOrName != null &&
                    this.InviteeEmailOrName.SequenceEqual(input.InviteeEmailOrName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArrayActions != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayActions.GetHashCode();
                }
                if (this.GroupActions != null)
                {
                    hashCode = (hashCode * 59) + this.GroupActions.GetHashCode();
                }
                if (this.InviteeEmailOrName != null)
                {
                    hashCode = (hashCode * 59) + this.InviteeEmailOrName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
