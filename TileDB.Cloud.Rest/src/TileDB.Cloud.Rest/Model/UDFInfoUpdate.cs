/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// User-defined function that can persist in db, used and shared multiple times
    /// </summary>
    [DataContract]
    public partial class UDFInfoUpdate :  IEquatable<UDFInfoUpdate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public UDFLanguage? Language { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public UDFType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UDFInfoUpdate" /> class.
        /// </summary>
        /// <param name="name">name of udf.</param>
        /// <param name="language">language.</param>
        /// <param name="version">Type-specific version.</param>
        /// <param name="imageName">Docker image name to use for udf.</param>
        /// <param name="type">type.</param>
        /// <param name="exec">Type-specific executable text.</param>
        /// <param name="execRaw">optional raw text to store of serialized function, used for showing in UI.</param>
        /// <param name="readme">Markdown readme of udfs.</param>
        /// <param name="licenseId">License identifier from SPDX License List or Custom.</param>
        /// <param name="licenseText">License text.</param>
        /// <param name="tags">optional tags for udf.</param>
        public UDFInfoUpdate(string name = default(string), UDFLanguage? language = default(UDFLanguage?), string version = default(string), string imageName = default(string), UDFType? type = default(UDFType?), string exec = default(string), string execRaw = default(string), string readme = default(string), string licenseId = default(string), string licenseText = default(string), List<string> tags = default(List<string>))
        {
            this.Name = name;
            this.Language = language;
            this._Version = version;
            this.ImageName = imageName;
            this.Type = type;
            this.Exec = exec;
            this.ExecRaw = execRaw;
            this.Readme = readme;
            this.LicenseId = licenseId;
            this.LicenseText = licenseText;
            this.Tags = tags;
        }

        /// <summary>
        /// name of udf
        /// </summary>
        /// <value>name of udf</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Type-specific version
        /// </summary>
        /// <value>Type-specific version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string _Version { get; set; }

        /// <summary>
        /// Docker image name to use for udf
        /// </summary>
        /// <value>Docker image name to use for udf</value>
        [DataMember(Name="image_name", EmitDefaultValue=false)]
        public string ImageName { get; set; }


        /// <summary>
        /// Type-specific executable text
        /// </summary>
        /// <value>Type-specific executable text</value>
        [DataMember(Name="exec", EmitDefaultValue=false)]
        public string Exec { get; set; }

        /// <summary>
        /// optional raw text to store of serialized function, used for showing in UI
        /// </summary>
        /// <value>optional raw text to store of serialized function, used for showing in UI</value>
        [DataMember(Name="exec_raw", EmitDefaultValue=false)]
        public string ExecRaw { get; set; }

        /// <summary>
        /// Markdown readme of udfs
        /// </summary>
        /// <value>Markdown readme of udfs</value>
        [DataMember(Name="readme", EmitDefaultValue=false)]
        public string Readme { get; set; }

        /// <summary>
        /// License identifier from SPDX License List or Custom
        /// </summary>
        /// <value>License identifier from SPDX License List or Custom</value>
        [DataMember(Name="license_id", EmitDefaultValue=false)]
        public string LicenseId { get; set; }

        /// <summary>
        /// License text
        /// </summary>
        /// <value>License text</value>
        [DataMember(Name="license_text", EmitDefaultValue=false)]
        public string LicenseText { get; set; }

        /// <summary>
        /// optional tags for udf
        /// </summary>
        /// <value>optional tags for udf</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UDFInfoUpdate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  ImageName: ").Append(ImageName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Exec: ").Append(Exec).Append("\n");
            sb.Append("  ExecRaw: ").Append(ExecRaw).Append("\n");
            sb.Append("  Readme: ").Append(Readme).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  LicenseText: ").Append(LicenseText).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UDFInfoUpdate);
        }

        /// <summary>
        /// Returns true if UDFInfoUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of UDFInfoUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UDFInfoUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.ImageName == input.ImageName ||
                    (this.ImageName != null &&
                    this.ImageName.Equals(input.ImageName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Exec == input.Exec ||
                    (this.Exec != null &&
                    this.Exec.Equals(input.Exec))
                ) && 
                (
                    this.ExecRaw == input.ExecRaw ||
                    (this.ExecRaw != null &&
                    this.ExecRaw.Equals(input.ExecRaw))
                ) && 
                (
                    this.Readme == input.Readme ||
                    (this.Readme != null &&
                    this.Readme.Equals(input.Readme))
                ) && 
                (
                    this.LicenseId == input.LicenseId ||
                    (this.LicenseId != null &&
                    this.LicenseId.Equals(input.LicenseId))
                ) && 
                (
                    this.LicenseText == input.LicenseText ||
                    (this.LicenseText != null &&
                    this.LicenseText.Equals(input.LicenseText))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.ImageName != null)
                    hashCode = hashCode * 59 + this.ImageName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Exec != null)
                    hashCode = hashCode * 59 + this.Exec.GetHashCode();
                if (this.ExecRaw != null)
                    hashCode = hashCode * 59 + this.ExecRaw.GetHashCode();
                if (this.Readme != null)
                    hashCode = hashCode * 59 + this.Readme.GetHashCode();
                if (this.LicenseId != null)
                    hashCode = hashCode * 59 + this.LicenseId.GetHashCode();
                if (this.LicenseText != null)
                    hashCode = hashCode * 59 + this.LicenseText.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
