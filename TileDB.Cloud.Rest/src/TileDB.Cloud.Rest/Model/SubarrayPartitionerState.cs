/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// The state information for the remaining partitions to be produced
    /// </summary>
    [DataContract]
    public partial class SubarrayPartitionerState :  IEquatable<SubarrayPartitionerState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubarrayPartitionerState" /> class.
        /// </summary>
        /// <param name="start">State start.</param>
        /// <param name="end">State end.</param>
        /// <param name="singleRange">State singleRange.</param>
        /// <param name="multiRange">State multiRange.</param>
        public SubarrayPartitionerState(int start = default(int), int end = default(int), List<Subarray> singleRange = default(List<Subarray>), List<Subarray> multiRange = default(List<Subarray>))
        {
            this.Start = start;
            this.End = end;
            this.SingleRange = singleRange;
            this.MultiRange = multiRange;
        }

        /// <summary>
        /// State start
        /// </summary>
        /// <value>State start</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int Start { get; set; }

        /// <summary>
        /// State end
        /// </summary>
        /// <value>State end</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public int End { get; set; }

        /// <summary>
        /// State singleRange
        /// </summary>
        /// <value>State singleRange</value>
        [DataMember(Name="singleRange", EmitDefaultValue=false)]
        public List<Subarray> SingleRange { get; set; }

        /// <summary>
        /// State multiRange
        /// </summary>
        /// <value>State multiRange</value>
        [DataMember(Name="multiRange", EmitDefaultValue=false)]
        public List<Subarray> MultiRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubarrayPartitionerState {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  SingleRange: ").Append(SingleRange).Append("\n");
            sb.Append("  MultiRange: ").Append(MultiRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubarrayPartitionerState);
        }

        /// <summary>
        /// Returns true if SubarrayPartitionerState instances are equal
        /// </summary>
        /// <param name="input">Instance of SubarrayPartitionerState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubarrayPartitionerState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.SingleRange == input.SingleRange ||
                    this.SingleRange != null &&
                    input.SingleRange != null &&
                    this.SingleRange.SequenceEqual(input.SingleRange)
                ) && 
                (
                    this.MultiRange == input.MultiRange ||
                    this.MultiRange != null &&
                    input.MultiRange != null &&
                    this.MultiRange.SequenceEqual(input.MultiRange)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.SingleRange != null)
                    hashCode = hashCode * 59 + this.SingleRange.GetHashCode();
                if (this.MultiRange != null)
                    hashCode = hashCode * 59 + this.MultiRange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
