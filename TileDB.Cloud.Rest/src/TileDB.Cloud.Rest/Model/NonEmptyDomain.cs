/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// object representing a non-empty domain
    /// </summary>
    [DataContract]
    public partial class NonEmptyDomain :  IEquatable<NonEmptyDomain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NonEmptyDomain" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NonEmptyDomain() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NonEmptyDomain" /> class.
        /// </summary>
        /// <param name="nonEmptyDomain">nonEmptyDomain (required).</param>
        /// <param name="isEmpty">Is non-empty domain really empty? (required).</param>
        public NonEmptyDomain(DomainArray nonEmptyDomain = default(DomainArray), bool isEmpty = default(bool))
        {
            // to ensure "nonEmptyDomain" is required (not null)
            if (nonEmptyDomain == null)
            {
                throw new InvalidDataException("nonEmptyDomain is a required property for NonEmptyDomain and cannot be null");
            }
            else
            {
                this._NonEmptyDomain = nonEmptyDomain;
            }

            // to ensure "isEmpty" is required (not null)
            if (isEmpty == null)
            {
                throw new InvalidDataException("isEmpty is a required property for NonEmptyDomain and cannot be null");
            }
            else
            {
                this.IsEmpty = isEmpty;
            }

        }

        /// <summary>
        /// Gets or Sets _NonEmptyDomain
        /// </summary>
        [DataMember(Name="nonEmptyDomain", EmitDefaultValue=true)]
        public DomainArray _NonEmptyDomain { get; set; }

        /// <summary>
        /// Is non-empty domain really empty?
        /// </summary>
        /// <value>Is non-empty domain really empty?</value>
        [DataMember(Name="isEmpty", EmitDefaultValue=true)]
        public bool IsEmpty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NonEmptyDomain {\n");
            sb.Append("  _NonEmptyDomain: ").Append(_NonEmptyDomain).Append("\n");
            sb.Append("  IsEmpty: ").Append(IsEmpty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NonEmptyDomain);
        }

        /// <summary>
        /// Returns true if NonEmptyDomain instances are equal
        /// </summary>
        /// <param name="input">Instance of NonEmptyDomain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NonEmptyDomain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._NonEmptyDomain == input._NonEmptyDomain ||
                    (this._NonEmptyDomain != null &&
                    this._NonEmptyDomain.Equals(input._NonEmptyDomain))
                ) && 
                (
                    this.IsEmpty == input.IsEmpty ||
                    (this.IsEmpty != null &&
                    this.IsEmpty.Equals(input.IsEmpty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._NonEmptyDomain != null)
                    hashCode = hashCode * 59 + this._NonEmptyDomain.GetHashCode();
                if (this.IsEmpty != null)
                    hashCode = hashCode * 59 + this.IsEmpty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
