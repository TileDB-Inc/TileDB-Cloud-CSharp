/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Metadata about an individual node in a task graph.
    /// </summary>
    [DataContract(Name = "TaskGraphNodeMetadata")]
    public partial class TaskGraphNodeMetadata : IEquatable<TaskGraphNodeMetadata>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RunLocation
        /// </summary>
        [DataMember(Name = "run_location", EmitDefaultValue = false)]
        public TaskGraphLogRunLocation? RunLocation { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public ArrayTaskStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGraphNodeMetadata" /> class.
        /// </summary>
        /// <param name="clientNodeUuid">The client-generated UUID of the given graph node..</param>
        /// <param name="name">The client-generated name of the node. This is not guaranteed to be unique. .</param>
        /// <param name="dependsOn">The client_node_uuid of each node that this node depends upon. Used to define the structure of the graph. .</param>
        /// <param name="runLocation">runLocation.</param>
        /// <param name="status">status.</param>
        public TaskGraphNodeMetadata(string clientNodeUuid = default(string), string name = default(string), List<string> dependsOn = default(List<string>), TaskGraphLogRunLocation? runLocation = default(TaskGraphLogRunLocation?), ArrayTaskStatus? status = default(ArrayTaskStatus?))
        {
            this.ClientNodeUuid = clientNodeUuid;
            this.Name = name;
            this.DependsOn = dependsOn;
            this.RunLocation = runLocation;
            this.Status = status;
        }

        /// <summary>
        /// The client-generated UUID of the given graph node.
        /// </summary>
        /// <value>The client-generated UUID of the given graph node.</value>
        [DataMember(Name = "client_node_uuid", EmitDefaultValue = false)]
        public string ClientNodeUuid { get; set; }

        /// <summary>
        /// The client-generated name of the node. This is not guaranteed to be unique. 
        /// </summary>
        /// <value>The client-generated name of the node. This is not guaranteed to be unique. </value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The client_node_uuid of each node that this node depends upon. Used to define the structure of the graph. 
        /// </summary>
        /// <value>The client_node_uuid of each node that this node depends upon. Used to define the structure of the graph. </value>
        [DataMember(Name = "depends_on", EmitDefaultValue = false)]
        public List<string> DependsOn { get; set; }

        /// <summary>
        /// ArrayTasks representing each execution attempt for this node. For nodes that have never been submitted, this will be empty. For nodes that have been retried, this may have multiple entries. The last one in the list represents the most recent execution. This is read-only and generated by the server based on the tasks it has actually executed. 
        /// </summary>
        /// <value>ArrayTasks representing each execution attempt for this node. For nodes that have never been submitted, this will be empty. For nodes that have been retried, this may have multiple entries. The last one in the list represents the most recent execution. This is read-only and generated by the server based on the tasks it has actually executed. </value>
        [DataMember(Name = "executions", EmitDefaultValue = false)]
        public List<ArrayTask> Executions { get; private set; }

        /// <summary>
        /// Returns false as Executions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExecutions()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskGraphNodeMetadata {\n");
            sb.Append("  ClientNodeUuid: ").Append(ClientNodeUuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DependsOn: ").Append(DependsOn).Append("\n");
            sb.Append("  RunLocation: ").Append(RunLocation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Executions: ").Append(Executions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskGraphNodeMetadata);
        }

        /// <summary>
        /// Returns true if TaskGraphNodeMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskGraphNodeMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskGraphNodeMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientNodeUuid == input.ClientNodeUuid ||
                    (this.ClientNodeUuid != null &&
                    this.ClientNodeUuid.Equals(input.ClientNodeUuid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DependsOn == input.DependsOn ||
                    this.DependsOn != null &&
                    input.DependsOn != null &&
                    this.DependsOn.SequenceEqual(input.DependsOn)
                ) && 
                (
                    this.RunLocation == input.RunLocation ||
                    this.RunLocation.Equals(input.RunLocation)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Executions == input.Executions ||
                    this.Executions != null &&
                    input.Executions != null &&
                    this.Executions.SequenceEqual(input.Executions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientNodeUuid != null)
                {
                    hashCode = (hashCode * 59) + this.ClientNodeUuid.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DependsOn != null)
                {
                    hashCode = (hashCode * 59) + this.DependsOn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RunLocation.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Executions != null)
                {
                    hashCode = (hashCode * 59) + this.Executions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
