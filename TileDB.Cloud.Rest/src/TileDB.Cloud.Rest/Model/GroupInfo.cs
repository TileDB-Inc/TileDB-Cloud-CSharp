/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// metadata of a group
    /// </summary>
    [DataContract]
    public partial class GroupInfo :  IEquatable<GroupInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupInfo" /> class.
        /// </summary>
        /// <param name="id">unique ID of registered group.</param>
        /// <param name="_namespace">namespace group is in.</param>
        /// <param name="name">name of group.</param>
        /// <param name="description">description of group.</param>
        /// <param name="uri">uri of group.</param>
        /// <param name="tiledbUri">uri for access through TileDB cloud.</param>
        /// <param name="assetCount">A count of direct array members.</param>
        /// <param name="groupCount">A count of direct group members.</param>
        /// <param name="size">A count of direct members. This is the sum of asset_count and group_count.</param>
        /// <param name="lastAccessed">Datetime groups was last accessed in UTC.</param>
        /// <param name="allowedActions">list of actions user is allowed to do on this group.</param>
        /// <param name="logo">logo (base64 encoded) for the gruop. Optional.</param>
        /// <param name="accessCredentialsName">the name of the access credentials to use. if unset, the default credentials will be used.</param>
        /// <param name="shareCount">number of unique namespaces this group is shared with.</param>
        /// <param name="publicShare">Suggests if the group was shared to public by owner.</param>
        /// <param name="tags">optional tags for group.</param>
        /// <param name="licenseId">License identifier from SPDX License List or Custom.</param>
        /// <param name="licenseText">License text.</param>
        public GroupInfo(string id = default(string), string _namespace = default(string), string name = default(string), string description = default(string), string uri = default(string), string tiledbUri = default(string), decimal assetCount = default(decimal), decimal groupCount = default(decimal), decimal size = default(decimal), DateTime lastAccessed = default(DateTime), List<GroupActions> allowedActions = default(List<GroupActions>), string logo = default(string), string accessCredentialsName = default(string), decimal shareCount = default(decimal), bool publicShare = default(bool), List<string> tags = default(List<string>), string licenseId = default(string), string licenseText = default(string))
        {
            this.Description = description;
            this.Id = id;
            this.Namespace = _namespace;
            this.Name = name;
            this.Description = description;
            this.Uri = uri;
            this.TiledbUri = tiledbUri;
            this.AssetCount = assetCount;
            this.GroupCount = groupCount;
            this.Size = size;
            this.LastAccessed = lastAccessed;
            this.AllowedActions = allowedActions;
            this.Logo = logo;
            this.AccessCredentialsName = accessCredentialsName;
            this.ShareCount = shareCount;
            this.PublicShare = publicShare;
            this.Tags = tags;
            this.LicenseId = licenseId;
            this.LicenseText = licenseText;
        }

        /// <summary>
        /// unique ID of registered group
        /// </summary>
        /// <value>unique ID of registered group</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// namespace group is in
        /// </summary>
        /// <value>namespace group is in</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// name of group
        /// </summary>
        /// <value>name of group</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// description of group
        /// </summary>
        /// <value>description of group</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// uri of group
        /// </summary>
        /// <value>uri of group</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// uri for access through TileDB cloud
        /// </summary>
        /// <value>uri for access through TileDB cloud</value>
        [DataMember(Name="tiledb_uri", EmitDefaultValue=false)]
        public string TiledbUri { get; set; }

        /// <summary>
        /// A count of direct array members
        /// </summary>
        /// <value>A count of direct array members</value>
        [DataMember(Name="asset_count", EmitDefaultValue=false)]
        public decimal AssetCount { get; set; }

        /// <summary>
        /// A count of direct group members
        /// </summary>
        /// <value>A count of direct group members</value>
        [DataMember(Name="group_count", EmitDefaultValue=false)]
        public decimal GroupCount { get; set; }

        /// <summary>
        /// A count of direct members. This is the sum of asset_count and group_count
        /// </summary>
        /// <value>A count of direct members. This is the sum of asset_count and group_count</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal Size { get; set; }

        /// <summary>
        /// Datetime groups was last accessed in UTC
        /// </summary>
        /// <value>Datetime groups was last accessed in UTC</value>
        [DataMember(Name="last_accessed", EmitDefaultValue=false)]
        public DateTime LastAccessed { get; set; }

        /// <summary>
        /// list of actions user is allowed to do on this group
        /// </summary>
        /// <value>list of actions user is allowed to do on this group</value>
        [DataMember(Name="allowed_actions", EmitDefaultValue=false)]
        public List<GroupActions> AllowedActions { get; set; }

        /// <summary>
        /// logo (base64 encoded) for the gruop. Optional
        /// </summary>
        /// <value>logo (base64 encoded) for the gruop. Optional</value>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public string Logo { get; set; }

        /// <summary>
        /// the name of the access credentials to use. if unset, the default credentials will be used
        /// </summary>
        /// <value>the name of the access credentials to use. if unset, the default credentials will be used</value>
        [DataMember(Name="access_credentials_name", EmitDefaultValue=false)]
        public string AccessCredentialsName { get; set; }

        /// <summary>
        /// number of unique namespaces this group is shared with
        /// </summary>
        /// <value>number of unique namespaces this group is shared with</value>
        [DataMember(Name="share_count", EmitDefaultValue=false)]
        public decimal ShareCount { get; set; }

        /// <summary>
        /// Suggests if the group was shared to public by owner
        /// </summary>
        /// <value>Suggests if the group was shared to public by owner</value>
        [DataMember(Name="public_share", EmitDefaultValue=false)]
        public bool PublicShare { get; set; }

        /// <summary>
        /// optional tags for group
        /// </summary>
        /// <value>optional tags for group</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// License identifier from SPDX License List or Custom
        /// </summary>
        /// <value>License identifier from SPDX License List or Custom</value>
        [DataMember(Name="license_id", EmitDefaultValue=false)]
        public string LicenseId { get; set; }

        /// <summary>
        /// License text
        /// </summary>
        /// <value>License text</value>
        [DataMember(Name="license_text", EmitDefaultValue=false)]
        public string LicenseText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  TiledbUri: ").Append(TiledbUri).Append("\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  LastAccessed: ").Append(LastAccessed).Append("\n");
            sb.Append("  AllowedActions: ").Append(AllowedActions).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  AccessCredentialsName: ").Append(AccessCredentialsName).Append("\n");
            sb.Append("  ShareCount: ").Append(ShareCount).Append("\n");
            sb.Append("  PublicShare: ").Append(PublicShare).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  LicenseText: ").Append(LicenseText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupInfo);
        }

        /// <summary>
        /// Returns true if GroupInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.TiledbUri == input.TiledbUri ||
                    (this.TiledbUri != null &&
                    this.TiledbUri.Equals(input.TiledbUri))
                ) && 
                (
                    this.AssetCount == input.AssetCount ||
                    (this.AssetCount != null &&
                    this.AssetCount.Equals(input.AssetCount))
                ) && 
                (
                    this.GroupCount == input.GroupCount ||
                    (this.GroupCount != null &&
                    this.GroupCount.Equals(input.GroupCount))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.LastAccessed == input.LastAccessed ||
                    (this.LastAccessed != null &&
                    this.LastAccessed.Equals(input.LastAccessed))
                ) && 
                (
                    this.AllowedActions == input.AllowedActions ||
                    this.AllowedActions != null &&
                    input.AllowedActions != null &&
                    this.AllowedActions.SequenceEqual(input.AllowedActions)
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.AccessCredentialsName == input.AccessCredentialsName ||
                    (this.AccessCredentialsName != null &&
                    this.AccessCredentialsName.Equals(input.AccessCredentialsName))
                ) && 
                (
                    this.ShareCount == input.ShareCount ||
                    (this.ShareCount != null &&
                    this.ShareCount.Equals(input.ShareCount))
                ) && 
                (
                    this.PublicShare == input.PublicShare ||
                    (this.PublicShare != null &&
                    this.PublicShare.Equals(input.PublicShare))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.LicenseId == input.LicenseId ||
                    (this.LicenseId != null &&
                    this.LicenseId.Equals(input.LicenseId))
                ) && 
                (
                    this.LicenseText == input.LicenseText ||
                    (this.LicenseText != null &&
                    this.LicenseText.Equals(input.LicenseText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.TiledbUri != null)
                    hashCode = hashCode * 59 + this.TiledbUri.GetHashCode();
                if (this.AssetCount != null)
                    hashCode = hashCode * 59 + this.AssetCount.GetHashCode();
                if (this.GroupCount != null)
                    hashCode = hashCode * 59 + this.GroupCount.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.LastAccessed != null)
                    hashCode = hashCode * 59 + this.LastAccessed.GetHashCode();
                if (this.AllowedActions != null)
                    hashCode = hashCode * 59 + this.AllowedActions.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.AccessCredentialsName != null)
                    hashCode = hashCode * 59 + this.AccessCredentialsName.GetHashCode();
                if (this.ShareCount != null)
                    hashCode = hashCode * 59 + this.ShareCount.GetHashCode();
                if (this.PublicShare != null)
                    hashCode = hashCode * 59 + this.PublicShare.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.LicenseId != null)
                    hashCode = hashCode * 59 + this.LicenseId.GetHashCode();
                if (this.LicenseText != null)
                    hashCode = hashCode * 59 + this.LicenseText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
