/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// A node specifying an SQL query to execute in TileDB Cloud. 
    /// </summary>
    [DataContract]
    public partial class TGSQLNodeData :  IEquatable<TGSQLNodeData>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ResultFormat
        /// </summary>
        [DataMember(Name="result_format", EmitDefaultValue=false)]
        public ResultFormat? ResultFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TGSQLNodeData" /> class.
        /// </summary>
        /// <param name="initCommands">The commands to execute before running the query itself..</param>
        /// <param name="query">The text of the SQL query to execute. Parameters are substituted in for &#x60;?&#x60;s, just as in a regular MariaDB query. .</param>
        /// <param name="parameters">The parameters to substitute in for arguments in the &#x60;query&#x60;. Fixed-length. Arguments must be in JSON format. .</param>
        /// <param name="resultFormat">resultFormat.</param>
        public TGSQLNodeData(List<string> initCommands = default(List<string>), string query = default(string), List<Object> parameters = default(List<Object>), ResultFormat? resultFormat = default(ResultFormat?))
        {
            this.InitCommands = initCommands;
            this.Query = query;
            this.Parameters = parameters;
            this.ResultFormat = resultFormat;
        }

        /// <summary>
        /// The commands to execute before running the query itself.
        /// </summary>
        /// <value>The commands to execute before running the query itself.</value>
        [DataMember(Name="init_commands", EmitDefaultValue=false)]
        public List<string> InitCommands { get; set; }

        /// <summary>
        /// The text of the SQL query to execute. Parameters are substituted in for &#x60;?&#x60;s, just as in a regular MariaDB query. 
        /// </summary>
        /// <value>The text of the SQL query to execute. Parameters are substituted in for &#x60;?&#x60;s, just as in a regular MariaDB query. </value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }

        /// <summary>
        /// The parameters to substitute in for arguments in the &#x60;query&#x60;. Fixed-length. Arguments must be in JSON format. 
        /// </summary>
        /// <value>The parameters to substitute in for arguments in the &#x60;query&#x60;. Fixed-length. Arguments must be in JSON format. </value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public List<Object> Parameters { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TGSQLNodeData {\n");
            sb.Append("  InitCommands: ").Append(InitCommands).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ResultFormat: ").Append(ResultFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TGSQLNodeData);
        }

        /// <summary>
        /// Returns true if TGSQLNodeData instances are equal
        /// </summary>
        /// <param name="input">Instance of TGSQLNodeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TGSQLNodeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InitCommands == input.InitCommands ||
                    this.InitCommands != null &&
                    input.InitCommands != null &&
                    this.InitCommands.SequenceEqual(input.InitCommands)
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.ResultFormat == input.ResultFormat ||
                    (this.ResultFormat != null &&
                    this.ResultFormat.Equals(input.ResultFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InitCommands != null)
                    hashCode = hashCode * 59 + this.InitCommands.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.ResultFormat != null)
                    hashCode = hashCode * 59 + this.ResultFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
