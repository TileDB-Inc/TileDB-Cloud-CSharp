/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Information about a single node within a registered task graph. A single node represents one piece of data or a computational step; either as an input value, a data source, or a computation that acts upon earlier nodes. The structure parallels the existing &#x60;TaskGraphNodeMetadata&#x60;. 
    /// </summary>
    [DataContract]
    public partial class RegisteredTaskGraphNode :  IEquatable<RegisteredTaskGraphNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisteredTaskGraphNode" /> class.
        /// </summary>
        /// <param name="clientNodeId">The client-generated UUID of the given graph node..</param>
        /// <param name="name">A client-specified name for the node. If provided, this must be unique. .</param>
        /// <param name="dependsOn">The client_node_uuid of each node that this node depends upon. Used to define the structure of the graph. .</param>
        /// <param name="arrayNode">arrayNode.</param>
        /// <param name="inputNode">inputNode.</param>
        /// <param name="sqlNode">sqlNode.</param>
        /// <param name="udfNode">udfNode.</param>
        public RegisteredTaskGraphNode(string clientNodeId = default(string), string name = default(string), List<string> dependsOn = default(List<string>), UDFArrayDetails arrayNode = default(UDFArrayDetails), TGInputNodeData inputNode = default(TGInputNodeData), TGSQLNodeData sqlNode = default(TGSQLNodeData), TGUDFNodeData udfNode = default(TGUDFNodeData))
        {
            this.Name = name;
            this.InputNode = inputNode;
            this.SqlNode = sqlNode;
            this.UdfNode = udfNode;
            this.ClientNodeId = clientNodeId;
            this.Name = name;
            this.DependsOn = dependsOn;
            this.ArrayNode = arrayNode;
            this.InputNode = inputNode;
            this.SqlNode = sqlNode;
            this.UdfNode = udfNode;
        }

        /// <summary>
        /// The client-generated UUID of the given graph node.
        /// </summary>
        /// <value>The client-generated UUID of the given graph node.</value>
        [DataMember(Name="client_node_id", EmitDefaultValue=false)]
        public string ClientNodeId { get; set; }

        /// <summary>
        /// A client-specified name for the node. If provided, this must be unique. 
        /// </summary>
        /// <value>A client-specified name for the node. If provided, this must be unique. </value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// The client_node_uuid of each node that this node depends upon. Used to define the structure of the graph. 
        /// </summary>
        /// <value>The client_node_uuid of each node that this node depends upon. Used to define the structure of the graph. </value>
        [DataMember(Name="depends_on", EmitDefaultValue=false)]
        public List<string> DependsOn { get; set; }

        /// <summary>
        /// Gets or Sets ArrayNode
        /// </summary>
        [DataMember(Name="array_node", EmitDefaultValue=false)]
        public UDFArrayDetails ArrayNode { get; set; }

        /// <summary>
        /// Gets or Sets InputNode
        /// </summary>
        [DataMember(Name="input_node", EmitDefaultValue=true)]
        public TGInputNodeData InputNode { get; set; }

        /// <summary>
        /// Gets or Sets SqlNode
        /// </summary>
        [DataMember(Name="sql_node", EmitDefaultValue=true)]
        public TGSQLNodeData SqlNode { get; set; }

        /// <summary>
        /// Gets or Sets UdfNode
        /// </summary>
        [DataMember(Name="udf_node", EmitDefaultValue=true)]
        public TGUDFNodeData UdfNode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisteredTaskGraphNode {\n");
            sb.Append("  ClientNodeId: ").Append(ClientNodeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DependsOn: ").Append(DependsOn).Append("\n");
            sb.Append("  ArrayNode: ").Append(ArrayNode).Append("\n");
            sb.Append("  InputNode: ").Append(InputNode).Append("\n");
            sb.Append("  SqlNode: ").Append(SqlNode).Append("\n");
            sb.Append("  UdfNode: ").Append(UdfNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisteredTaskGraphNode);
        }

        /// <summary>
        /// Returns true if RegisteredTaskGraphNode instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisteredTaskGraphNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisteredTaskGraphNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientNodeId == input.ClientNodeId ||
                    (this.ClientNodeId != null &&
                    this.ClientNodeId.Equals(input.ClientNodeId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DependsOn == input.DependsOn ||
                    this.DependsOn != null &&
                    input.DependsOn != null &&
                    this.DependsOn.SequenceEqual(input.DependsOn)
                ) && 
                (
                    this.ArrayNode == input.ArrayNode ||
                    (this.ArrayNode != null &&
                    this.ArrayNode.Equals(input.ArrayNode))
                ) && 
                (
                    this.InputNode == input.InputNode ||
                    (this.InputNode != null &&
                    this.InputNode.Equals(input.InputNode))
                ) && 
                (
                    this.SqlNode == input.SqlNode ||
                    (this.SqlNode != null &&
                    this.SqlNode.Equals(input.SqlNode))
                ) && 
                (
                    this.UdfNode == input.UdfNode ||
                    (this.UdfNode != null &&
                    this.UdfNode.Equals(input.UdfNode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientNodeId != null)
                    hashCode = hashCode * 59 + this.ClientNodeId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DependsOn != null)
                    hashCode = hashCode * 59 + this.DependsOn.GetHashCode();
                if (this.ArrayNode != null)
                    hashCode = hashCode * 59 + this.ArrayNode.GetHashCode();
                if (this.InputNode != null)
                    hashCode = hashCode * 59 + this.InputNode.GetHashCode();
                if (this.SqlNode != null)
                    hashCode = hashCode * 59 + this.SqlNode.GetHashCode();
                if (this.UdfNode != null)
                    hashCode = hashCode * 59 + this.UdfNode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
