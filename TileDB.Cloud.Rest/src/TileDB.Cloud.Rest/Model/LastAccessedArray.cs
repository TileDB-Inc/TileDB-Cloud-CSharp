/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Information related to last access of an array
    /// </summary>
    [DataContract]
    public partial class LastAccessedArray :  IEquatable<LastAccessedArray>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name="access_type", EmitDefaultValue=false)]
        public ActivityEventType? AccessType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LastAccessedArray" /> class.
        /// </summary>
        /// <param name="arrayId">unique ID of array.</param>
        /// <param name="arrayName">name of the array.</param>
        /// <param name="_namespace">namespace of a user or organization.</param>
        /// <param name="accessedTime">timestamp (epoch milliseconds) array is last accessed.</param>
        /// <param name="accessType">accessType.</param>
        public LastAccessedArray(string arrayId = default(string), string arrayName = default(string), string _namespace = default(string), decimal accessedTime = default(decimal), ActivityEventType? accessType = default(ActivityEventType?))
        {
            this.ArrayId = arrayId;
            this.ArrayName = arrayName;
            this.Namespace = _namespace;
            this.AccessedTime = accessedTime;
            this.AccessType = accessType;
        }

        /// <summary>
        /// unique ID of array
        /// </summary>
        /// <value>unique ID of array</value>
        [DataMember(Name="array_id", EmitDefaultValue=false)]
        public string ArrayId { get; set; }

        /// <summary>
        /// name of the array
        /// </summary>
        /// <value>name of the array</value>
        [DataMember(Name="array_name", EmitDefaultValue=false)]
        public string ArrayName { get; set; }

        /// <summary>
        /// namespace of a user or organization
        /// </summary>
        /// <value>namespace of a user or organization</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// timestamp (epoch milliseconds) array is last accessed
        /// </summary>
        /// <value>timestamp (epoch milliseconds) array is last accessed</value>
        [DataMember(Name="accessed_time", EmitDefaultValue=false)]
        public decimal AccessedTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LastAccessedArray {\n");
            sb.Append("  ArrayId: ").Append(ArrayId).Append("\n");
            sb.Append("  ArrayName: ").Append(ArrayName).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  AccessedTime: ").Append(AccessedTime).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LastAccessedArray);
        }

        /// <summary>
        /// Returns true if LastAccessedArray instances are equal
        /// </summary>
        /// <param name="input">Instance of LastAccessedArray to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LastAccessedArray input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArrayId == input.ArrayId ||
                    (this.ArrayId != null &&
                    this.ArrayId.Equals(input.ArrayId))
                ) && 
                (
                    this.ArrayName == input.ArrayName ||
                    (this.ArrayName != null &&
                    this.ArrayName.Equals(input.ArrayName))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.AccessedTime == input.AccessedTime ||
                    (this.AccessedTime != null &&
                    this.AccessedTime.Equals(input.AccessedTime))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArrayId != null)
                    hashCode = hashCode * 59 + this.ArrayId.GetHashCode();
                if (this.ArrayName != null)
                    hashCode = hashCode * 59 + this.ArrayName.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.AccessedTime != null)
                    hashCode = hashCode * 59 + this.AccessedTime.GetHashCode();
                if (this.AccessType != null)
                    hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
