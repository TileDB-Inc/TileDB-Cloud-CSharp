/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// The structure and metadata of a task graph that can be stored on TileDB Cloud and executed by users who have access to it. 
    /// </summary>
    [DataContract(Name = "RegisteredTaskGraph")]
    public partial class RegisteredTaskGraph : IEquatable<RegisteredTaskGraph>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisteredTaskGraph" /> class.
        /// </summary>
        /// <param name="uuid">A server-assigned unique ID for the UDF, in UUID format..</param>
        /// <param name="_namespace">The namespace that owns this task graph log..</param>
        /// <param name="name">The name of this graph, to appear in URLs. Must be unique per-namespace. .</param>
        /// <param name="readme">Documentation for the task graph, in Markdown format..</param>
        /// <param name="licenseId">SPDX license identifier..</param>
        /// <param name="licenseText">Full text of the license..</param>
        /// <param name="tags">Optional tags to classify the graph..</param>
        /// <param name="nodes">The structure of the graph, in the form of the nodes that make it up. As with &#x60;TaskGraphLog&#x60;, nodes must topologically sorted, so that any node appears after all the nodes it depends on. .</param>
        public RegisteredTaskGraph(string uuid = default(string), string _namespace = default(string), string name = default(string), string readme = default(string), string licenseId = default(string), string licenseText = default(string), List<string> tags = default(List<string>), List<RegisteredTaskGraphNode> nodes = default(List<RegisteredTaskGraphNode>))
        {
            this.Uuid = uuid;
            this.Namespace = _namespace;
            this.Name = name;
            this.Readme = readme;
            this.LicenseId = licenseId;
            this.LicenseText = licenseText;
            this.Tags = tags;
            this.Nodes = nodes;
        }

        /// <summary>
        /// A server-assigned unique ID for the UDF, in UUID format.
        /// </summary>
        /// <value>A server-assigned unique ID for the UDF, in UUID format.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The namespace that owns this task graph log.
        /// </summary>
        /// <value>The namespace that owns this task graph log.</value>
        [DataMember(Name = "namespace", EmitDefaultValue = false)]
        public string Namespace { get; set; }

        /// <summary>
        /// The name of this graph, to appear in URLs. Must be unique per-namespace. 
        /// </summary>
        /// <value>The name of this graph, to appear in URLs. Must be unique per-namespace. </value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Documentation for the task graph, in Markdown format.
        /// </summary>
        /// <value>Documentation for the task graph, in Markdown format.</value>
        [DataMember(Name = "readme", EmitDefaultValue = false)]
        public string Readme { get; set; }

        /// <summary>
        /// SPDX license identifier.
        /// </summary>
        /// <value>SPDX license identifier.</value>
        [DataMember(Name = "license_id", EmitDefaultValue = true)]
        public string LicenseId { get; set; }

        /// <summary>
        /// Full text of the license.
        /// </summary>
        /// <value>Full text of the license.</value>
        [DataMember(Name = "license_text", EmitDefaultValue = true)]
        public string LicenseText { get; set; }

        /// <summary>
        /// Optional tags to classify the graph.
        /// </summary>
        /// <value>Optional tags to classify the graph.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The structure of the graph, in the form of the nodes that make it up. As with &#x60;TaskGraphLog&#x60;, nodes must topologically sorted, so that any node appears after all the nodes it depends on. 
        /// </summary>
        /// <value>The structure of the graph, in the form of the nodes that make it up. As with &#x60;TaskGraphLog&#x60;, nodes must topologically sorted, so that any node appears after all the nodes it depends on. </value>
        [DataMember(Name = "nodes", EmitDefaultValue = false)]
        public List<RegisteredTaskGraphNode> Nodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisteredTaskGraph {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Readme: ").Append(Readme).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  LicenseText: ").Append(LicenseText).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisteredTaskGraph);
        }

        /// <summary>
        /// Returns true if RegisteredTaskGraph instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisteredTaskGraph to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisteredTaskGraph input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Readme == input.Readme ||
                    (this.Readme != null &&
                    this.Readme.Equals(input.Readme))
                ) && 
                (
                    this.LicenseId == input.LicenseId ||
                    (this.LicenseId != null &&
                    this.LicenseId.Equals(input.LicenseId))
                ) && 
                (
                    this.LicenseText == input.LicenseText ||
                    (this.LicenseText != null &&
                    this.LicenseText.Equals(input.LicenseText))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Nodes == input.Nodes ||
                    this.Nodes != null &&
                    input.Nodes != null &&
                    this.Nodes.SequenceEqual(input.Nodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.Namespace != null)
                {
                    hashCode = (hashCode * 59) + this.Namespace.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Readme != null)
                {
                    hashCode = (hashCode * 59) + this.Readme.GetHashCode();
                }
                if (this.LicenseId != null)
                {
                    hashCode = (hashCode * 59) + this.LicenseId.GetHashCode();
                }
                if (this.LicenseText != null)
                {
                    hashCode = (hashCode * 59) + this.LicenseText.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Nodes != null)
                {
                    hashCode = (hashCode * 59) + this.Nodes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
