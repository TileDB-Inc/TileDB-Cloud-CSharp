/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// A api token and its metadata
    /// </summary>
    [DataContract]
    public partial class Token :  IEquatable<Token>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        /// <param name="token">A api token.</param>
        /// <param name="name">Name of token to revoke.</param>
        /// <param name="issuedAt">datetime the token was created.</param>
        /// <param name="expiresAt">datetime the token when token will expire.</param>
        /// <param name="scope">Optional scope to limit token, defaults to all permissions, current supported values are password_reset or * (default to &quot;*&quot;).</param>
        public Token(string token = default(string), string name = default(string), DateTime issuedAt = default(DateTime), DateTime expiresAt = default(DateTime), string scope = "*")
        {
            this._Token = token;
            this.Name = name;
            this.IssuedAt = issuedAt;
            this.ExpiresAt = expiresAt;
            // use default value if no "scope" provided
            if (scope == null)
            {
                this.Scope = "*";
            }
            else
            {
                this.Scope = scope;
            }
        }

        /// <summary>
        /// A api token
        /// </summary>
        /// <value>A api token</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string _Token { get; set; }

        /// <summary>
        /// Name of token to revoke
        /// </summary>
        /// <value>Name of token to revoke</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// datetime the token was created
        /// </summary>
        /// <value>datetime the token was created</value>
        [DataMember(Name="issued_at", EmitDefaultValue=false)]
        public DateTime IssuedAt { get; set; }

        /// <summary>
        /// datetime the token when token will expire
        /// </summary>
        /// <value>datetime the token when token will expire</value>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Optional scope to limit token, defaults to all permissions, current supported values are password_reset or *
        /// </summary>
        /// <value>Optional scope to limit token, defaults to all permissions, current supported values are password_reset or *</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Token {\n");
            sb.Append("  _Token: ").Append(_Token).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IssuedAt: ").Append(IssuedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Token);
        }

        /// <summary>
        /// Returns true if Token instances are equal
        /// </summary>
        /// <param name="input">Instance of Token to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Token input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Token == input._Token ||
                    (this._Token != null &&
                    this._Token.Equals(input._Token))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IssuedAt == input.IssuedAt ||
                    (this.IssuedAt != null &&
                    this.IssuedAt.Equals(input.IssuedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Token != null)
                    hashCode = hashCode * 59 + this._Token.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IssuedAt != null)
                    hashCode = hashCode * 59 + this.IssuedAt.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
