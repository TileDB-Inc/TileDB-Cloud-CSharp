/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Actvity of an Array
    /// </summary>
    [DataContract(Name = "ArrayActivityLog")]
    public partial class ArrayActivityLog : IEquatable<ArrayActivityLog>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActivityEventType? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayActivityLog" /> class.
        /// </summary>
        /// <param name="eventAt">time event took place (RFC3339).</param>
        /// <param name="action">action.</param>
        /// <param name="username">User who performed action.</param>
        /// <param name="bytesSent">Bytes sent to client.</param>
        /// <param name="bytesReceived">Bytes recieved from client.</param>
        /// <param name="arrayTaskId">UUID of associated array task.</param>
        /// <param name="id">ID of the activity.</param>
        /// <param name="queryRanges">ranges for query.</param>
        /// <param name="queryStats">stats for query.</param>
        public ArrayActivityLog(DateTime eventAt = default(DateTime), ActivityEventType? action = default(ActivityEventType?), string username = default(string), int bytesSent = default(int), int bytesReceived = default(int), string arrayTaskId = default(string), string id = default(string), string queryRanges = default(string), string queryStats = default(string))
        {
            this.EventAt = eventAt;
            this.Action = action;
            this.Username = username;
            this.BytesSent = bytesSent;
            this.BytesReceived = bytesReceived;
            this.ArrayTaskId = arrayTaskId;
            this.Id = id;
            this.QueryRanges = queryRanges;
            this.QueryStats = queryStats;
        }

        /// <summary>
        /// time event took place (RFC3339)
        /// </summary>
        /// <value>time event took place (RFC3339)</value>
        [DataMember(Name = "event_at", EmitDefaultValue = false)]
        public DateTime EventAt { get; set; }

        /// <summary>
        /// User who performed action
        /// </summary>
        /// <value>User who performed action</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Bytes sent to client
        /// </summary>
        /// <value>Bytes sent to client</value>
        [DataMember(Name = "bytes_sent", EmitDefaultValue = false)]
        public int BytesSent { get; set; }

        /// <summary>
        /// Bytes recieved from client
        /// </summary>
        /// <value>Bytes recieved from client</value>
        [DataMember(Name = "bytes_received", EmitDefaultValue = false)]
        public int BytesReceived { get; set; }

        /// <summary>
        /// UUID of associated array task
        /// </summary>
        /// <value>UUID of associated array task</value>
        [DataMember(Name = "array_task_id", EmitDefaultValue = false)]
        public string ArrayTaskId { get; set; }

        /// <summary>
        /// ID of the activity
        /// </summary>
        /// <value>ID of the activity</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// ranges for query
        /// </summary>
        /// <value>ranges for query</value>
        [DataMember(Name = "query_ranges", EmitDefaultValue = false)]
        public string QueryRanges { get; set; }

        /// <summary>
        /// stats for query
        /// </summary>
        /// <value>stats for query</value>
        [DataMember(Name = "query_stats", EmitDefaultValue = false)]
        public string QueryStats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArrayActivityLog {\n");
            sb.Append("  EventAt: ").Append(EventAt).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  BytesSent: ").Append(BytesSent).Append("\n");
            sb.Append("  BytesReceived: ").Append(BytesReceived).Append("\n");
            sb.Append("  ArrayTaskId: ").Append(ArrayTaskId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QueryRanges: ").Append(QueryRanges).Append("\n");
            sb.Append("  QueryStats: ").Append(QueryStats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArrayActivityLog);
        }

        /// <summary>
        /// Returns true if ArrayActivityLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ArrayActivityLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArrayActivityLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventAt == input.EventAt ||
                    (this.EventAt != null &&
                    this.EventAt.Equals(input.EventAt))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.BytesSent == input.BytesSent ||
                    this.BytesSent.Equals(input.BytesSent)
                ) && 
                (
                    this.BytesReceived == input.BytesReceived ||
                    this.BytesReceived.Equals(input.BytesReceived)
                ) && 
                (
                    this.ArrayTaskId == input.ArrayTaskId ||
                    (this.ArrayTaskId != null &&
                    this.ArrayTaskId.Equals(input.ArrayTaskId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.QueryRanges == input.QueryRanges ||
                    (this.QueryRanges != null &&
                    this.QueryRanges.Equals(input.QueryRanges))
                ) && 
                (
                    this.QueryStats == input.QueryStats ||
                    (this.QueryStats != null &&
                    this.QueryStats.Equals(input.QueryStats))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventAt != null)
                {
                    hashCode = (hashCode * 59) + this.EventAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BytesSent.GetHashCode();
                hashCode = (hashCode * 59) + this.BytesReceived.GetHashCode();
                if (this.ArrayTaskId != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayTaskId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.QueryRanges != null)
                {
                    hashCode = (hashCode * 59) + this.QueryRanges.GetHashCode();
                }
                if (this.QueryStats != null)
                {
                    hashCode = (hashCode * 59) + this.QueryStats.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
