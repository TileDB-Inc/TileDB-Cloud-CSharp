/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Domain of array
    /// </summary>
    [DataContract]
    public partial class Domain :  IEquatable<Domain>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public Datatype Type { get; set; }
        /// <summary>
        /// Gets or Sets TileOrder
        /// </summary>
        [DataMember(Name="tileOrder", EmitDefaultValue=true)]
        public Layout TileOrder { get; set; }
        /// <summary>
        /// Gets or Sets CellOrder
        /// </summary>
        [DataMember(Name="cellOrder", EmitDefaultValue=true)]
        public Layout CellOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Domain() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="tileOrder">tileOrder (required).</param>
        /// <param name="cellOrder">cellOrder (required).</param>
        /// <param name="dimensions">Array of dimensions (required).</param>
        public Domain(Datatype type = default(Datatype), Layout tileOrder = default(Layout), Layout cellOrder = default(Layout), List<Dimension> dimensions = default(List<Dimension>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Domain and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "tileOrder" is required (not null)
            if (tileOrder == null)
            {
                throw new InvalidDataException("tileOrder is a required property for Domain and cannot be null");
            }
            else
            {
                this.TileOrder = tileOrder;
            }

            // to ensure "cellOrder" is required (not null)
            if (cellOrder == null)
            {
                throw new InvalidDataException("cellOrder is a required property for Domain and cannot be null");
            }
            else
            {
                this.CellOrder = cellOrder;
            }

            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new InvalidDataException("dimensions is a required property for Domain and cannot be null");
            }
            else
            {
                this.Dimensions = dimensions;
            }

        }




        /// <summary>
        /// Array of dimensions
        /// </summary>
        /// <value>Array of dimensions</value>
        [DataMember(Name="dimensions", EmitDefaultValue=true)]
        public List<Dimension> Dimensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Domain {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TileOrder: ").Append(TileOrder).Append("\n");
            sb.Append("  CellOrder: ").Append(CellOrder).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Domain);
        }

        /// <summary>
        /// Returns true if Domain instances are equal
        /// </summary>
        /// <param name="input">Instance of Domain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Domain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TileOrder == input.TileOrder ||
                    (this.TileOrder != null &&
                    this.TileOrder.Equals(input.TileOrder))
                ) && 
                (
                    this.CellOrder == input.CellOrder ||
                    (this.CellOrder != null &&
                    this.CellOrder.Equals(input.CellOrder))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    input.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TileOrder != null)
                    hashCode = hashCode * 59 + this.TileOrder.GetHashCode();
                if (this.CellOrder != null)
                    hashCode = hashCode * 59 + this.CellOrder.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
