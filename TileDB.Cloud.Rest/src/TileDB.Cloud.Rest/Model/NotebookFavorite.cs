/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// A user-favorite notebook item
    /// </summary>
    [DataContract]
    public partial class NotebookFavorite :  IEquatable<NotebookFavorite>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotebookFavorite" /> class.
        /// </summary>
        /// <param name="id">unique uuid of the favorite.</param>
        /// <param name="createdAt">Datetime the favorite was created in UTC.</param>
        /// <param name="notebookUuid">unique uuid of the notebook.</param>
        public NotebookFavorite(string id = default(string), DateTime createdAt = default(DateTime), string notebookUuid = default(string))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.NotebookUuid = notebookUuid;
        }

        /// <summary>
        /// unique uuid of the favorite
        /// </summary>
        /// <value>unique uuid of the favorite</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Datetime the favorite was created in UTC
        /// </summary>
        /// <value>Datetime the favorite was created in UTC</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// unique uuid of the notebook
        /// </summary>
        /// <value>unique uuid of the notebook</value>
        [DataMember(Name="notebook_uuid", EmitDefaultValue=false)]
        public string NotebookUuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotebookFavorite {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  NotebookUuid: ").Append(NotebookUuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotebookFavorite);
        }

        /// <summary>
        /// Returns true if NotebookFavorite instances are equal
        /// </summary>
        /// <param name="input">Instance of NotebookFavorite to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotebookFavorite input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.NotebookUuid == input.NotebookUuid ||
                    (this.NotebookUuid != null &&
                    this.NotebookUuid.Equals(input.NotebookUuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.NotebookUuid != null)
                    hashCode = hashCode * 59 + this.NotebookUuid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
