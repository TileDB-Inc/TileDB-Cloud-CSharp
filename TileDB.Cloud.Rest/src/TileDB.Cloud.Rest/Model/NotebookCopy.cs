/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Output information required to copy a notebook
    /// </summary>
    [DataContract]
    public partial class NotebookCopy :  IEquatable<NotebookCopy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotebookCopy" /> class.
        /// </summary>
        /// <param name="outputUri">output location of the TileDB File.</param>
        /// <param name="name">name to set for registered notebook.</param>
        /// <param name="_namespace">namespace to copy to.</param>
        public NotebookCopy(string outputUri = default(string), string name = default(string), string _namespace = default(string))
        {
            this.OutputUri = outputUri;
            this.Name = name;
            this.Namespace = _namespace;
        }

        /// <summary>
        /// output location of the TileDB File
        /// </summary>
        /// <value>output location of the TileDB File</value>
        [DataMember(Name="output_uri", EmitDefaultValue=false)]
        public string OutputUri { get; set; }

        /// <summary>
        /// name to set for registered notebook
        /// </summary>
        /// <value>name to set for registered notebook</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// namespace to copy to
        /// </summary>
        /// <value>namespace to copy to</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotebookCopy {\n");
            sb.Append("  OutputUri: ").Append(OutputUri).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotebookCopy);
        }

        /// <summary>
        /// Returns true if NotebookCopy instances are equal
        /// </summary>
        /// <param name="input">Instance of NotebookCopy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotebookCopy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutputUri == input.OutputUri ||
                    (this.OutputUri != null &&
                    this.OutputUri.Equals(input.OutputUri))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutputUri != null)
                    hashCode = hashCode * 59 + this.OutputUri.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
