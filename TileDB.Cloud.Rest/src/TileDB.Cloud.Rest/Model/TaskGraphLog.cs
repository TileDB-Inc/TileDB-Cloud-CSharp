/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Logging information about the execution of a task graph.
    /// </summary>
    [DataContract]
    public partial class TaskGraphLog :  IEquatable<TaskGraphLog>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public TaskGraphLogStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGraphLog" /> class.
        /// </summary>
        /// <param name="_namespace">The namespace that owns this task graph log. When creating a task graph log, this is used as the namespace to create the log in; thereafter it is read-only. .</param>
        /// <param name="name">A name for this task graph log, displayed in the UI. Does not need to be unique. .</param>
        /// <param name="status">status.</param>
        /// <param name="totalCost">If present, the total cost of executing all nodes in this task graph. .</param>
        /// <param name="accessCost">If present, the total cost of access from execution of the nodes in this task graph. .</param>
        /// <param name="egressCost">If present, the total cost of access from execution of the nodes in this task graph. .</param>
        /// <param name="executionTime">The total execution time of all the nodes in this graph, in ISO 8601 format with hours, minutes, and seconds. .</param>
        /// <param name="statusCount">A mapping from &#x60;ArrayTaskStatus&#x60; string value to the number of nodes in this graph that are in that status. .</param>
        /// <param name="nodes">The structure of the graph. This is provided by the client when first setting up the task graph. Thereafter, it is read-only. This must be topographically sorted; that is, each node must appear after all nodes that it depends upon. .</param>
        public TaskGraphLog(string _namespace = default(string), string name = default(string), TaskGraphLogStatus? status = default(TaskGraphLogStatus?), decimal? totalCost = default(decimal?), decimal? accessCost = default(decimal?), decimal? egressCost = default(decimal?), string executionTime = default(string), Dictionary<string, decimal> statusCount = default(Dictionary<string, decimal>), List<TaskGraphNodeMetadata> nodes = default(List<TaskGraphNodeMetadata>))
        {
            this.TotalCost = totalCost;
            this.AccessCost = accessCost;
            this.EgressCost = egressCost;
            this.Namespace = _namespace;
            this.Name = name;
            this.Status = status;
            this.TotalCost = totalCost;
            this.AccessCost = accessCost;
            this.EgressCost = egressCost;
            this.ExecutionTime = executionTime;
            this.StatusCount = statusCount;
            this.Nodes = nodes;
        }

        /// <summary>
        /// The server-generated UUID of the task graph.
        /// </summary>
        /// <value>The server-generated UUID of the task graph.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// The namespace that owns this task graph log. When creating a task graph log, this is used as the namespace to create the log in; thereafter it is read-only. 
        /// </summary>
        /// <value>The namespace that owns this task graph log. When creating a task graph log, this is used as the namespace to create the log in; thereafter it is read-only. </value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// The name of the user who created this task graph log.
        /// </summary>
        /// <value>The name of the user who created this task graph log.</value>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public string CreatedBy { get; private set; }

        /// <summary>
        /// A name for this task graph log, displayed in the UI. Does not need to be unique. 
        /// </summary>
        /// <value>A name for this task graph log, displayed in the UI. Does not need to be unique. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The date/time when this task graph log was originally created. This is distinct from the execution start_time. 
        /// </summary>
        /// <value>The date/time when this task graph log was originally created. This is distinct from the execution start_time. </value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// The start time of the task graph, recorded when the server starts executing the first node. 
        /// </summary>
        /// <value>The start time of the task graph, recorded when the server starts executing the first node. </value>
        [DataMember(Name="start_time", EmitDefaultValue=true)]
        public DateTime? StartTime { get; private set; }

        /// <summary>
        /// The end time of the task graph, recorded when the client reports completion. 
        /// </summary>
        /// <value>The end time of the task graph, recorded when the client reports completion. </value>
        [DataMember(Name="end_time", EmitDefaultValue=true)]
        public DateTime? EndTime { get; private set; }


        /// <summary>
        /// If present, the total cost of executing all nodes in this task graph. 
        /// </summary>
        /// <value>If present, the total cost of executing all nodes in this task graph. </value>
        [DataMember(Name="total_cost", EmitDefaultValue=true)]
        public decimal? TotalCost { get; set; }

        /// <summary>
        /// If present, the total cost of access from execution of the nodes in this task graph. 
        /// </summary>
        /// <value>If present, the total cost of access from execution of the nodes in this task graph. </value>
        [DataMember(Name="access_cost", EmitDefaultValue=true)]
        public decimal? AccessCost { get; set; }

        /// <summary>
        /// If present, the total cost of access from execution of the nodes in this task graph. 
        /// </summary>
        /// <value>If present, the total cost of access from execution of the nodes in this task graph. </value>
        [DataMember(Name="egress_cost", EmitDefaultValue=true)]
        public decimal? EgressCost { get; set; }

        /// <summary>
        /// The total execution time of all the nodes in this graph, in ISO 8601 format with hours, minutes, and seconds. 
        /// </summary>
        /// <value>The total execution time of all the nodes in this graph, in ISO 8601 format with hours, minutes, and seconds. </value>
        [DataMember(Name="execution_time", EmitDefaultValue=false)]
        public string ExecutionTime { get; set; }

        /// <summary>
        /// A mapping from &#x60;ArrayTaskStatus&#x60; string value to the number of nodes in this graph that are in that status. 
        /// </summary>
        /// <value>A mapping from &#x60;ArrayTaskStatus&#x60; string value to the number of nodes in this graph that are in that status. </value>
        [DataMember(Name="status_count", EmitDefaultValue=false)]
        public Dictionary<string, decimal> StatusCount { get; set; }

        /// <summary>
        /// The structure of the graph. This is provided by the client when first setting up the task graph. Thereafter, it is read-only. This must be topographically sorted; that is, each node must appear after all nodes that it depends upon. 
        /// </summary>
        /// <value>The structure of the graph. This is provided by the client when first setting up the task graph. Thereafter, it is read-only. This must be topographically sorted; that is, each node must appear after all nodes that it depends upon. </value>
        [DataMember(Name="nodes", EmitDefaultValue=false)]
        public List<TaskGraphNodeMetadata> Nodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskGraphLog {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  AccessCost: ").Append(AccessCost).Append("\n");
            sb.Append("  EgressCost: ").Append(EgressCost).Append("\n");
            sb.Append("  ExecutionTime: ").Append(ExecutionTime).Append("\n");
            sb.Append("  StatusCount: ").Append(StatusCount).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskGraphLog);
        }

        /// <summary>
        /// Returns true if TaskGraphLog instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskGraphLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskGraphLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.AccessCost == input.AccessCost ||
                    (this.AccessCost != null &&
                    this.AccessCost.Equals(input.AccessCost))
                ) && 
                (
                    this.EgressCost == input.EgressCost ||
                    (this.EgressCost != null &&
                    this.EgressCost.Equals(input.EgressCost))
                ) && 
                (
                    this.ExecutionTime == input.ExecutionTime ||
                    (this.ExecutionTime != null &&
                    this.ExecutionTime.Equals(input.ExecutionTime))
                ) && 
                (
                    this.StatusCount == input.StatusCount ||
                    this.StatusCount != null &&
                    input.StatusCount != null &&
                    this.StatusCount.SequenceEqual(input.StatusCount)
                ) && 
                (
                    this.Nodes == input.Nodes ||
                    this.Nodes != null &&
                    input.Nodes != null &&
                    this.Nodes.SequenceEqual(input.Nodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.AccessCost != null)
                    hashCode = hashCode * 59 + this.AccessCost.GetHashCode();
                if (this.EgressCost != null)
                    hashCode = hashCode * 59 + this.EgressCost.GetHashCode();
                if (this.ExecutionTime != null)
                    hashCode = hashCode * 59 + this.ExecutionTime.GetHashCode();
                if (this.StatusCount != null)
                    hashCode = hashCode * 59 + this.StatusCount.GetHashCode();
                if (this.Nodes != null)
                    hashCode = hashCode * 59 + this.Nodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
