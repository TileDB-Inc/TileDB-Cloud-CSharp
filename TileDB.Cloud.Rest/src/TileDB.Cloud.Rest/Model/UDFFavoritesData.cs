/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Object including UDF favorites and pagination metadata
    /// </summary>
    [DataContract]
    public partial class UDFFavoritesData :  IEquatable<UDFFavoritesData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UDFFavoritesData" /> class.
        /// </summary>
        /// <param name="udfs">List of UDF infos.</param>
        /// <param name="paginationMetadata">paginationMetadata.</param>
        public UDFFavoritesData(List<ArrayInfo> udfs = default(List<ArrayInfo>), PaginationMetadata paginationMetadata = default(PaginationMetadata))
        {
            this.Udfs = udfs;
            this.PaginationMetadata = paginationMetadata;
        }

        /// <summary>
        /// List of UDF infos
        /// </summary>
        /// <value>List of UDF infos</value>
        [DataMember(Name="udfs", EmitDefaultValue=false)]
        public List<ArrayInfo> Udfs { get; set; }

        /// <summary>
        /// Gets or Sets PaginationMetadata
        /// </summary>
        [DataMember(Name="pagination_metadata", EmitDefaultValue=false)]
        public PaginationMetadata PaginationMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UDFFavoritesData {\n");
            sb.Append("  Udfs: ").Append(Udfs).Append("\n");
            sb.Append("  PaginationMetadata: ").Append(PaginationMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UDFFavoritesData);
        }

        /// <summary>
        /// Returns true if UDFFavoritesData instances are equal
        /// </summary>
        /// <param name="input">Instance of UDFFavoritesData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UDFFavoritesData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Udfs == input.Udfs ||
                    this.Udfs != null &&
                    input.Udfs != null &&
                    this.Udfs.SequenceEqual(input.Udfs)
                ) && 
                (
                    this.PaginationMetadata == input.PaginationMetadata ||
                    (this.PaginationMetadata != null &&
                    this.PaginationMetadata.Equals(input.PaginationMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Udfs != null)
                    hashCode = hashCode * 59 + this.Udfs.GetHashCode();
                if (this.PaginationMetadata != null)
                    hashCode = hashCode * 59 + this.PaginationMetadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
