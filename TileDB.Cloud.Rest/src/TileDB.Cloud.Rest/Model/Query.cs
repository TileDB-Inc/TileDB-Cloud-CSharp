/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Query
    /// </summary>
    [DataContract(Name = "Query")]
    public partial class Query : IEquatable<Query>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public Querytype Type { get; set; }

        /// <summary>
        /// Gets or Sets Layout
        /// </summary>
        [DataMember(Name = "layout", IsRequired = true, EmitDefaultValue = false)]
        public Layout Layout { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public Querystatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Query() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="layout">layout (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="attributeBufferHeaders">List of attribute buffer headers (required).</param>
        /// <param name="writer">writer.</param>
        /// <param name="reader">reader.</param>
        /// <param name="array">array (required).</param>
        /// <param name="totalFixedLengthBufferBytes">Total number of bytes in fixed size attribute buffers. (required).</param>
        /// <param name="totalVarLenBufferBytes">Total number of bytes in variable size attribute buffers. (required).</param>
        public Query(Querytype type = default(Querytype), Layout layout = default(Layout), Querystatus status = default(Querystatus), List<AttributeBufferHeader> attributeBufferHeaders = default(List<AttributeBufferHeader>), Writer writer = default(Writer), QueryReader reader = default(QueryReader), Array array = default(Array), int totalFixedLengthBufferBytes = default(int), int totalVarLenBufferBytes = default(int))
        {
            this.Type = type;
            this.Layout = layout;
            this.Status = status;
            // to ensure "attributeBufferHeaders" is required (not null)
            if (attributeBufferHeaders == null)
            {
                throw new ArgumentNullException("attributeBufferHeaders is a required property for Query and cannot be null");
            }
            this.AttributeBufferHeaders = attributeBufferHeaders;
            // to ensure "array" is required (not null)
            if (array == null)
            {
                throw new ArgumentNullException("array is a required property for Query and cannot be null");
            }
            this.Array = array;
            this.TotalFixedLengthBufferBytes = totalFixedLengthBufferBytes;
            this.TotalVarLenBufferBytes = totalVarLenBufferBytes;
            this.Writer = writer;
            this.Reader = reader;
        }

        /// <summary>
        /// List of attribute buffer headers
        /// </summary>
        /// <value>List of attribute buffer headers</value>
        [DataMember(Name = "attributeBufferHeaders", IsRequired = true, EmitDefaultValue = false)]
        public List<AttributeBufferHeader> AttributeBufferHeaders { get; set; }

        /// <summary>
        /// Gets or Sets Writer
        /// </summary>
        [DataMember(Name = "writer", EmitDefaultValue = false)]
        public Writer Writer { get; set; }

        /// <summary>
        /// Gets or Sets Reader
        /// </summary>
        [DataMember(Name = "reader", EmitDefaultValue = false)]
        public QueryReader Reader { get; set; }

        /// <summary>
        /// Gets or Sets Array
        /// </summary>
        [DataMember(Name = "array", IsRequired = true, EmitDefaultValue = false)]
        public Array Array { get; set; }

        /// <summary>
        /// Total number of bytes in fixed size attribute buffers.
        /// </summary>
        /// <value>Total number of bytes in fixed size attribute buffers.</value>
        [DataMember(Name = "totalFixedLengthBufferBytes", IsRequired = true, EmitDefaultValue = false)]
        public int TotalFixedLengthBufferBytes { get; set; }

        /// <summary>
        /// Total number of bytes in variable size attribute buffers.
        /// </summary>
        /// <value>Total number of bytes in variable size attribute buffers.</value>
        [DataMember(Name = "totalVarLenBufferBytes", IsRequired = true, EmitDefaultValue = false)]
        public int TotalVarLenBufferBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Query {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Layout: ").Append(Layout).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AttributeBufferHeaders: ").Append(AttributeBufferHeaders).Append("\n");
            sb.Append("  Writer: ").Append(Writer).Append("\n");
            sb.Append("  Reader: ").Append(Reader).Append("\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  TotalFixedLengthBufferBytes: ").Append(TotalFixedLengthBufferBytes).Append("\n");
            sb.Append("  TotalVarLenBufferBytes: ").Append(TotalVarLenBufferBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Query);
        }

        /// <summary>
        /// Returns true if Query instances are equal
        /// </summary>
        /// <param name="input">Instance of Query to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Query input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Layout == input.Layout ||
                    this.Layout.Equals(input.Layout)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.AttributeBufferHeaders == input.AttributeBufferHeaders ||
                    this.AttributeBufferHeaders != null &&
                    input.AttributeBufferHeaders != null &&
                    this.AttributeBufferHeaders.SequenceEqual(input.AttributeBufferHeaders)
                ) && 
                (
                    this.Writer == input.Writer ||
                    (this.Writer != null &&
                    this.Writer.Equals(input.Writer))
                ) && 
                (
                    this.Reader == input.Reader ||
                    (this.Reader != null &&
                    this.Reader.Equals(input.Reader))
                ) && 
                (
                    this.Array == input.Array ||
                    (this.Array != null &&
                    this.Array.Equals(input.Array))
                ) && 
                (
                    this.TotalFixedLengthBufferBytes == input.TotalFixedLengthBufferBytes ||
                    this.TotalFixedLengthBufferBytes.Equals(input.TotalFixedLengthBufferBytes)
                ) && 
                (
                    this.TotalVarLenBufferBytes == input.TotalVarLenBufferBytes ||
                    this.TotalVarLenBufferBytes.Equals(input.TotalVarLenBufferBytes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Layout.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.AttributeBufferHeaders != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeBufferHeaders.GetHashCode();
                }
                if (this.Writer != null)
                {
                    hashCode = (hashCode * 59) + this.Writer.GetHashCode();
                }
                if (this.Reader != null)
                {
                    hashCode = (hashCode * 59) + this.Reader.GetHashCode();
                }
                if (this.Array != null)
                {
                    hashCode = (hashCode * 59) + this.Array.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalFixedLengthBufferBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalVarLenBufferBytes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
