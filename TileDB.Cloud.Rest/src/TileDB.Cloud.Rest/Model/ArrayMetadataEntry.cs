/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// key/value pair representing an array metadata map entry
    /// </summary>
    [DataContract]
    public partial class ArrayMetadataEntry :  IEquatable<ArrayMetadataEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayMetadataEntry" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="type">type.</param>
        /// <param name="valueNum">valueNum.</param>
        /// <param name="value">value.</param>
        /// <param name="del">del.</param>
        public ArrayMetadataEntry(string key = default(string), string type = default(string), int valueNum = default(int), List<int> value = default(List<int>), bool del = default(bool))
        {
            this.Key = key;
            this.Type = type;
            this.ValueNum = valueNum;
            this.Value = value;
            this.Del = del;
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ValueNum
        /// </summary>
        [DataMember(Name="valueNum", EmitDefaultValue=false)]
        public int ValueNum { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public List<int> Value { get; set; }

        /// <summary>
        /// Gets or Sets Del
        /// </summary>
        [DataMember(Name="del", EmitDefaultValue=false)]
        public bool Del { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArrayMetadataEntry {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValueNum: ").Append(ValueNum).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Del: ").Append(Del).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArrayMetadataEntry);
        }

        /// <summary>
        /// Returns true if ArrayMetadataEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ArrayMetadataEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArrayMetadataEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ValueNum == input.ValueNum ||
                    (this.ValueNum != null &&
                    this.ValueNum.Equals(input.ValueNum))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                ) && 
                (
                    this.Del == input.Del ||
                    (this.Del != null &&
                    this.Del.Equals(input.Del))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ValueNum != null)
                    hashCode = hashCode * 59 + this.ValueNum.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Del != null)
                    hashCode = hashCode * 59 + this.Del.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
