/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Attribute of array
    /// </summary>
    [DataContract]
    public partial class Attribute :  IEquatable<Attribute>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public Datatype Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Attribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Attribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Attribute" /> class.
        /// </summary>
        /// <param name="name">Attribute name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="filterPipeline">filterPipeline (required).</param>
        /// <param name="cellValNum">Attribute number of values per cell (required).</param>
        /// <param name="nullable">Is attribute nullable.</param>
        /// <param name="fillValue">The default fill value.</param>
        public Attribute(string name = default(string), Datatype type = default(Datatype), FilterPipeline filterPipeline = default(FilterPipeline), int cellValNum = default(int), bool nullable = default(bool), List<int> fillValue = default(List<int>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Attribute and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Attribute and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "filterPipeline" is required (not null)
            if (filterPipeline == null)
            {
                throw new InvalidDataException("filterPipeline is a required property for Attribute and cannot be null");
            }
            else
            {
                this.FilterPipeline = filterPipeline;
            }

            // to ensure "cellValNum" is required (not null)
            if (cellValNum == null)
            {
                throw new InvalidDataException("cellValNum is a required property for Attribute and cannot be null");
            }
            else
            {
                this.CellValNum = cellValNum;
            }

            this.Nullable = nullable;
            this.FillValue = fillValue;
        }

        /// <summary>
        /// Attribute name
        /// </summary>
        /// <value>Attribute name</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets FilterPipeline
        /// </summary>
        [DataMember(Name="filterPipeline", EmitDefaultValue=true)]
        public FilterPipeline FilterPipeline { get; set; }

        /// <summary>
        /// Attribute number of values per cell
        /// </summary>
        /// <value>Attribute number of values per cell</value>
        [DataMember(Name="cellValNum", EmitDefaultValue=true)]
        public int CellValNum { get; set; }

        /// <summary>
        /// Is attribute nullable
        /// </summary>
        /// <value>Is attribute nullable</value>
        [DataMember(Name="nullable", EmitDefaultValue=false)]
        public bool Nullable { get; set; }

        /// <summary>
        /// The default fill value
        /// </summary>
        /// <value>The default fill value</value>
        [DataMember(Name="fillValue", EmitDefaultValue=false)]
        public List<int> FillValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attribute {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FilterPipeline: ").Append(FilterPipeline).Append("\n");
            sb.Append("  CellValNum: ").Append(CellValNum).Append("\n");
            sb.Append("  Nullable: ").Append(Nullable).Append("\n");
            sb.Append("  FillValue: ").Append(FillValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Attribute);
        }

        /// <summary>
        /// Returns true if Attribute instances are equal
        /// </summary>
        /// <param name="input">Instance of Attribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FilterPipeline == input.FilterPipeline ||
                    (this.FilterPipeline != null &&
                    this.FilterPipeline.Equals(input.FilterPipeline))
                ) && 
                (
                    this.CellValNum == input.CellValNum ||
                    (this.CellValNum != null &&
                    this.CellValNum.Equals(input.CellValNum))
                ) && 
                (
                    this.Nullable == input.Nullable ||
                    (this.Nullable != null &&
                    this.Nullable.Equals(input.Nullable))
                ) && 
                (
                    this.FillValue == input.FillValue ||
                    this.FillValue != null &&
                    input.FillValue != null &&
                    this.FillValue.SequenceEqual(input.FillValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FilterPipeline != null)
                    hashCode = hashCode * 59 + this.FilterPipeline.GetHashCode();
                if (this.CellValNum != null)
                    hashCode = hashCode * 59 + this.CellValNum.GetHashCode();
                if (this.Nullable != null)
                    hashCode = hashCode * 59 + this.Nullable.GetHashCode();
                if (this.FillValue != null)
                    hashCode = hashCode * 59 + this.FillValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
