/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TileDB.Cloud.Rest.Client.OpenAPIDateConverter;

namespace TileDB.Cloud.Rest.Model
{
    /// <summary>
    /// Invitations to share or collaborate
    /// </summary>
    [DataContract(Name = "Invitation")]
    public partial class Invitation : IEquatable<Invitation>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets InvitationType
        /// </summary>
        [DataMember(Name = "invitation_type", EmitDefaultValue = false)]
        public InvitationType? InvitationType { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationRole
        /// </summary>
        [DataMember(Name = "organization_role", EmitDefaultValue = false)]
        public OrganizationRoles? OrganizationRole { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public InvitationStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invitation" /> class.
        /// </summary>
        /// <param name="id">Unique ID of invitation added to magic link.</param>
        /// <param name="invitationType">invitationType.</param>
        /// <param name="ownerNamespaceUuid">Namespace of the owner of the invitation (user or organization).</param>
        /// <param name="inviterUuid">Unique ID of the user that sent the invitation.</param>
        /// <param name="userNamespaceUuid">Unique ID of the user accepted the invitation.</param>
        /// <param name="organizationUserUuid">Unique ID of the organization user accepted the invitation.</param>
        /// <param name="organizationName">Name of the organization, does not persist in database.</param>
        /// <param name="organizationRole">organizationRole.</param>
        /// <param name="organizationUuid">Unique ID of the organization whose user(s) accepted the invitation.</param>
        /// <param name="arrayUuid">Unique ID of the array.</param>
        /// <param name="groupUuid">Unique ID of the group.</param>
        /// <param name="arrayName">Name of the array, does not persist in database.</param>
        /// <param name="email">Email of the individual we send the invitation to.</param>
        /// <param name="actions">A comma separated list of ArrayActions or NamespaceActions.</param>
        /// <param name="groupActions">A comma separated list of GroupActions.</param>
        /// <param name="status">status.</param>
        /// <param name="createdAt">Datetime the invitation was created in UTC.</param>
        /// <param name="expiresAt">Datetime the invitation is expected to expire in UTC.</param>
        /// <param name="acceptedAt">Datetime the invitation was accepted in UTC.</param>
        public Invitation(string id = default(string), InvitationType? invitationType = default(InvitationType?), string ownerNamespaceUuid = default(string), string inviterUuid = default(string), string userNamespaceUuid = default(string), string organizationUserUuid = default(string), string organizationName = default(string), OrganizationRoles? organizationRole = default(OrganizationRoles?), string organizationUuid = default(string), string arrayUuid = default(string), string groupUuid = default(string), string arrayName = default(string), string email = default(string), string actions = default(string), string groupActions = default(string), InvitationStatus? status = default(InvitationStatus?), DateTime createdAt = default(DateTime), DateTime expiresAt = default(DateTime), DateTime acceptedAt = default(DateTime))
        {
            this.Id = id;
            this.InvitationType = invitationType;
            this.OwnerNamespaceUuid = ownerNamespaceUuid;
            this.InviterUuid = inviterUuid;
            this.UserNamespaceUuid = userNamespaceUuid;
            this.OrganizationUserUuid = organizationUserUuid;
            this.OrganizationName = organizationName;
            this.OrganizationRole = organizationRole;
            this.OrganizationUuid = organizationUuid;
            this.ArrayUuid = arrayUuid;
            this.GroupUuid = groupUuid;
            this.ArrayName = arrayName;
            this.Email = email;
            this.Actions = actions;
            this.GroupActions = groupActions;
            this.Status = status;
            this.CreatedAt = createdAt;
            this.ExpiresAt = expiresAt;
            this.AcceptedAt = acceptedAt;
        }

        /// <summary>
        /// Unique ID of invitation added to magic link
        /// </summary>
        /// <value>Unique ID of invitation added to magic link</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Namespace of the owner of the invitation (user or organization)
        /// </summary>
        /// <value>Namespace of the owner of the invitation (user or organization)</value>
        [DataMember(Name = "owner_namespace_uuid", EmitDefaultValue = false)]
        public string OwnerNamespaceUuid { get; set; }

        /// <summary>
        /// Unique ID of the user that sent the invitation
        /// </summary>
        /// <value>Unique ID of the user that sent the invitation</value>
        [DataMember(Name = "inviter_uuid", EmitDefaultValue = false)]
        public string InviterUuid { get; set; }

        /// <summary>
        /// Unique ID of the user accepted the invitation
        /// </summary>
        /// <value>Unique ID of the user accepted the invitation</value>
        [DataMember(Name = "user_namespace_uuid", EmitDefaultValue = false)]
        public string UserNamespaceUuid { get; set; }

        /// <summary>
        /// Unique ID of the organization user accepted the invitation
        /// </summary>
        /// <value>Unique ID of the organization user accepted the invitation</value>
        [DataMember(Name = "organization_user_uuid", EmitDefaultValue = false)]
        public string OrganizationUserUuid { get; set; }

        /// <summary>
        /// Name of the organization, does not persist in database
        /// </summary>
        /// <value>Name of the organization, does not persist in database</value>
        [DataMember(Name = "organization_name", EmitDefaultValue = false)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Unique ID of the organization whose user(s) accepted the invitation
        /// </summary>
        /// <value>Unique ID of the organization whose user(s) accepted the invitation</value>
        [DataMember(Name = "organization_uuid", EmitDefaultValue = false)]
        public string OrganizationUuid { get; set; }

        /// <summary>
        /// Unique ID of the array
        /// </summary>
        /// <value>Unique ID of the array</value>
        [DataMember(Name = "array_uuid", EmitDefaultValue = false)]
        public string ArrayUuid { get; set; }

        /// <summary>
        /// Unique ID of the group
        /// </summary>
        /// <value>Unique ID of the group</value>
        [DataMember(Name = "group_uuid", EmitDefaultValue = false)]
        public string GroupUuid { get; set; }

        /// <summary>
        /// Name of the array, does not persist in database
        /// </summary>
        /// <value>Name of the array, does not persist in database</value>
        [DataMember(Name = "array_name", EmitDefaultValue = false)]
        public string ArrayName { get; set; }

        /// <summary>
        /// Email of the individual we send the invitation to
        /// </summary>
        /// <value>Email of the individual we send the invitation to</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// A comma separated list of ArrayActions or NamespaceActions
        /// </summary>
        /// <value>A comma separated list of ArrayActions or NamespaceActions</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public string Actions { get; set; }

        /// <summary>
        /// A comma separated list of GroupActions
        /// </summary>
        /// <value>A comma separated list of GroupActions</value>
        [DataMember(Name = "group_actions", EmitDefaultValue = false)]
        public string GroupActions { get; set; }

        /// <summary>
        /// Datetime the invitation was created in UTC
        /// </summary>
        /// <value>Datetime the invitation was created in UTC</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Datetime the invitation is expected to expire in UTC
        /// </summary>
        /// <value>Datetime the invitation is expected to expire in UTC</value>
        [DataMember(Name = "expires_at", EmitDefaultValue = false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Datetime the invitation was accepted in UTC
        /// </summary>
        /// <value>Datetime the invitation was accepted in UTC</value>
        [DataMember(Name = "accepted_at", EmitDefaultValue = false)]
        public DateTime AcceptedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Invitation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvitationType: ").Append(InvitationType).Append("\n");
            sb.Append("  OwnerNamespaceUuid: ").Append(OwnerNamespaceUuid).Append("\n");
            sb.Append("  InviterUuid: ").Append(InviterUuid).Append("\n");
            sb.Append("  UserNamespaceUuid: ").Append(UserNamespaceUuid).Append("\n");
            sb.Append("  OrganizationUserUuid: ").Append(OrganizationUserUuid).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  OrganizationRole: ").Append(OrganizationRole).Append("\n");
            sb.Append("  OrganizationUuid: ").Append(OrganizationUuid).Append("\n");
            sb.Append("  ArrayUuid: ").Append(ArrayUuid).Append("\n");
            sb.Append("  GroupUuid: ").Append(GroupUuid).Append("\n");
            sb.Append("  ArrayName: ").Append(ArrayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  GroupActions: ").Append(GroupActions).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  AcceptedAt: ").Append(AcceptedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Invitation);
        }

        /// <summary>
        /// Returns true if Invitation instances are equal
        /// </summary>
        /// <param name="input">Instance of Invitation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invitation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InvitationType == input.InvitationType ||
                    this.InvitationType.Equals(input.InvitationType)
                ) && 
                (
                    this.OwnerNamespaceUuid == input.OwnerNamespaceUuid ||
                    (this.OwnerNamespaceUuid != null &&
                    this.OwnerNamespaceUuid.Equals(input.OwnerNamespaceUuid))
                ) && 
                (
                    this.InviterUuid == input.InviterUuid ||
                    (this.InviterUuid != null &&
                    this.InviterUuid.Equals(input.InviterUuid))
                ) && 
                (
                    this.UserNamespaceUuid == input.UserNamespaceUuid ||
                    (this.UserNamespaceUuid != null &&
                    this.UserNamespaceUuid.Equals(input.UserNamespaceUuid))
                ) && 
                (
                    this.OrganizationUserUuid == input.OrganizationUserUuid ||
                    (this.OrganizationUserUuid != null &&
                    this.OrganizationUserUuid.Equals(input.OrganizationUserUuid))
                ) && 
                (
                    this.OrganizationName == input.OrganizationName ||
                    (this.OrganizationName != null &&
                    this.OrganizationName.Equals(input.OrganizationName))
                ) && 
                (
                    this.OrganizationRole == input.OrganizationRole ||
                    this.OrganizationRole.Equals(input.OrganizationRole)
                ) && 
                (
                    this.OrganizationUuid == input.OrganizationUuid ||
                    (this.OrganizationUuid != null &&
                    this.OrganizationUuid.Equals(input.OrganizationUuid))
                ) && 
                (
                    this.ArrayUuid == input.ArrayUuid ||
                    (this.ArrayUuid != null &&
                    this.ArrayUuid.Equals(input.ArrayUuid))
                ) && 
                (
                    this.GroupUuid == input.GroupUuid ||
                    (this.GroupUuid != null &&
                    this.GroupUuid.Equals(input.GroupUuid))
                ) && 
                (
                    this.ArrayName == input.ArrayName ||
                    (this.ArrayName != null &&
                    this.ArrayName.Equals(input.ArrayName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Actions == input.Actions ||
                    (this.Actions != null &&
                    this.Actions.Equals(input.Actions))
                ) && 
                (
                    this.GroupActions == input.GroupActions ||
                    (this.GroupActions != null &&
                    this.GroupActions.Equals(input.GroupActions))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.AcceptedAt == input.AcceptedAt ||
                    (this.AcceptedAt != null &&
                    this.AcceptedAt.Equals(input.AcceptedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InvitationType.GetHashCode();
                if (this.OwnerNamespaceUuid != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerNamespaceUuid.GetHashCode();
                }
                if (this.InviterUuid != null)
                {
                    hashCode = (hashCode * 59) + this.InviterUuid.GetHashCode();
                }
                if (this.UserNamespaceUuid != null)
                {
                    hashCode = (hashCode * 59) + this.UserNamespaceUuid.GetHashCode();
                }
                if (this.OrganizationUserUuid != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationUserUuid.GetHashCode();
                }
                if (this.OrganizationName != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrganizationRole.GetHashCode();
                if (this.OrganizationUuid != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationUuid.GetHashCode();
                }
                if (this.ArrayUuid != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayUuid.GetHashCode();
                }
                if (this.GroupUuid != null)
                {
                    hashCode = (hashCode * 59) + this.GroupUuid.GetHashCode();
                }
                if (this.ArrayName != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                if (this.GroupActions != null)
                {
                    hashCode = (hashCode * 59) + this.GroupActions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.ExpiresAt != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAt.GetHashCode();
                }
                if (this.AcceptedAt != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
