/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArrayApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get array activity logs
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated (optional)</param>
        /// <param name="taskId">Array task id To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that does not contain an array task uuid (optional)</param>
        /// <returns>List&lt;ArrayActivityLog&gt;</returns>
        List<ArrayActivityLog> ArrayActivityLog (string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get array activity logs
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated (optional)</param>
        /// <param name="taskId">Array task id To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that does not contain an array task uuid (optional)</param>
        /// <returns>ApiResponse of List&lt;ArrayActivityLog&gt;</returns>
        ApiResponse<List<ArrayActivityLog>> ArrayActivityLogWithHttpInfo (string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ArrayBrowserData</returns>
        ArrayBrowserData ArraysBrowserOwnedGet (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        ApiResponse<ArrayBrowserData> ArraysBrowserOwnedGetWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ArrayBrowserSidebar</returns>
        ArrayBrowserSidebar ArraysBrowserOwnedSidebarGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        ApiResponse<ArrayBrowserSidebar> ArraysBrowserOwnedSidebarGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ArrayBrowserData</returns>
        ArrayBrowserData ArraysBrowserPublicGet (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        ApiResponse<ArrayBrowserData> ArraysBrowserPublicGetWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ArrayBrowserSidebar</returns>
        ArrayBrowserSidebar ArraysBrowserPublicSidebarGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        ApiResponse<ArrayBrowserSidebar> ArraysBrowserPublicSidebarGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ArrayBrowserData</returns>
        ArrayBrowserData ArraysBrowserSharedGet (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        ApiResponse<ArrayBrowserData> ArraysBrowserSharedGetWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ArrayBrowserSidebar</returns>
        ArrayBrowserSidebar ArraysBrowserSharedSidebarGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        ApiResponse<ArrayBrowserSidebar> ArraysBrowserSharedSidebarGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <returns>ArrayEndTimestampData</returns>
        ArrayEndTimestampData ArraysNamespaceArrayEndTimestampsGet (string _namespace, string array, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <returns>ApiResponse of ArrayEndTimestampData</returns>
        ApiResponse<ArrayEndTimestampData> ArraysNamespaceArrayEndTimestampsGetWithHttpInfo (string _namespace, string array, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// consolidate an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <returns></returns>
        void ConsolidateArray (string _namespace, string array, TileDBConfig tiledbConfig);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// consolidate an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConsolidateArrayWithHttpInfo (string _namespace, string array, TileDBConfig tiledbConfig);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a array schema at a specified URI registered to a group/project
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <returns></returns>
        void CreateArray (string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a array schema at a specified URI registered to a group/project
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateArrayWithHttpInfo (string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <returns></returns>
        void DeleteArray (string _namespace, string array, string contentType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteArrayWithHttpInfo (string _namespace, string array, string contentType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// deregister a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns></returns>
        void DeregisterArray (string _namespace, string array);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// deregister a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeregisterArrayWithHttpInfo (string _namespace, string array);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get activity log by id
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">id of the activity</param>
        /// <returns>ArrayActivityLog</returns>
        ArrayActivityLog GetActivityLogById (string _namespace, string array, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get activity log by id
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">id of the activity</param>
        /// <returns>ApiResponse of ArrayActivityLog</returns>
        ApiResponse<ArrayActivityLog> GetActivityLogByIdWithHttpInfo (string _namespace, string array, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get all array metadata user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <returns>List&lt;ArrayInfo&gt;</returns>
        List<ArrayInfo> GetAllArrayMetadata (string publicShare = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get all array metadata user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <returns>ApiResponse of List&lt;ArrayInfo&gt;</returns>
        ApiResponse<List<ArrayInfo>> GetAllArrayMetadataWithHttpInfo (string publicShare = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an ArraySchema using a url encoded uri
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <returns>ArraySchema</returns>
        ArraySchema GetArray (string _namespace, string array, string contentType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an ArraySchema using a url encoded uri
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <returns>ApiResponse of ArraySchema</returns>
        ApiResponse<ArraySchema> GetArrayWithHttpInfo (string _namespace, string array, string contentType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the max buffer sizes of an array for a subarray
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <returns>MaxBufferSizes</returns>
        MaxBufferSizes GetArrayMaxBufferSizes (string _namespace, string array, string subarray, string contentType, string xPayer = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the max buffer sizes of an array for a subarray
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <returns>ApiResponse of MaxBufferSizes</returns>
        ApiResponse<MaxBufferSizes> GetArrayMaxBufferSizesWithHttpInfo (string _namespace, string array, string subarray, string contentType, string xPayer = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <returns>Object</returns>
        Object GetArrayMetaDataJson (string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetArrayMetaDataJsonWithHttpInfo (string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ArrayInfo</returns>
        ArrayInfo GetArrayMetadata (string _namespace, string array);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of ArrayInfo</returns>
        ApiResponse<ArrayInfo> GetArrayMetadataWithHttpInfo (string _namespace, string array);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ArrayMetadata</returns>
        ArrayMetadata GetArrayMetadataCapnp (string _namespace, string array);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of ArrayMetadata</returns>
        ApiResponse<ArrayMetadata> GetArrayMetadataCapnpWithHttpInfo (string _namespace, string array);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the non empty domain of an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <returns>NonEmptyDomain</returns>
        NonEmptyDomain GetArrayNonEmptyDomain (string _namespace, string array, string contentType, string xPayer = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the non empty domain of an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <returns>ApiResponse of NonEmptyDomain</returns>
        ApiResponse<NonEmptyDomain> GetArrayNonEmptyDomainWithHttpInfo (string _namespace, string array, string contentType, string xPayer = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get non-empty domain from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>Object</returns>
        Object GetArrayNonEmptyDomainJson (string _namespace, string array);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get non-empty domain from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetArrayNonEmptyDomainJsonWithHttpInfo (string _namespace, string array);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an sample set of data from the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <returns>ArraySample</returns>
        ArraySample GetArraySampleData (string _namespace, string array, decimal? samples = default(decimal?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an sample set of data from the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <returns>ApiResponse of ArraySample</returns>
        ApiResponse<ArraySample> GetArraySampleDataWithHttpInfo (string _namespace, string array, decimal? samples = default(decimal?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>List&lt;ArraySharing&gt;</returns>
        List<ArraySharing> GetArraySharingPolicies (string _namespace, string array);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of List&lt;ArraySharing&gt;</returns>
        ApiResponse<List<ArraySharing>> GetArraySharingPoliciesWithHttpInfo (string _namespace, string array);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on all arrays in a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <returns>List&lt;ArrayInfo&gt;</returns>
        List<ArrayInfo> GetArraysInNamespace (string _namespace);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on all arrays in a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <returns>ApiResponse of List&lt;ArrayInfo&gt;</returns>
        ApiResponse<List<ArrayInfo>> GetArraysInNamespaceWithHttpInfo (string _namespace);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <returns>int</returns>
        int GetFragmentEndTimestamp (string _namespace, string array, int? endTimestamp = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> GetFragmentEndTimestampWithHttpInfo (string _namespace, string array, int? endTimestamp = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LastAccessedArray&gt;</returns>
        List<LastAccessedArray> GetLastAccessedArrays ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LastAccessedArray&gt;</returns>
        ApiResponse<List<LastAccessedArray>> GetLastAccessedArraysWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// register an array at a specified URI registered to the given namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <returns></returns>
        void RegisterArray (string _namespace, string array, ArrayInfoUpdate arrayMetadata);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// register an array at a specified URI registered to the given namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterArrayWithHttpInfo (string _namespace, string array, ArrayInfoUpdate arrayMetadata);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share an array with a user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all</param>
        /// <returns></returns>
        void ShareArray (string _namespace, string array, ArraySharing arraySharing);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share an array with a user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ShareArrayWithHttpInfo (string _namespace, string array, ArraySharing arraySharing);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <returns></returns>
        void UpdateArrayMetadata (string _namespace, string array, ArrayInfoUpdate arrayMetadata);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateArrayMetadataWithHttpInfo (string _namespace, string array, ArrayInfoUpdate arrayMetadata);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <returns></returns>
        void UpdateArrayMetadataCapnp (string _namespace, string array, ArrayMetadata arrayMetadataEntries);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateArrayMetadataCapnpWithHttpInfo (string _namespace, string array, ArrayMetadata arrayMetadataEntries);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// vacuum an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <returns></returns>
        void VacuumArray (string _namespace, string array, TileDBConfig tiledbConfig);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// vacuum an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VacuumArrayWithHttpInfo (string _namespace, string array, TileDBConfig tiledbConfig);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get array activity logs
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated (optional)</param>
        /// <param name="taskId">Array task id To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that does not contain an array task uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ArrayActivityLog&gt;</returns>
        System.Threading.Tasks.Task<List<ArrayActivityLog>> ArrayActivityLogAsync (string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get array activity logs
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated (optional)</param>
        /// <param name="taskId">Array task id To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that does not contain an array task uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ArrayActivityLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArrayActivityLog>>> ArrayActivityLogWithHttpInfoAsync (string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserData</returns>
        System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserOwnedGetAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserOwnedGetWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserOwnedSidebarGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserOwnedSidebarGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserData</returns>
        System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserPublicGetAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserPublicGetWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserPublicSidebarGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserPublicSidebarGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserData</returns>
        System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserSharedGetAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserSharedGetWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserSharedSidebarGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserSharedSidebarGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayEndTimestampData</returns>
        System.Threading.Tasks.Task<ArrayEndTimestampData> ArraysNamespaceArrayEndTimestampsGetAsync (string _namespace, string array, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayEndTimestampData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayEndTimestampData>> ArraysNamespaceArrayEndTimestampsGetWithHttpInfoAsync (string _namespace, string array, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// consolidate an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConsolidateArrayAsync (string _namespace, string array, TileDBConfig tiledbConfig, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// consolidate an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConsolidateArrayWithHttpInfoAsync (string _namespace, string array, TileDBConfig tiledbConfig, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a array schema at a specified URI registered to a group/project
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateArrayAsync (string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a array schema at a specified URI registered to a group/project
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateArrayWithHttpInfoAsync (string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteArrayAsync (string _namespace, string array, string contentType, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArrayWithHttpInfoAsync (string _namespace, string array, string contentType, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// deregister a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeregisterArrayAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// deregister a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeregisterArrayWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get activity log by id
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">id of the activity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayActivityLog</returns>
        System.Threading.Tasks.Task<ArrayActivityLog> GetActivityLogByIdAsync (string _namespace, string array, string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get activity log by id
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">id of the activity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayActivityLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayActivityLog>> GetActivityLogByIdWithHttpInfoAsync (string _namespace, string array, string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get all array metadata user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ArrayInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ArrayInfo>> GetAllArrayMetadataAsync (string publicShare = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get all array metadata user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ArrayInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArrayInfo>>> GetAllArrayMetadataWithHttpInfoAsync (string publicShare = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an ArraySchema using a url encoded uri
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArraySchema</returns>
        System.Threading.Tasks.Task<ArraySchema> GetArrayAsync (string _namespace, string array, string contentType, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an ArraySchema using a url encoded uri
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArraySchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArraySchema>> GetArrayWithHttpInfoAsync (string _namespace, string array, string contentType, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the max buffer sizes of an array for a subarray
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MaxBufferSizes</returns>
        System.Threading.Tasks.Task<MaxBufferSizes> GetArrayMaxBufferSizesAsync (string _namespace, string array, string subarray, string contentType, string xPayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the max buffer sizes of an array for a subarray
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MaxBufferSizes)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaxBufferSizes>> GetArrayMaxBufferSizesWithHttpInfoAsync (string _namespace, string array, string subarray, string contentType, string xPayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetArrayMetaDataJsonAsync (string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayMetaDataJsonWithHttpInfoAsync (string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayInfo</returns>
        System.Threading.Tasks.Task<ArrayInfo> GetArrayMetadataAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayInfo>> GetArrayMetadataWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayMetadata</returns>
        System.Threading.Tasks.Task<ArrayMetadata> GetArrayMetadataCapnpAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayMetadata>> GetArrayMetadataCapnpWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the non empty domain of an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NonEmptyDomain</returns>
        System.Threading.Tasks.Task<NonEmptyDomain> GetArrayNonEmptyDomainAsync (string _namespace, string array, string contentType, string xPayer = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the non empty domain of an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NonEmptyDomain)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonEmptyDomain>> GetArrayNonEmptyDomainWithHttpInfoAsync (string _namespace, string array, string contentType, string xPayer = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get non-empty domain from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetArrayNonEmptyDomainJsonAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get non-empty domain from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayNonEmptyDomainJsonWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an sample set of data from the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArraySample</returns>
        System.Threading.Tasks.Task<ArraySample> GetArraySampleDataAsync (string _namespace, string array, decimal? samples = default(decimal?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an sample set of data from the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArraySample)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArraySample>> GetArraySampleDataWithHttpInfoAsync (string _namespace, string array, decimal? samples = default(decimal?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ArraySharing&gt;</returns>
        System.Threading.Tasks.Task<List<ArraySharing>> GetArraySharingPoliciesAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ArraySharing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArraySharing>>> GetArraySharingPoliciesWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on all arrays in a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ArrayInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ArrayInfo>> GetArraysInNamespaceAsync (string _namespace, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on all arrays in a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ArrayInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArrayInfo>>> GetArraysInNamespaceWithHttpInfoAsync (string _namespace, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> GetFragmentEndTimestampAsync (string _namespace, string array, int? endTimestamp = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> GetFragmentEndTimestampWithHttpInfoAsync (string _namespace, string array, int? endTimestamp = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LastAccessedArray&gt;</returns>
        System.Threading.Tasks.Task<List<LastAccessedArray>> GetLastAccessedArraysAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LastAccessedArray&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LastAccessedArray>>> GetLastAccessedArraysWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// register an array at a specified URI registered to the given namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterArrayAsync (string _namespace, string array, ArrayInfoUpdate arrayMetadata, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// register an array at a specified URI registered to the given namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterArrayWithHttpInfoAsync (string _namespace, string array, ArrayInfoUpdate arrayMetadata, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share an array with a user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ShareArrayAsync (string _namespace, string array, ArraySharing arraySharing, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share an array with a user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShareArrayWithHttpInfoAsync (string _namespace, string array, ArraySharing arraySharing, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateArrayMetadataAsync (string _namespace, string array, ArrayInfoUpdate arrayMetadata, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateArrayMetadataWithHttpInfoAsync (string _namespace, string array, ArrayInfoUpdate arrayMetadata, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateArrayMetadataCapnpAsync (string _namespace, string array, ArrayMetadata arrayMetadataEntries, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateArrayMetadataCapnpWithHttpInfoAsync (string _namespace, string array, ArrayMetadata arrayMetadataEntries, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// vacuum an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VacuumArrayAsync (string _namespace, string array, TileDBConfig tiledbConfig, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// vacuum an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VacuumArrayWithHttpInfoAsync (string _namespace, string array, TileDBConfig tiledbConfig, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArrayApi : IArrayApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArrayApi(String basePath)
        {
            this.Configuration = new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayApi"/> class
        /// </summary>
        /// <returns></returns>
        public ArrayApi()
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArrayApi(TileDB.Cloud.Rest.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  get array activity logs
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated (optional)</param>
        /// <param name="taskId">Array task id To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that does not contain an array task uuid (optional)</param>
        /// <returns>List&lt;ArrayActivityLog&gt;</returns>
        public List<ArrayActivityLog> ArrayActivityLog (string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?))
        {
             ApiResponse<List<ArrayActivityLog>> localVarResponse = ArrayActivityLogWithHttpInfo(_namespace, array, start, end, eventTypes, taskId, hasTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get array activity logs
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated (optional)</param>
        /// <param name="taskId">Array task id To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that does not contain an array task uuid (optional)</param>
        /// <returns>ApiResponse of List&lt;ArrayActivityLog&gt;</returns>
        public ApiResponse<List<ArrayActivityLog>> ArrayActivityLogWithHttpInfo (string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ArrayActivityLog");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ArrayActivityLog");

            var localVarPath = "/arrays/{namespace}/{array}/activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (eventTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_types", eventTypes)); // query parameter
            if (taskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "task_id", taskId)); // query parameter
            if (hasTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "has_task_id", hasTaskId)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArrayActivityLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArrayActivityLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArrayActivityLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArrayActivityLog>)));
        }

        /// <summary>
        ///  get array activity logs
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated (optional)</param>
        /// <param name="taskId">Array task id To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that does not contain an array task uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ArrayActivityLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArrayActivityLog>> ArrayActivityLogAsync (string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ArrayActivityLog>> localVarResponse = await ArrayActivityLogWithHttpInfoAsync(_namespace, array, start, end, eventTypes, taskId, hasTaskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get array activity logs
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Event values can be one or more of the following read, write, create, delete, register, deregister, comma separated (optional)</param>
        /// <param name="taskId">Array task id To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that does not contain an array task uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ArrayActivityLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArrayActivityLog>>> ArrayActivityLogWithHttpInfoAsync (string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ArrayActivityLog");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ArrayActivityLog");

            var localVarPath = "/arrays/{namespace}/{array}/activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (eventTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_types", eventTypes)); // query parameter
            if (taskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "task_id", taskId)); // query parameter
            if (hasTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "has_task_id", hasTaskId)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArrayActivityLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArrayActivityLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArrayActivityLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArrayActivityLog>)));
        }

        /// <summary>
        ///  Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ArrayBrowserData</returns>
        public ArrayBrowserData ArraysBrowserOwnedGet (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>))
        {
             ApiResponse<ArrayBrowserData> localVarResponse = ArraysBrowserOwnedGetWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        public ApiResponse<ArrayBrowserData> ArraysBrowserOwnedGetWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>))
        {

            var localVarPath = "/arrays/browser/owned";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_type", fileType)); // query parameter
            if (excludeFileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_file_type", excludeFileType)); // query parameter
            if (fileProperty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_property", fileProperty)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserOwnedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserData)));
        }

        /// <summary>
        ///  Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserData</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserOwnedGetAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayBrowserData> localVarResponse = await ArraysBrowserOwnedGetWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserOwnedGetWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/arrays/browser/owned";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_type", fileType)); // query parameter
            if (excludeFileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_file_type", excludeFileType)); // query parameter
            if (fileProperty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_property", fileProperty)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserOwnedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserData)));
        }

        /// <summary>
        ///  Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ArrayBrowserSidebar</returns>
        public ArrayBrowserSidebar ArraysBrowserOwnedSidebarGet ()
        {
             ApiResponse<ArrayBrowserSidebar> localVarResponse = ArraysBrowserOwnedSidebarGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        public ApiResponse<ArrayBrowserSidebar> ArraysBrowserOwnedSidebarGetWithHttpInfo ()
        {

            var localVarPath = "/arrays/browser/owned/sidebar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserOwnedSidebarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserSidebar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserSidebar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserSidebar)));
        }

        /// <summary>
        ///  Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserOwnedSidebarGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayBrowserSidebar> localVarResponse = await ArraysBrowserOwnedSidebarGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserOwnedSidebarGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/arrays/browser/owned/sidebar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserOwnedSidebarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserSidebar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserSidebar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserSidebar)));
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ArrayBrowserData</returns>
        public ArrayBrowserData ArraysBrowserPublicGet (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>))
        {
             ApiResponse<ArrayBrowserData> localVarResponse = ArraysBrowserPublicGetWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        public ApiResponse<ArrayBrowserData> ArraysBrowserPublicGetWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>))
        {

            var localVarPath = "/arrays/browser/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_type", fileType)); // query parameter
            if (excludeFileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_file_type", excludeFileType)); // query parameter
            if (fileProperty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_property", fileProperty)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserPublicGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserData)));
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserData</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserPublicGetAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayBrowserData> localVarResponse = await ArraysBrowserPublicGetWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserPublicGetWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/arrays/browser/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_type", fileType)); // query parameter
            if (excludeFileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_file_type", excludeFileType)); // query parameter
            if (fileProperty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_property", fileProperty)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserPublicGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserData)));
        }

        /// <summary>
        ///  Fetch a sidebar of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ArrayBrowserSidebar</returns>
        public ArrayBrowserSidebar ArraysBrowserPublicSidebarGet ()
        {
             ApiResponse<ArrayBrowserSidebar> localVarResponse = ArraysBrowserPublicSidebarGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a sidebar of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        public ApiResponse<ArrayBrowserSidebar> ArraysBrowserPublicSidebarGetWithHttpInfo ()
        {

            var localVarPath = "/arrays/browser/public/sidebar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserPublicSidebarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserSidebar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserSidebar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserSidebar)));
        }

        /// <summary>
        ///  Fetch a sidebar of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserPublicSidebarGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayBrowserSidebar> localVarResponse = await ArraysBrowserPublicSidebarGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch a sidebar of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserPublicSidebarGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/arrays/browser/public/sidebar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserPublicSidebarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserSidebar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserSidebar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserSidebar)));
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ArrayBrowserData</returns>
        public ArrayBrowserData ArraysBrowserSharedGet (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>))
        {
             ApiResponse<ArrayBrowserData> localVarResponse = ArraysBrowserSharedGetWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        public ApiResponse<ArrayBrowserData> ArraysBrowserSharedGetWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>))
        {

            var localVarPath = "/arrays/browser/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_type", fileType)); // query parameter
            if (excludeFileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_file_type", excludeFileType)); // query parameter
            if (fileProperty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_property", fileProperty)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserSharedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserData)));
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserData</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserSharedGetAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayBrowserData> localVarResponse = await ArraysBrowserSharedGetWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserSharedGetWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/arrays/browser/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_type", fileType)); // query parameter
            if (excludeFileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_file_type", excludeFileType)); // query parameter
            if (fileProperty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_property", fileProperty)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserSharedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserData)));
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ArrayBrowserSidebar</returns>
        public ArrayBrowserSidebar ArraysBrowserSharedSidebarGet ()
        {
             ApiResponse<ArrayBrowserSidebar> localVarResponse = ArraysBrowserSharedSidebarGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        public ApiResponse<ArrayBrowserSidebar> ArraysBrowserSharedSidebarGetWithHttpInfo ()
        {

            var localVarPath = "/arrays/browser/shared/sidebar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserSharedSidebarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserSidebar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserSidebar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserSidebar)));
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserSharedSidebarGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayBrowserSidebar> localVarResponse = await ArraysBrowserSharedSidebarGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserSharedSidebarGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/arrays/browser/shared/sidebar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysBrowserSharedSidebarGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayBrowserSidebar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayBrowserSidebar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayBrowserSidebar)));
        }

        /// <summary>
        ///  retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <returns>ArrayEndTimestampData</returns>
        public ArrayEndTimestampData ArraysNamespaceArrayEndTimestampsGet (string _namespace, string array, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<ArrayEndTimestampData> localVarResponse = ArraysNamespaceArrayEndTimestampsGetWithHttpInfo(_namespace, array, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <returns>ApiResponse of ArrayEndTimestampData</returns>
        public ApiResponse<ArrayEndTimestampData> ArraysNamespaceArrayEndTimestampsGetWithHttpInfo (string _namespace, string array, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ArraysNamespaceArrayEndTimestampsGet");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ArraysNamespaceArrayEndTimestampsGet");

            var localVarPath = "/arrays/{namespace}/{array}/end_timestamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysNamespaceArrayEndTimestampsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayEndTimestampData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayEndTimestampData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayEndTimestampData)));
        }

        /// <summary>
        ///  retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayEndTimestampData</returns>
        public async System.Threading.Tasks.Task<ArrayEndTimestampData> ArraysNamespaceArrayEndTimestampsGetAsync (string _namespace, string array, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayEndTimestampData> localVarResponse = await ArraysNamespaceArrayEndTimestampsGetWithHttpInfoAsync(_namespace, array, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayEndTimestampData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayEndTimestampData>> ArraysNamespaceArrayEndTimestampsGetWithHttpInfoAsync (string _namespace, string array, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ArraysNamespaceArrayEndTimestampsGet");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ArraysNamespaceArrayEndTimestampsGet");

            var localVarPath = "/arrays/{namespace}/{array}/end_timestamps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArraysNamespaceArrayEndTimestampsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayEndTimestampData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayEndTimestampData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayEndTimestampData)));
        }

        /// <summary>
        ///  consolidate an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <returns></returns>
        public void ConsolidateArray (string _namespace, string array, TileDBConfig tiledbConfig)
        {
             ConsolidateArrayWithHttpInfo(_namespace, array, tiledbConfig);
        }

        /// <summary>
        ///  consolidate an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConsolidateArrayWithHttpInfo (string _namespace, string array, TileDBConfig tiledbConfig)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ConsolidateArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ConsolidateArray");
            // verify the required parameter 'tiledbConfig' is set
            if (tiledbConfig == null)
                throw new ApiException(400, "Missing required parameter 'tiledbConfig' when calling ArrayApi->ConsolidateArray");

            var localVarPath = "/arrays/{namespace}/{array}/consolidate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (tiledbConfig != null && tiledbConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tiledbConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tiledbConfig; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConsolidateArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  consolidate an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConsolidateArrayAsync (string _namespace, string array, TileDBConfig tiledbConfig, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ConsolidateArrayWithHttpInfoAsync(_namespace, array, tiledbConfig, cancellationToken);

        }

        /// <summary>
        ///  consolidate an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConsolidateArrayWithHttpInfoAsync (string _namespace, string array, TileDBConfig tiledbConfig, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ConsolidateArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ConsolidateArray");
            // verify the required parameter 'tiledbConfig' is set
            if (tiledbConfig == null)
                throw new ApiException(400, "Missing required parameter 'tiledbConfig' when calling ArrayApi->ConsolidateArray");

            var localVarPath = "/arrays/{namespace}/{array}/consolidate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (tiledbConfig != null && tiledbConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tiledbConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tiledbConfig; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConsolidateArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  create a array schema at a specified URI registered to a group/project
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <returns></returns>
        public void CreateArray (string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string))
        {
             CreateArrayWithHttpInfo(_namespace, array, contentType, arraySchema, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME);
        }

        /// <summary>
        ///  create a array schema at a specified URI registered to a group/project
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateArrayWithHttpInfo (string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->CreateArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->CreateArray");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->CreateArray");
            // verify the required parameter 'arraySchema' is set
            if (arraySchema == null)
                throw new ApiException(400, "Missing required parameter 'arraySchema' when calling ArrayApi->CreateArray");

            var localVarPath = "/arrays/{namespace}/{array}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null) localVarHeaderParams.Add("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", this.Configuration.ApiClient.ParameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME)); // header parameter
            if (arraySchema != null && arraySchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arraySchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arraySchema; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  create a array schema at a specified URI registered to a group/project
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateArrayAsync (string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await CreateArrayWithHttpInfoAsync(_namespace, array, contentType, arraySchema, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, cancellationToken);

        }

        /// <summary>
        ///  create a array schema at a specified URI registered to a group/project
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateArrayWithHttpInfoAsync (string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->CreateArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->CreateArray");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->CreateArray");
            // verify the required parameter 'arraySchema' is set
            if (arraySchema == null)
                throw new ApiException(400, "Missing required parameter 'arraySchema' when calling ArrayApi->CreateArray");

            var localVarPath = "/arrays/{namespace}/{array}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null) localVarHeaderParams.Add("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", this.Configuration.ApiClient.ParameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME)); // header parameter
            if (arraySchema != null && arraySchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arraySchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arraySchema; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  delete a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <returns></returns>
        public void DeleteArray (string _namespace, string array, string contentType)
        {
             DeleteArrayWithHttpInfo(_namespace, array, contentType);
        }

        /// <summary>
        ///  delete a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteArrayWithHttpInfo (string _namespace, string array, string contentType)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->DeleteArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->DeleteArray");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->DeleteArray");

            var localVarPath = "/arrays/{namespace}/{array}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  delete a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteArrayAsync (string _namespace, string array, string contentType, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteArrayWithHttpInfoAsync(_namespace, array, contentType, cancellationToken);

        }

        /// <summary>
        ///  delete a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArrayWithHttpInfoAsync (string _namespace, string array, string contentType, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->DeleteArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->DeleteArray");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->DeleteArray");

            var localVarPath = "/arrays/{namespace}/{array}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  deregister a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns></returns>
        public void DeregisterArray (string _namespace, string array)
        {
             DeregisterArrayWithHttpInfo(_namespace, array);
        }

        /// <summary>
        ///  deregister a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeregisterArrayWithHttpInfo (string _namespace, string array)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->DeregisterArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->DeregisterArray");

            var localVarPath = "/arrays/{namespace}/{array}/deregister";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeregisterArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  deregister a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeregisterArrayAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeregisterArrayWithHttpInfoAsync(_namespace, array, cancellationToken);

        }

        /// <summary>
        ///  deregister a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeregisterArrayWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->DeregisterArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->DeregisterArray");

            var localVarPath = "/arrays/{namespace}/{array}/deregister";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeregisterArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  get activity log by id
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">id of the activity</param>
        /// <returns>ArrayActivityLog</returns>
        public ArrayActivityLog GetActivityLogById (string _namespace, string array, string id)
        {
             ApiResponse<ArrayActivityLog> localVarResponse = GetActivityLogByIdWithHttpInfo(_namespace, array, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get activity log by id
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">id of the activity</param>
        /// <returns>ApiResponse of ArrayActivityLog</returns>
        public ApiResponse<ArrayActivityLog> GetActivityLogByIdWithHttpInfo (string _namespace, string array, string id)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetActivityLogById");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetActivityLogById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArrayApi->GetActivityLogById");

            var localVarPath = "/arrays/{namespace}/{array}/activity/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayActivityLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayActivityLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayActivityLog)));
        }

        /// <summary>
        ///  get activity log by id
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">id of the activity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayActivityLog</returns>
        public async System.Threading.Tasks.Task<ArrayActivityLog> GetActivityLogByIdAsync (string _namespace, string array, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayActivityLog> localVarResponse = await GetActivityLogByIdWithHttpInfoAsync(_namespace, array, id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get activity log by id
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">id of the activity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayActivityLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayActivityLog>> GetActivityLogByIdWithHttpInfoAsync (string _namespace, string array, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetActivityLogById");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetActivityLogById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArrayApi->GetActivityLogById");

            var localVarPath = "/arrays/{namespace}/{array}/activity/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivityLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayActivityLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayActivityLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayActivityLog)));
        }

        /// <summary>
        ///  get all array metadata user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <returns>List&lt;ArrayInfo&gt;</returns>
        public List<ArrayInfo> GetAllArrayMetadata (string publicShare = default(string))
        {
             ApiResponse<List<ArrayInfo>> localVarResponse = GetAllArrayMetadataWithHttpInfo(publicShare);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get all array metadata user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <returns>ApiResponse of List&lt;ArrayInfo&gt;</returns>
        public ApiResponse<List<ArrayInfo>> GetAllArrayMetadataWithHttpInfo (string publicShare = default(string))
        {

            var localVarPath = "/arrays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicShare != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_share", publicShare)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllArrayMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArrayInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArrayInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArrayInfo>)));
        }

        /// <summary>
        ///  get all array metadata user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ArrayInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArrayInfo>> GetAllArrayMetadataAsync (string publicShare = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ArrayInfo>> localVarResponse = await GetAllArrayMetadataWithHttpInfoAsync(publicShare, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get all array metadata user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ArrayInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArrayInfo>>> GetAllArrayMetadataWithHttpInfoAsync (string publicShare = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/arrays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicShare != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_share", publicShare)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllArrayMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArrayInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArrayInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArrayInfo>)));
        }

        /// <summary>
        ///  get an ArraySchema using a url encoded uri
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <returns>ArraySchema</returns>
        public ArraySchema GetArray (string _namespace, string array, string contentType)
        {
             ApiResponse<ArraySchema> localVarResponse = GetArrayWithHttpInfo(_namespace, array, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get an ArraySchema using a url encoded uri
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <returns>ApiResponse of ArraySchema</returns>
        public ApiResponse<ArraySchema> GetArrayWithHttpInfo (string _namespace, string array, string contentType)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArray");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArray");

            var localVarPath = "/arrays/{namespace}/{array}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/capnp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArraySchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArraySchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArraySchema)));
        }

        /// <summary>
        ///  get an ArraySchema using a url encoded uri
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArraySchema</returns>
        public async System.Threading.Tasks.Task<ArraySchema> GetArrayAsync (string _namespace, string array, string contentType, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArraySchema> localVarResponse = await GetArrayWithHttpInfoAsync(_namespace, array, contentType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get an ArraySchema using a url encoded uri
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArraySchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArraySchema>> GetArrayWithHttpInfoAsync (string _namespace, string array, string contentType, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArray");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArray");

            var localVarPath = "/arrays/{namespace}/{array}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/capnp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArraySchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArraySchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArraySchema)));
        }

        /// <summary>
        ///  get the max buffer sizes of an array for a subarray
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <returns>MaxBufferSizes</returns>
        public MaxBufferSizes GetArrayMaxBufferSizes (string _namespace, string array, string subarray, string contentType, string xPayer = default(string))
        {
             ApiResponse<MaxBufferSizes> localVarResponse = GetArrayMaxBufferSizesWithHttpInfo(_namespace, array, subarray, contentType, xPayer);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get the max buffer sizes of an array for a subarray
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <returns>ApiResponse of MaxBufferSizes</returns>
        public ApiResponse<MaxBufferSizes> GetArrayMaxBufferSizesWithHttpInfo (string _namespace, string array, string subarray, string contentType, string xPayer = default(string))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMaxBufferSizes");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMaxBufferSizes");
            // verify the required parameter 'subarray' is set
            if (subarray == null)
                throw new ApiException(400, "Missing required parameter 'subarray' when calling ArrayApi->GetArrayMaxBufferSizes");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArrayMaxBufferSizes");

            var localVarPath = "/arrays/{namespace}/{array}/max_buffer_sizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (subarray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subarray", subarray)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xPayer != null) localVarHeaderParams.Add("X-Payer", this.Configuration.ApiClient.ParameterToString(xPayer)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayMaxBufferSizes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaxBufferSizes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaxBufferSizes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaxBufferSizes)));
        }

        /// <summary>
        ///  get the max buffer sizes of an array for a subarray
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MaxBufferSizes</returns>
        public async System.Threading.Tasks.Task<MaxBufferSizes> GetArrayMaxBufferSizesAsync (string _namespace, string array, string subarray, string contentType, string xPayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MaxBufferSizes> localVarResponse = await GetArrayMaxBufferSizesWithHttpInfoAsync(_namespace, array, subarray, contentType, xPayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get the max buffer sizes of an array for a subarray
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MaxBufferSizes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaxBufferSizes>> GetArrayMaxBufferSizesWithHttpInfoAsync (string _namespace, string array, string subarray, string contentType, string xPayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMaxBufferSizes");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMaxBufferSizes");
            // verify the required parameter 'subarray' is set
            if (subarray == null)
                throw new ApiException(400, "Missing required parameter 'subarray' when calling ArrayApi->GetArrayMaxBufferSizes");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArrayMaxBufferSizes");

            var localVarPath = "/arrays/{namespace}/{array}/max_buffer_sizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (subarray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subarray", subarray)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xPayer != null) localVarHeaderParams.Add("X-Payer", this.Configuration.ApiClient.ParameterToString(xPayer)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayMaxBufferSizes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaxBufferSizes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MaxBufferSizes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaxBufferSizes)));
        }

        /// <summary>
        ///  get metadata from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <returns>Object</returns>
        public Object GetArrayMetaDataJson (string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?))
        {
             ApiResponse<Object> localVarResponse = GetArrayMetaDataJsonWithHttpInfo(_namespace, array, length, endTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetArrayMetaDataJsonWithHttpInfo (string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetaDataJson");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetaDataJson");

            var localVarPath = "/arrays/{namespace}/{array}/metadata_json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (length != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "length", length)); // query parameter
            if (endTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_timestamp", endTimestamp)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayMetaDataJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  get metadata from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetArrayMetaDataJsonAsync (string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetArrayMetaDataJsonWithHttpInfoAsync(_namespace, array, length, endTimestamp, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get metadata from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayMetaDataJsonWithHttpInfoAsync (string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetaDataJson");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetaDataJson");

            var localVarPath = "/arrays/{namespace}/{array}/metadata_json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (length != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "length", length)); // query parameter
            if (endTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_timestamp", endTimestamp)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayMetaDataJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ArrayInfo</returns>
        public ArrayInfo GetArrayMetadata (string _namespace, string array)
        {
             ApiResponse<ArrayInfo> localVarResponse = GetArrayMetadataWithHttpInfo(_namespace, array);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of ArrayInfo</returns>
        public ApiResponse<ArrayInfo> GetArrayMetadataWithHttpInfo (string _namespace, string array)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetadata");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetadata");

            var localVarPath = "/arrays/{namespace}/{array}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayInfo)));
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayInfo</returns>
        public async System.Threading.Tasks.Task<ArrayInfo> GetArrayMetadataAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayInfo> localVarResponse = await GetArrayMetadataWithHttpInfoAsync(_namespace, array, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayInfo>> GetArrayMetadataWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetadata");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetadata");

            var localVarPath = "/arrays/{namespace}/{array}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayInfo)));
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ArrayMetadata</returns>
        public ArrayMetadata GetArrayMetadataCapnp (string _namespace, string array)
        {
             ApiResponse<ArrayMetadata> localVarResponse = GetArrayMetadataCapnpWithHttpInfo(_namespace, array);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of ArrayMetadata</returns>
        public ApiResponse<ArrayMetadata> GetArrayMetadataCapnpWithHttpInfo (string _namespace, string array)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetadataCapnp");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetadataCapnp");

            var localVarPath = "/arrays/{namespace}/{array}/array_metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/capnp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayMetadataCapnp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayMetadata)));
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayMetadata</returns>
        public async System.Threading.Tasks.Task<ArrayMetadata> GetArrayMetadataCapnpAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayMetadata> localVarResponse = await GetArrayMetadataCapnpWithHttpInfoAsync(_namespace, array, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayMetadata>> GetArrayMetadataCapnpWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetadataCapnp");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetadataCapnp");

            var localVarPath = "/arrays/{namespace}/{array}/array_metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/capnp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayMetadataCapnp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayMetadata)));
        }

        /// <summary>
        ///  get the non empty domain of an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <returns>NonEmptyDomain</returns>
        public NonEmptyDomain GetArrayNonEmptyDomain (string _namespace, string array, string contentType, string xPayer = default(string))
        {
             ApiResponse<NonEmptyDomain> localVarResponse = GetArrayNonEmptyDomainWithHttpInfo(_namespace, array, contentType, xPayer);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get the non empty domain of an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <returns>ApiResponse of NonEmptyDomain</returns>
        public ApiResponse<NonEmptyDomain> GetArrayNonEmptyDomainWithHttpInfo (string _namespace, string array, string contentType, string xPayer = default(string))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayNonEmptyDomain");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayNonEmptyDomain");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArrayNonEmptyDomain");

            var localVarPath = "/arrays/{namespace}/{array}/non_empty_domain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xPayer != null) localVarHeaderParams.Add("X-Payer", this.Configuration.ApiClient.ParameterToString(xPayer)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayNonEmptyDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonEmptyDomain>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NonEmptyDomain) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonEmptyDomain)));
        }

        /// <summary>
        ///  get the non empty domain of an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NonEmptyDomain</returns>
        public async System.Threading.Tasks.Task<NonEmptyDomain> GetArrayNonEmptyDomainAsync (string _namespace, string array, string contentType, string xPayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NonEmptyDomain> localVarResponse = await GetArrayNonEmptyDomainWithHttpInfoAsync(_namespace, array, contentType, xPayer, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get the non empty domain of an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NonEmptyDomain)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NonEmptyDomain>> GetArrayNonEmptyDomainWithHttpInfoAsync (string _namespace, string array, string contentType, string xPayer = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayNonEmptyDomain");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayNonEmptyDomain");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArrayNonEmptyDomain");

            var localVarPath = "/arrays/{namespace}/{array}/non_empty_domain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xPayer != null) localVarHeaderParams.Add("X-Payer", this.Configuration.ApiClient.ParameterToString(xPayer)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayNonEmptyDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NonEmptyDomain>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NonEmptyDomain) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NonEmptyDomain)));
        }

        /// <summary>
        ///  get non-empty domain from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>Object</returns>
        public Object GetArrayNonEmptyDomainJson (string _namespace, string array)
        {
             ApiResponse<Object> localVarResponse = GetArrayNonEmptyDomainJsonWithHttpInfo(_namespace, array);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get non-empty domain from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetArrayNonEmptyDomainJsonWithHttpInfo (string _namespace, string array)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayNonEmptyDomainJson");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayNonEmptyDomainJson");

            var localVarPath = "/arrays/{namespace}/{array}/non_empty_domain_json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayNonEmptyDomainJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  get non-empty domain from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetArrayNonEmptyDomainJsonAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetArrayNonEmptyDomainJsonWithHttpInfoAsync(_namespace, array, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get non-empty domain from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayNonEmptyDomainJsonWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayNonEmptyDomainJson");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayNonEmptyDomainJson");

            var localVarPath = "/arrays/{namespace}/{array}/non_empty_domain_json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayNonEmptyDomainJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  get an sample set of data from the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <returns>ArraySample</returns>
        public ArraySample GetArraySampleData (string _namespace, string array, decimal? samples = default(decimal?))
        {
             ApiResponse<ArraySample> localVarResponse = GetArraySampleDataWithHttpInfo(_namespace, array, samples);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get an sample set of data from the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <returns>ApiResponse of ArraySample</returns>
        public ApiResponse<ArraySample> GetArraySampleDataWithHttpInfo (string _namespace, string array, decimal? samples = default(decimal?))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraySampleData");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArraySampleData");

            var localVarPath = "/arrays/{namespace}/{array}/sample";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (samples != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "samples", samples)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArraySampleData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArraySample>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArraySample) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArraySample)));
        }

        /// <summary>
        ///  get an sample set of data from the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArraySample</returns>
        public async System.Threading.Tasks.Task<ArraySample> GetArraySampleDataAsync (string _namespace, string array, decimal? samples = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArraySample> localVarResponse = await GetArraySampleDataWithHttpInfoAsync(_namespace, array, samples, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get an sample set of data from the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArraySample)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArraySample>> GetArraySampleDataWithHttpInfoAsync (string _namespace, string array, decimal? samples = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraySampleData");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArraySampleData");

            var localVarPath = "/arrays/{namespace}/{array}/sample";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (samples != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "samples", samples)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArraySampleData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArraySample>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArraySample) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArraySample)));
        }

        /// <summary>
        ///  Get all sharing details of the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>List&lt;ArraySharing&gt;</returns>
        public List<ArraySharing> GetArraySharingPolicies (string _namespace, string array)
        {
             ApiResponse<List<ArraySharing>> localVarResponse = GetArraySharingPoliciesWithHttpInfo(_namespace, array);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all sharing details of the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of List&lt;ArraySharing&gt;</returns>
        public ApiResponse<List<ArraySharing>> GetArraySharingPoliciesWithHttpInfo (string _namespace, string array)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraySharingPolicies");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArraySharingPolicies");

            var localVarPath = "/arrays/{namespace}/{array}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArraySharingPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArraySharing>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArraySharing>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArraySharing>)));
        }

        /// <summary>
        ///  Get all sharing details of the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ArraySharing&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArraySharing>> GetArraySharingPoliciesAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ArraySharing>> localVarResponse = await GetArraySharingPoliciesWithHttpInfoAsync(_namespace, array, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all sharing details of the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ArraySharing&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArraySharing>>> GetArraySharingPoliciesWithHttpInfoAsync (string _namespace, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraySharingPolicies");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArraySharingPolicies");

            var localVarPath = "/arrays/{namespace}/{array}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArraySharingPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArraySharing>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArraySharing>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArraySharing>)));
        }

        /// <summary>
        ///  get metadata on all arrays in a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <returns>List&lt;ArrayInfo&gt;</returns>
        public List<ArrayInfo> GetArraysInNamespace (string _namespace)
        {
             ApiResponse<List<ArrayInfo>> localVarResponse = GetArraysInNamespaceWithHttpInfo(_namespace);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on all arrays in a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <returns>ApiResponse of List&lt;ArrayInfo&gt;</returns>
        public ApiResponse<List<ArrayInfo>> GetArraysInNamespaceWithHttpInfo (string _namespace)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraysInNamespace");

            var localVarPath = "/arrays/{namespace}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArraysInNamespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArrayInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArrayInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArrayInfo>)));
        }

        /// <summary>
        ///  get metadata on all arrays in a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ArrayInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArrayInfo>> GetArraysInNamespaceAsync (string _namespace, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ArrayInfo>> localVarResponse = await GetArraysInNamespaceWithHttpInfoAsync(_namespace, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get metadata on all arrays in a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ArrayInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArrayInfo>>> GetArraysInNamespaceWithHttpInfoAsync (string _namespace, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraysInNamespace");

            var localVarPath = "/arrays/{namespace}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArraysInNamespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArrayInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArrayInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArrayInfo>)));
        }

        /// <summary>
        ///  Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <returns>int</returns>
        public int GetFragmentEndTimestamp (string _namespace, string array, int? endTimestamp = default(int?))
        {
             ApiResponse<int> localVarResponse = GetFragmentEndTimestampWithHttpInfo(_namespace, array, endTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public ApiResponse<int> GetFragmentEndTimestampWithHttpInfo (string _namespace, string array, int? endTimestamp = default(int?))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetFragmentEndTimestamp");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetFragmentEndTimestamp");

            var localVarPath = "/arrays/{namespace}/{array}/fragment_end_timestamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (endTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_timestamp", endTimestamp)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragmentEndTimestamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        ///  Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> GetFragmentEndTimestampAsync (string _namespace, string array, int? endTimestamp = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<int> localVarResponse = await GetFragmentEndTimestampWithHttpInfoAsync(_namespace, array, endTimestamp, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int>> GetFragmentEndTimestampWithHttpInfoAsync (string _namespace, string array, int? endTimestamp = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetFragmentEndTimestamp");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetFragmentEndTimestamp");

            var localVarPath = "/arrays/{namespace}/{array}/fragment_end_timestamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (endTimestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_timestamp", endTimestamp)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragmentEndTimestamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LastAccessedArray&gt;</returns>
        public List<LastAccessedArray> GetLastAccessedArrays ()
        {
             ApiResponse<List<LastAccessedArray>> localVarResponse = GetLastAccessedArraysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LastAccessedArray&gt;</returns>
        public ApiResponse<List<LastAccessedArray>> GetLastAccessedArraysWithHttpInfo ()
        {

            var localVarPath = "/arrays/last_accessed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastAccessedArrays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LastAccessedArray>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LastAccessedArray>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LastAccessedArray>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;LastAccessedArray&gt;</returns>
        public async System.Threading.Tasks.Task<List<LastAccessedArray>> GetLastAccessedArraysAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<LastAccessedArray>> localVarResponse = await GetLastAccessedArraysWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LastAccessedArray&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LastAccessedArray>>> GetLastAccessedArraysWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/arrays/last_accessed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastAccessedArrays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LastAccessedArray>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LastAccessedArray>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LastAccessedArray>)));
        }

        /// <summary>
        ///  register an array at a specified URI registered to the given namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <returns></returns>
        public void RegisterArray (string _namespace, string array, ArrayInfoUpdate arrayMetadata)
        {
             RegisterArrayWithHttpInfo(_namespace, array, arrayMetadata);
        }

        /// <summary>
        ///  register an array at a specified URI registered to the given namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterArrayWithHttpInfo (string _namespace, string array, ArrayInfoUpdate arrayMetadata)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->RegisterArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->RegisterArray");
            // verify the required parameter 'arrayMetadata' is set
            if (arrayMetadata == null)
                throw new ApiException(400, "Missing required parameter 'arrayMetadata' when calling ArrayApi->RegisterArray");

            var localVarPath = "/arrays/{namespace}/{array}/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (arrayMetadata != null && arrayMetadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arrayMetadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arrayMetadata; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  register an array at a specified URI registered to the given namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterArrayAsync (string _namespace, string array, ArrayInfoUpdate arrayMetadata, CancellationToken cancellationToken = default(CancellationToken))
        {
             await RegisterArrayWithHttpInfoAsync(_namespace, array, arrayMetadata, cancellationToken);

        }

        /// <summary>
        ///  register an array at a specified URI registered to the given namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterArrayWithHttpInfoAsync (string _namespace, string array, ArrayInfoUpdate arrayMetadata, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->RegisterArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->RegisterArray");
            // verify the required parameter 'arrayMetadata' is set
            if (arrayMetadata == null)
                throw new ApiException(400, "Missing required parameter 'arrayMetadata' when calling ArrayApi->RegisterArray");

            var localVarPath = "/arrays/{namespace}/{array}/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (arrayMetadata != null && arrayMetadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arrayMetadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arrayMetadata; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Share an array with a user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all</param>
        /// <returns></returns>
        public void ShareArray (string _namespace, string array, ArraySharing arraySharing)
        {
             ShareArrayWithHttpInfo(_namespace, array, arraySharing);
        }

        /// <summary>
        ///  Share an array with a user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ShareArrayWithHttpInfo (string _namespace, string array, ArraySharing arraySharing)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ShareArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ShareArray");
            // verify the required parameter 'arraySharing' is set
            if (arraySharing == null)
                throw new ApiException(400, "Missing required parameter 'arraySharing' when calling ArrayApi->ShareArray");

            var localVarPath = "/arrays/{namespace}/{array}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (arraySharing != null && arraySharing.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arraySharing); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arraySharing; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Share an array with a user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ShareArrayAsync (string _namespace, string array, ArraySharing arraySharing, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ShareArrayWithHttpInfoAsync(_namespace, array, arraySharing, cancellationToken);

        }

        /// <summary>
        ///  Share an array with a user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShareArrayWithHttpInfoAsync (string _namespace, string array, ArraySharing arraySharing, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ShareArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ShareArray");
            // verify the required parameter 'arraySharing' is set
            if (arraySharing == null)
                throw new ApiException(400, "Missing required parameter 'arraySharing' when calling ArrayApi->ShareArray");

            var localVarPath = "/arrays/{namespace}/{array}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (arraySharing != null && arraySharing.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arraySharing); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arraySharing; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <returns></returns>
        public void UpdateArrayMetadata (string _namespace, string array, ArrayInfoUpdate arrayMetadata)
        {
             UpdateArrayMetadataWithHttpInfo(_namespace, array, arrayMetadata);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateArrayMetadataWithHttpInfo (string _namespace, string array, ArrayInfoUpdate arrayMetadata)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->UpdateArrayMetadata");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->UpdateArrayMetadata");
            // verify the required parameter 'arrayMetadata' is set
            if (arrayMetadata == null)
                throw new ApiException(400, "Missing required parameter 'arrayMetadata' when calling ArrayApi->UpdateArrayMetadata");

            var localVarPath = "/arrays/{namespace}/{array}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (arrayMetadata != null && arrayMetadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arrayMetadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arrayMetadata; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateArrayMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateArrayMetadataAsync (string _namespace, string array, ArrayInfoUpdate arrayMetadata, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateArrayMetadataWithHttpInfoAsync(_namespace, array, arrayMetadata, cancellationToken);

        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateArrayMetadataWithHttpInfoAsync (string _namespace, string array, ArrayInfoUpdate arrayMetadata, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->UpdateArrayMetadata");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->UpdateArrayMetadata");
            // verify the required parameter 'arrayMetadata' is set
            if (arrayMetadata == null)
                throw new ApiException(400, "Missing required parameter 'arrayMetadata' when calling ArrayApi->UpdateArrayMetadata");

            var localVarPath = "/arrays/{namespace}/{array}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (arrayMetadata != null && arrayMetadata.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arrayMetadata); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arrayMetadata; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateArrayMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <returns></returns>
        public void UpdateArrayMetadataCapnp (string _namespace, string array, ArrayMetadata arrayMetadataEntries)
        {
             UpdateArrayMetadataCapnpWithHttpInfo(_namespace, array, arrayMetadataEntries);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateArrayMetadataCapnpWithHttpInfo (string _namespace, string array, ArrayMetadata arrayMetadataEntries)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->UpdateArrayMetadataCapnp");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->UpdateArrayMetadataCapnp");
            // verify the required parameter 'arrayMetadataEntries' is set
            if (arrayMetadataEntries == null)
                throw new ApiException(400, "Missing required parameter 'arrayMetadataEntries' when calling ArrayApi->UpdateArrayMetadataCapnp");

            var localVarPath = "/arrays/{namespace}/{array}/array_metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/capnp"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/capnp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (arrayMetadataEntries != null && arrayMetadataEntries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arrayMetadataEntries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arrayMetadataEntries; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateArrayMetadataCapnp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateArrayMetadataCapnpAsync (string _namespace, string array, ArrayMetadata arrayMetadataEntries, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateArrayMetadataCapnpWithHttpInfoAsync(_namespace, array, arrayMetadataEntries, cancellationToken);

        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateArrayMetadataCapnpWithHttpInfoAsync (string _namespace, string array, ArrayMetadata arrayMetadataEntries, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->UpdateArrayMetadataCapnp");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->UpdateArrayMetadataCapnp");
            // verify the required parameter 'arrayMetadataEntries' is set
            if (arrayMetadataEntries == null)
                throw new ApiException(400, "Missing required parameter 'arrayMetadataEntries' when calling ArrayApi->UpdateArrayMetadataCapnp");

            var localVarPath = "/arrays/{namespace}/{array}/array_metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/capnp"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/capnp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (arrayMetadataEntries != null && arrayMetadataEntries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(arrayMetadataEntries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = arrayMetadataEntries; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateArrayMetadataCapnp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  vacuum an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <returns></returns>
        public void VacuumArray (string _namespace, string array, TileDBConfig tiledbConfig)
        {
             VacuumArrayWithHttpInfo(_namespace, array, tiledbConfig);
        }

        /// <summary>
        ///  vacuum an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VacuumArrayWithHttpInfo (string _namespace, string array, TileDBConfig tiledbConfig)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->VacuumArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->VacuumArray");
            // verify the required parameter 'tiledbConfig' is set
            if (tiledbConfig == null)
                throw new ApiException(400, "Missing required parameter 'tiledbConfig' when calling ArrayApi->VacuumArray");

            var localVarPath = "/arrays/{namespace}/{array}/vacuum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (tiledbConfig != null && tiledbConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tiledbConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tiledbConfig; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VacuumArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  vacuum an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VacuumArrayAsync (string _namespace, string array, TileDBConfig tiledbConfig, CancellationToken cancellationToken = default(CancellationToken))
        {
             await VacuumArrayWithHttpInfoAsync(_namespace, array, tiledbConfig, cancellationToken);

        }

        /// <summary>
        ///  vacuum an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="tiledbConfig">tiledb configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VacuumArrayWithHttpInfoAsync (string _namespace, string array, TileDBConfig tiledbConfig, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->VacuumArray");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling ArrayApi->VacuumArray");
            // verify the required parameter 'tiledbConfig' is set
            if (tiledbConfig == null)
                throw new ApiException(400, "Missing required parameter 'tiledbConfig' when calling ArrayApi->VacuumArray");

            var localVarPath = "/arrays/{namespace}/{array}/vacuum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (tiledbConfig != null && tiledbConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tiledbConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tiledbConfig; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VacuumArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
