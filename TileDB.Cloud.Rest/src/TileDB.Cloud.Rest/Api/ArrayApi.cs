/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArrayApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get array activity logs
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Refer to ActivityEventType for possible values (optional)</param>
        /// <param name="taskId">Array task ID To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that do not contain an array task UUID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArrayActivityLog&gt;</returns>
        List<ArrayActivityLog> ArrayActivityLog(string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get array activity logs
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Refer to ActivityEventType for possible values (optional)</param>
        /// <param name="taskId">Array task ID To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that do not contain an array task UUID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArrayActivityLog&gt;</returns>
        ApiResponse<List<ArrayActivityLog>> ArrayActivityLogWithHttpInfo(string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserData</returns>
        ArrayBrowserData ArraysBrowserOwnedGet(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        ApiResponse<ArrayBrowserData> ArraysBrowserOwnedGetWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserSidebar</returns>
        ArrayBrowserSidebar ArraysBrowserOwnedSidebarGet(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        ApiResponse<ArrayBrowserSidebar> ArraysBrowserOwnedSidebarGetWithHttpInfo(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserData</returns>
        ArrayBrowserData ArraysBrowserPublicGet(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        ApiResponse<ArrayBrowserData> ArraysBrowserPublicGetWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserSidebar</returns>
        ArrayBrowserSidebar ArraysBrowserPublicSidebarGet(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        ApiResponse<ArrayBrowserSidebar> ArraysBrowserPublicSidebarGetWithHttpInfo(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there arrays were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserData</returns>
        ArrayBrowserData ArraysBrowserSharedGet(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there arrays were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        ApiResponse<ArrayBrowserData> ArraysBrowserSharedGetWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserSidebar</returns>
        ArrayBrowserSidebar ArraysBrowserSharedSidebarGet(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        ApiResponse<ArrayBrowserSidebar> ArraysBrowserSharedSidebarGetWithHttpInfo(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayEndTimestampData</returns>
        ArrayEndTimestampData ArraysNamespaceArrayEndTimestampsGet(string _namespace, string array, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayEndTimestampData</returns>
        ApiResponse<ArrayEndTimestampData> ArraysNamespaceArrayEndTimestampsGetWithHttpInfo(string _namespace, string array, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// consolidate an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="consolidateRequest">Consolidate Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ConsolidateArray(string _namespace, string array, ArrayConsolidationRequest consolidateRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// consolidate an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="consolidateRequest">Consolidate Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConsolidateArrayWithHttpInfo(string _namespace, string array, ArrayConsolidationRequest consolidateRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a array schema at a specified URI registered to a group/project
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateArray(string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a array schema at a specified URI registered to a group/project
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateArrayWithHttpInfo(string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteArray(string _namespace, string array, string contentType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteArrayWithHttpInfo(string _namespace, string array, string contentType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// deregister a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeregisterArray(string _namespace, string array, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// deregister a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeregisterArrayWithHttpInfo(string _namespace, string array, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// fetch an array&#39;s fragment info
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="fragmentInfoRequest">ArraySchema being created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FragmentInfo</returns>
        FragmentInfo FragmentInfo(string _namespace, string array, string contentType, FragmentInfoRequest fragmentInfoRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// fetch an array&#39;s fragment info
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="fragmentInfoRequest">ArraySchema being created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FragmentInfo</returns>
        ApiResponse<FragmentInfo> FragmentInfoWithHttpInfo(string _namespace, string array, string contentType, FragmentInfoRequest fragmentInfoRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get activity log by ID
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">ID of the activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayActivityLog</returns>
        ArrayActivityLog GetActivityLogById(string _namespace, string array, string id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get activity log by ID
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">ID of the activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayActivityLog</returns>
        ApiResponse<ArrayActivityLog> GetActivityLogByIdWithHttpInfo(string _namespace, string array, string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get all array metadata user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArrayInfo&gt;</returns>
        List<ArrayInfo> GetAllArrayMetadata(string publicShare = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get all array metadata user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArrayInfo&gt;</returns>
        ApiResponse<List<ArrayInfo>> GetAllArrayMetadataWithHttpInfo(string publicShare = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an ArraySchema using a url encoded uri
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArraySchema</returns>
        ArraySchema GetArray(string _namespace, string array, string contentType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an ArraySchema using a url encoded uri
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArraySchema</returns>
        ApiResponse<ArraySchema> GetArrayWithHttpInfo(string _namespace, string array, string contentType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the max buffer sizes of an array for a subarray
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MaxBufferSizes</returns>
        MaxBufferSizes GetArrayMaxBufferSizes(string _namespace, string array, string subarray, string contentType, string xPayer = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the max buffer sizes of an array for a subarray
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MaxBufferSizes</returns>
        ApiResponse<MaxBufferSizes> GetArrayMaxBufferSizesWithHttpInfo(string _namespace, string array, string subarray, string contentType, string xPayer = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata from the array in JSON format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetArrayMetaDataJson(string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata from the array in JSON format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetArrayMetaDataJsonWithHttpInfo(string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayInfo</returns>
        ArrayInfo GetArrayMetadata(string _namespace, string array, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayInfo</returns>
        ApiResponse<ArrayInfo> GetArrayMetadataWithHttpInfo(string _namespace, string array, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayMetadata</returns>
        ArrayMetadata GetArrayMetadataCapnp(string _namespace, string array, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayMetadata</returns>
        ApiResponse<ArrayMetadata> GetArrayMetadataCapnpWithHttpInfo(string _namespace, string array, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the non empty domain of an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NonEmptyDomain</returns>
        NonEmptyDomain GetArrayNonEmptyDomain(string _namespace, string array, string contentType, string xPayer = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the non empty domain of an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NonEmptyDomain</returns>
        ApiResponse<NonEmptyDomain> GetArrayNonEmptyDomainWithHttpInfo(string _namespace, string array, string contentType, string xPayer = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get non-empty domain from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetArrayNonEmptyDomainJson(string _namespace, string array, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get non-empty domain from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetArrayNonEmptyDomainJsonWithHttpInfo(string _namespace, string array, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an sample set of data from the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArraySample</returns>
        ArraySample GetArraySampleData(string _namespace, string array, decimal? samples = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an sample set of data from the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArraySample</returns>
        ApiResponse<ArraySample> GetArraySampleDataWithHttpInfo(string _namespace, string array, decimal? samples = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArraySharing&gt;</returns>
        List<ArraySharing> GetArraySharingPolicies(string _namespace, string array, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArraySharing&gt;</returns>
        ApiResponse<List<ArraySharing>> GetArraySharingPoliciesWithHttpInfo(string _namespace, string array, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on all arrays in a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArrayInfo&gt;</returns>
        List<ArrayInfo> GetArraysInNamespace(string _namespace, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on all arrays in a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArrayInfo&gt;</returns>
        ApiResponse<List<ArrayInfo>> GetArraysInNamespaceWithHttpInfo(string _namespace, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        int GetFragmentEndTimestamp(string _namespace, string array, int? endTimestamp = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> GetFragmentEndTimestampWithHttpInfo(string _namespace, string array, int? endTimestamp = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LastAccessedArray&gt;</returns>
        List<LastAccessedArray> GetLastAccessedArrays(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LastAccessedArray&gt;</returns>
        ApiResponse<List<LastAccessedArray>> GetLastAccessedArraysWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// register an array at a specified URI registered to the given namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayInfo</returns>
        ArrayInfo RegisterArray(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// register an array at a specified URI registered to the given namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayInfo</returns>
        ApiResponse<ArrayInfo> RegisterArrayWithHttpInfo(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share an array with a user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the array will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ShareArray(string _namespace, string array, ArraySharing arraySharing, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share an array with a user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the array will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ShareArrayWithHttpInfo(string _namespace, string array, ArraySharing arraySharing, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateArrayMetadata(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateArrayMetadataWithHttpInfo(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateArrayMetadataCapnp(string _namespace, string array, ArrayMetadata arrayMetadataEntries, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateArrayMetadataCapnpWithHttpInfo(string _namespace, string array, ArrayMetadata arrayMetadataEntries, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// vacuum an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="vaccumRequest">Vaccum Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void VacuumArray(string _namespace, string array, ArrayVacuumRequest vaccumRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// vacuum an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="vaccumRequest">Vaccum Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VacuumArrayWithHttpInfo(string _namespace, string array, ArrayVacuumRequest vaccumRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArrayApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get array activity logs
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Refer to ActivityEventType for possible values (optional)</param>
        /// <param name="taskId">Array task ID To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that do not contain an array task UUID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArrayActivityLog&gt;</returns>
        System.Threading.Tasks.Task<List<ArrayActivityLog>> ArrayActivityLogAsync(string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get array activity logs
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Refer to ActivityEventType for possible values (optional)</param>
        /// <param name="taskId">Array task ID To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that do not contain an array task UUID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArrayActivityLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArrayActivityLog>>> ArrayActivityLogWithHttpInfoAsync(string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserData</returns>
        System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserOwnedGetAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserOwnedGetWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserOwnedSidebarGetAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserOwnedSidebarGetWithHttpInfoAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserData</returns>
        System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserPublicGetAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserPublicGetWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserPublicSidebarGetAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a sidebar of all arrays that have been shared publically
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserPublicSidebarGetWithHttpInfoAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there arrays were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserData</returns>
        System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserSharedGetAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there arrays were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserData>> ArraysBrowserSharedGetWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserSharedSidebarGetAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all arrays that have been shared with the user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayBrowserSidebar>> ArraysBrowserSharedSidebarGetWithHttpInfoAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayEndTimestampData</returns>
        System.Threading.Tasks.Task<ArrayEndTimestampData> ArraysNamespaceArrayEndTimestampsGetAsync(string _namespace, string array, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayEndTimestampData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayEndTimestampData>> ArraysNamespaceArrayEndTimestampsGetWithHttpInfoAsync(string _namespace, string array, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// consolidate an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="consolidateRequest">Consolidate Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConsolidateArrayAsync(string _namespace, string array, ArrayConsolidationRequest consolidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// consolidate an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="consolidateRequest">Consolidate Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConsolidateArrayWithHttpInfoAsync(string _namespace, string array, ArrayConsolidationRequest consolidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a array schema at a specified URI registered to a group/project
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateArrayAsync(string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a array schema at a specified URI registered to a group/project
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateArrayWithHttpInfoAsync(string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteArrayAsync(string _namespace, string array, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArrayWithHttpInfoAsync(string _namespace, string array, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// deregister a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeregisterArrayAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// deregister a array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeregisterArrayWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// fetch an array&#39;s fragment info
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="fragmentInfoRequest">ArraySchema being created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FragmentInfo</returns>
        System.Threading.Tasks.Task<FragmentInfo> FragmentInfoAsync(string _namespace, string array, string contentType, FragmentInfoRequest fragmentInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// fetch an array&#39;s fragment info
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="fragmentInfoRequest">ArraySchema being created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FragmentInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FragmentInfo>> FragmentInfoWithHttpInfoAsync(string _namespace, string array, string contentType, FragmentInfoRequest fragmentInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get activity log by ID
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">ID of the activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayActivityLog</returns>
        System.Threading.Tasks.Task<ArrayActivityLog> GetActivityLogByIdAsync(string _namespace, string array, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get activity log by ID
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">ID of the activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayActivityLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayActivityLog>> GetActivityLogByIdWithHttpInfoAsync(string _namespace, string array, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get all array metadata user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArrayInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ArrayInfo>> GetAllArrayMetadataAsync(string publicShare = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get all array metadata user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArrayInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArrayInfo>>> GetAllArrayMetadataWithHttpInfoAsync(string publicShare = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an ArraySchema using a url encoded uri
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArraySchema</returns>
        System.Threading.Tasks.Task<ArraySchema> GetArrayAsync(string _namespace, string array, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an ArraySchema using a url encoded uri
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArraySchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArraySchema>> GetArrayWithHttpInfoAsync(string _namespace, string array, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the max buffer sizes of an array for a subarray
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MaxBufferSizes</returns>
        System.Threading.Tasks.Task<MaxBufferSizes> GetArrayMaxBufferSizesAsync(string _namespace, string array, string subarray, string contentType, string xPayer = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the max buffer sizes of an array for a subarray
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MaxBufferSizes)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaxBufferSizes>> GetArrayMaxBufferSizesWithHttpInfoAsync(string _namespace, string array, string subarray, string contentType, string xPayer = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata from the array in JSON format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetArrayMetaDataJsonAsync(string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata from the array in JSON format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayMetaDataJsonWithHttpInfoAsync(string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayInfo</returns>
        System.Threading.Tasks.Task<ArrayInfo> GetArrayMetadataAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayInfo>> GetArrayMetadataWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayMetadata</returns>
        System.Threading.Tasks.Task<ArrayMetadata> GetArrayMetadataCapnpAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayMetadata>> GetArrayMetadataCapnpWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the non empty domain of an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NonEmptyDomain</returns>
        System.Threading.Tasks.Task<NonEmptyDomain> GetArrayNonEmptyDomainAsync(string _namespace, string array, string contentType, string xPayer = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get the non empty domain of an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NonEmptyDomain)</returns>
        System.Threading.Tasks.Task<ApiResponse<NonEmptyDomain>> GetArrayNonEmptyDomainWithHttpInfoAsync(string _namespace, string array, string contentType, string xPayer = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get non-empty domain from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetArrayNonEmptyDomainJsonAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get non-empty domain from the array in json format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayNonEmptyDomainJsonWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an sample set of data from the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArraySample</returns>
        System.Threading.Tasks.Task<ArraySample> GetArraySampleDataAsync(string _namespace, string array, decimal? samples = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get an sample set of data from the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArraySample)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArraySample>> GetArraySampleDataWithHttpInfoAsync(string _namespace, string array, decimal? samples = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArraySharing&gt;</returns>
        System.Threading.Tasks.Task<List<ArraySharing>> GetArraySharingPoliciesAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArraySharing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArraySharing>>> GetArraySharingPoliciesWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on all arrays in a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArrayInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ArrayInfo>> GetArraysInNamespaceAsync(string _namespace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get metadata on all arrays in a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArrayInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArrayInfo>>> GetArraysInNamespaceWithHttpInfoAsync(string _namespace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> GetFragmentEndTimestampAsync(string _namespace, string array, int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> GetFragmentEndTimestampWithHttpInfoAsync(string _namespace, string array, int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LastAccessedArray&gt;</returns>
        System.Threading.Tasks.Task<List<LastAccessedArray>> GetLastAccessedArraysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LastAccessedArray&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LastAccessedArray>>> GetLastAccessedArraysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// register an array at a specified URI registered to the given namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayInfo</returns>
        System.Threading.Tasks.Task<ArrayInfo> RegisterArrayAsync(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// register an array at a specified URI registered to the given namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayInfo>> RegisterArrayWithHttpInfoAsync(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share an array with a user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the array will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ShareArrayAsync(string _namespace, string array, ArraySharing arraySharing, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share an array with a user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the array will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShareArrayWithHttpInfoAsync(string _namespace, string array, ArraySharing arraySharing, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateArrayMetadataAsync(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateArrayMetadataWithHttpInfoAsync(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateArrayMetadataCapnpAsync(string _namespace, string array, ArrayMetadata arrayMetadataEntries, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update metadata on an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateArrayMetadataCapnpWithHttpInfoAsync(string _namespace, string array, ArrayMetadata arrayMetadataEntries, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// vacuum an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="vaccumRequest">Vaccum Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VacuumArrayAsync(string _namespace, string array, ArrayVacuumRequest vaccumRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// vacuum an array at a specified URI
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="vaccumRequest">Vaccum Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VacuumArrayWithHttpInfoAsync(string _namespace, string array, ArrayVacuumRequest vaccumRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArrayApi : IArrayApiSync, IArrayApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArrayApi : IArrayApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArrayApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArrayApi(string basePath)
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArrayApi(TileDB.Cloud.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArrayApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ArrayApi(TileDB.Cloud.Rest.Client.ISynchronousClient client, TileDB.Cloud.Rest.Client.IAsynchronousClient asyncClient, TileDB.Cloud.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  get array activity logs
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Refer to ActivityEventType for possible values (optional)</param>
        /// <param name="taskId">Array task ID To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that do not contain an array task UUID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArrayActivityLog&gt;</returns>
        public List<ArrayActivityLog> ArrayActivityLog(string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayActivityLog>> localVarResponse = ArrayActivityLogWithHttpInfo(_namespace, array, start, end, eventTypes, taskId, hasTaskId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get array activity logs
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Refer to ActivityEventType for possible values (optional)</param>
        /// <param name="taskId">Array task ID To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that do not contain an array task UUID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArrayActivityLog&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayActivityLog>> ArrayActivityLogWithHttpInfo(string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ArrayActivityLog");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ArrayActivityLog");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "event_types", eventTypes));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (hasTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "has_task_id", hasTaskId));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArrayActivityLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArrayActivityLog>>("/arrays/{namespace}/{array}/activity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArrayActivityLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get array activity logs
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Refer to ActivityEventType for possible values (optional)</param>
        /// <param name="taskId">Array task ID To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that do not contain an array task UUID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArrayActivityLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArrayActivityLog>> ArrayActivityLogAsync(string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayActivityLog>> localVarResponse = await ArrayActivityLogWithHttpInfoAsync(_namespace, array, start, end, eventTypes, taskId, hasTaskId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get array activity logs
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="start">Start time of window of fetch logs, unix epoch in seconds (default: seven days ago) (optional)</param>
        /// <param name="end">End time of window of fetch logs, unix epoch in seconds (default: current utc timestamp) (optional)</param>
        /// <param name="eventTypes">Refer to ActivityEventType for possible values (optional)</param>
        /// <param name="taskId">Array task ID To filter activity to (optional)</param>
        /// <param name="hasTaskId">Excludes activity log results that do not contain an array task UUID (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArrayActivityLog&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayActivityLog>>> ArrayActivityLogWithHttpInfoAsync(string _namespace, string array, int? start = default(int?), int? end = default(int?), string eventTypes = default(string), string taskId = default(string), bool? hasTaskId = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ArrayActivityLog");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ArrayActivityLog");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "event_types", eventTypes));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (hasTaskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "has_task_id", hasTaskId));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArrayActivityLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArrayActivityLog>>("/arrays/{namespace}/{array}/activity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArrayActivityLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserData</returns>
        public ArrayBrowserData ArraysBrowserOwnedGet(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> localVarResponse = ArraysBrowserOwnedGetWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> ArraysBrowserOwnedGetWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserOwnedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayBrowserData>("/arrays/browser/owned", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserOwnedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserData</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserOwnedGetAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> localVarResponse = await ArraysBrowserOwnedGetWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData>> ArraysBrowserOwnedGetWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserOwnedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayBrowserData>("/arrays/browser/owned", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserOwnedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserSidebar</returns>
        public ArrayBrowserSidebar ArraysBrowserOwnedSidebarGet(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> localVarResponse = ArraysBrowserOwnedSidebarGetWithHttpInfo(fileType, excludeFileType, fileProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> ArraysBrowserOwnedSidebarGetWithHttpInfo(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserOwnedSidebarGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayBrowserSidebar>("/arrays/browser/owned/sidebar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserOwnedSidebarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserOwnedSidebarGetAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> localVarResponse = await ArraysBrowserOwnedSidebarGetWithHttpInfoAsync(fileType, excludeFileType, fileProperty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a sidebar for arrays that are owned directly by user or user&#39;s organizations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar>> ArraysBrowserOwnedSidebarGetWithHttpInfoAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserOwnedSidebarGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayBrowserSidebar>("/arrays/browser/owned/sidebar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserOwnedSidebarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserData</returns>
        public ArrayBrowserData ArraysBrowserPublicGet(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> localVarResponse = ArraysBrowserPublicGetWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> ArraysBrowserPublicGetWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserPublicGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayBrowserData>("/arrays/browser/public", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserPublicGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserData</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserPublicGetAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> localVarResponse = await ArraysBrowserPublicGetWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData>> ArraysBrowserPublicGetWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserPublicGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayBrowserData>("/arrays/browser/public", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserPublicGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a sidebar of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserSidebar</returns>
        public ArrayBrowserSidebar ArraysBrowserPublicSidebarGet(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> localVarResponse = ArraysBrowserPublicSidebarGetWithHttpInfo(fileType, excludeFileType, fileProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a sidebar of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> ArraysBrowserPublicSidebarGetWithHttpInfo(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserPublicSidebarGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayBrowserSidebar>("/arrays/browser/public/sidebar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserPublicSidebarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a sidebar of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserPublicSidebarGetAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> localVarResponse = await ArraysBrowserPublicSidebarGetWithHttpInfoAsync(fileType, excludeFileType, fileProperty, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a sidebar of all arrays that have been shared publically
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar>> ArraysBrowserPublicSidebarGetWithHttpInfoAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserPublicSidebarGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayBrowserSidebar>("/arrays/browser/public/sidebar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserPublicSidebarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there arrays were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserData</returns>
        public ArrayBrowserData ArraysBrowserSharedGet(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> localVarResponse = ArraysBrowserSharedGetWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty, sharedTo);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there arrays were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> ArraysBrowserSharedGetWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }
            if (sharedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "shared_to", sharedTo));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserSharedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayBrowserData>("/arrays/browser/shared", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserSharedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there arrays were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserData</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserData> ArraysBrowserSharedGetAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData> localVarResponse = await ArraysBrowserSharedGetWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, fileType, excludeFileType, fileProperty, sharedTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there arrays were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserData>> ArraysBrowserSharedGetWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }
            if (sharedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "shared_to", sharedTo));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserSharedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayBrowserData>("/arrays/browser/shared", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserSharedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayBrowserSidebar</returns>
        public ArrayBrowserSidebar ArraysBrowserSharedSidebarGet(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> localVarResponse = ArraysBrowserSharedSidebarGetWithHttpInfo(fileType, excludeFileType, fileProperty, sharedTo);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayBrowserSidebar</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> ArraysBrowserSharedSidebarGetWithHttpInfo(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }
            if (sharedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "shared_to", sharedTo));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserSharedSidebarGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayBrowserSidebar>("/arrays/browser/shared/sidebar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserSharedSidebarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayBrowserSidebar</returns>
        public async System.Threading.Tasks.Task<ArrayBrowserSidebar> ArraysBrowserSharedSidebarGetAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar> localVarResponse = await ArraysBrowserSharedSidebarGetWithHttpInfoAsync(fileType, excludeFileType, fileProperty, sharedTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all arrays that have been shared with the user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType">file_type to search for, more than one can be included (optional)</param>
        /// <param name="excludeFileType">file_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileProperty">file_property key-value pair (comma separated, i.e. key,value) to search for, more than one can be included (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayBrowserSidebar)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayBrowserSidebar>> ArraysBrowserSharedSidebarGetWithHttpInfoAsync(List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), List<string> fileProperty = default(List<string>), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_type", fileType));
            }
            if (excludeFileType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_file_type", excludeFileType));
            }
            if (fileProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "file_property", fileProperty));
            }
            if (sharedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "shared_to", sharedTo));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysBrowserSharedSidebarGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayBrowserSidebar>("/arrays/browser/shared/sidebar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysBrowserSharedSidebarGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayEndTimestampData</returns>
        public ArrayEndTimestampData ArraysNamespaceArrayEndTimestampsGet(string _namespace, string array, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayEndTimestampData> localVarResponse = ArraysNamespaceArrayEndTimestampsGetWithHttpInfo(_namespace, array, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayEndTimestampData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayEndTimestampData> ArraysNamespaceArrayEndTimestampsGetWithHttpInfo(string _namespace, string array, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ArraysNamespaceArrayEndTimestampsGet");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ArraysNamespaceArrayEndTimestampsGet");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysNamespaceArrayEndTimestampsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayEndTimestampData>("/arrays/{namespace}/{array}/end_timestamps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysNamespaceArrayEndTimestampsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayEndTimestampData</returns>
        public async System.Threading.Tasks.Task<ArrayEndTimestampData> ArraysNamespaceArrayEndTimestampsGetAsync(string _namespace, string array, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayEndTimestampData> localVarResponse = await ArraysNamespaceArrayEndTimestampsGetWithHttpInfoAsync(_namespace, array, page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayEndTimestampData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayEndTimestampData>> ArraysNamespaceArrayEndTimestampsGetWithHttpInfoAsync(string _namespace, string array, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ArraysNamespaceArrayEndTimestampsGet");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ArraysNamespaceArrayEndTimestampsGet");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArrayApi.ArraysNamespaceArrayEndTimestampsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayEndTimestampData>("/arrays/{namespace}/{array}/end_timestamps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArraysNamespaceArrayEndTimestampsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  consolidate an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="consolidateRequest">Consolidate Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ConsolidateArray(string _namespace, string array, ArrayConsolidationRequest consolidateRequest, int operationIndex = 0)
        {
            ConsolidateArrayWithHttpInfo(_namespace, array, consolidateRequest);
        }

        /// <summary>
        ///  consolidate an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="consolidateRequest">Consolidate Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> ConsolidateArrayWithHttpInfo(string _namespace, string array, ArrayConsolidationRequest consolidateRequest, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ConsolidateArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ConsolidateArray");
            }

            // verify the required parameter 'consolidateRequest' is set
            if (consolidateRequest == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'consolidateRequest' when calling ArrayApi->ConsolidateArray");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = consolidateRequest;

            localVarRequestOptions.Operation = "ArrayApi.ConsolidateArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/arrays/{namespace}/{array}/consolidate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsolidateArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  consolidate an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="consolidateRequest">Consolidate Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConsolidateArrayAsync(string _namespace, string array, ArrayConsolidationRequest consolidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ConsolidateArrayWithHttpInfoAsync(_namespace, array, consolidateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  consolidate an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="consolidateRequest">Consolidate Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> ConsolidateArrayWithHttpInfoAsync(string _namespace, string array, ArrayConsolidationRequest consolidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ConsolidateArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ConsolidateArray");
            }

            // verify the required parameter 'consolidateRequest' is set
            if (consolidateRequest == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'consolidateRequest' when calling ArrayApi->ConsolidateArray");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = consolidateRequest;

            localVarRequestOptions.Operation = "ArrayApi.ConsolidateArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/arrays/{namespace}/{array}/consolidate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsolidateArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  create a array schema at a specified URI registered to a group/project
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateArray(string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0)
        {
            CreateArrayWithHttpInfo(_namespace, array, contentType, arraySchema, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME);
        }

        /// <summary>
        ///  create a array schema at a specified URI registered to a group/project
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> CreateArrayWithHttpInfo(string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->CreateArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->CreateArray");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->CreateArray");
            }

            // verify the required parameter 'arraySchema' is set
            if (arraySchema == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arraySchema' when calling ArrayApi->CreateArray");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME)); // header parameter
            }
            localVarRequestOptions.Data = arraySchema;

            localVarRequestOptions.Operation = "ArrayApi.CreateArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/arrays/{namespace}/{array}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  create a array schema at a specified URI registered to a group/project
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateArrayAsync(string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateArrayWithHttpInfoAsync(_namespace, array, contentType, arraySchema, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  create a array schema at a specified URI registered to a group/project
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="arraySchema">ArraySchema being created</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> CreateArrayWithHttpInfoAsync(string _namespace, string array, string contentType, ArraySchema arraySchema, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->CreateArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->CreateArray");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->CreateArray");
            }

            // verify the required parameter 'arraySchema' is set
            if (arraySchema == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arraySchema' when calling ArrayApi->CreateArray");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME)); // header parameter
            }
            localVarRequestOptions.Data = arraySchema;

            localVarRequestOptions.Operation = "ArrayApi.CreateArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/arrays/{namespace}/{array}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  delete a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteArray(string _namespace, string array, string contentType, int operationIndex = 0)
        {
            DeleteArrayWithHttpInfo(_namespace, array, contentType);
        }

        /// <summary>
        ///  delete a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> DeleteArrayWithHttpInfo(string _namespace, string array, string contentType, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->DeleteArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->DeleteArray");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->DeleteArray");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "ArrayApi.DeleteArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/arrays/{namespace}/{array}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  delete a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteArrayAsync(string _namespace, string array, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteArrayWithHttpInfoAsync(_namespace, array, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  delete a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> DeleteArrayWithHttpInfoAsync(string _namespace, string array, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->DeleteArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->DeleteArray");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->DeleteArray");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "ArrayApi.DeleteArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/arrays/{namespace}/{array}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  deregister a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeregisterArray(string _namespace, string array, int operationIndex = 0)
        {
            DeregisterArrayWithHttpInfo(_namespace, array);
        }

        /// <summary>
        ///  deregister a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> DeregisterArrayWithHttpInfo(string _namespace, string array, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->DeregisterArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->DeregisterArray");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.DeregisterArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/arrays/{namespace}/{array}/deregister", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeregisterArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  deregister a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeregisterArrayAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeregisterArrayWithHttpInfoAsync(_namespace, array, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  deregister a array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> DeregisterArrayWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->DeregisterArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->DeregisterArray");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.DeregisterArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/arrays/{namespace}/{array}/deregister", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeregisterArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  fetch an array&#39;s fragment info
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="fragmentInfoRequest">ArraySchema being created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FragmentInfo</returns>
        public FragmentInfo FragmentInfo(string _namespace, string array, string contentType, FragmentInfoRequest fragmentInfoRequest, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<FragmentInfo> localVarResponse = FragmentInfoWithHttpInfo(_namespace, array, contentType, fragmentInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  fetch an array&#39;s fragment info
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="fragmentInfoRequest">ArraySchema being created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FragmentInfo</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<FragmentInfo> FragmentInfoWithHttpInfo(string _namespace, string array, string contentType, FragmentInfoRequest fragmentInfoRequest, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->FragmentInfo");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->FragmentInfo");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->FragmentInfo");
            }

            // verify the required parameter 'fragmentInfoRequest' is set
            if (fragmentInfoRequest == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'fragmentInfoRequest' when calling ArrayApi->FragmentInfo");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = fragmentInfoRequest;

            localVarRequestOptions.Operation = "ArrayApi.FragmentInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FragmentInfo>("/arrays/{namespace}/{array}/fragment_info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FragmentInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  fetch an array&#39;s fragment info
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="fragmentInfoRequest">ArraySchema being created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FragmentInfo</returns>
        public async System.Threading.Tasks.Task<FragmentInfo> FragmentInfoAsync(string _namespace, string array, string contentType, FragmentInfoRequest fragmentInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<FragmentInfo> localVarResponse = await FragmentInfoWithHttpInfoAsync(_namespace, array, contentType, fragmentInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  fetch an array&#39;s fragment info
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="fragmentInfoRequest">ArraySchema being created</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FragmentInfo)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<FragmentInfo>> FragmentInfoWithHttpInfoAsync(string _namespace, string array, string contentType, FragmentInfoRequest fragmentInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->FragmentInfo");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->FragmentInfo");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->FragmentInfo");
            }

            // verify the required parameter 'fragmentInfoRequest' is set
            if (fragmentInfoRequest == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'fragmentInfoRequest' when calling ArrayApi->FragmentInfo");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = fragmentInfoRequest;

            localVarRequestOptions.Operation = "ArrayApi.FragmentInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FragmentInfo>("/arrays/{namespace}/{array}/fragment_info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FragmentInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get activity log by ID
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">ID of the activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayActivityLog</returns>
        public ArrayActivityLog GetActivityLogById(string _namespace, string array, string id, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayActivityLog> localVarResponse = GetActivityLogByIdWithHttpInfo(_namespace, array, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get activity log by ID
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">ID of the activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayActivityLog</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayActivityLog> GetActivityLogByIdWithHttpInfo(string _namespace, string array, string id, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetActivityLogById");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetActivityLogById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ArrayApi->GetActivityLogById");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetActivityLogById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayActivityLog>("/arrays/{namespace}/{array}/activity/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityLogById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get activity log by ID
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">ID of the activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayActivityLog</returns>
        public async System.Threading.Tasks.Task<ArrayActivityLog> GetActivityLogByIdAsync(string _namespace, string array, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayActivityLog> localVarResponse = await GetActivityLogByIdWithHttpInfoAsync(_namespace, array, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get activity log by ID
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="id">ID of the activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayActivityLog)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayActivityLog>> GetActivityLogByIdWithHttpInfoAsync(string _namespace, string array, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetActivityLogById");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetActivityLogById");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling ArrayApi->GetActivityLogById");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetActivityLogById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayActivityLog>("/arrays/{namespace}/{array}/activity/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityLogById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get all array metadata user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArrayInfo&gt;</returns>
        public List<ArrayInfo> GetAllArrayMetadata(string publicShare = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayInfo>> localVarResponse = GetAllArrayMetadataWithHttpInfo(publicShare);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get all array metadata user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArrayInfo&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayInfo>> GetAllArrayMetadataWithHttpInfo(string publicShare = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (publicShare != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "public_share", publicShare));
            }

            localVarRequestOptions.Operation = "ArrayApi.GetAllArrayMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArrayInfo>>("/arrays", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllArrayMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get all array metadata user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArrayInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArrayInfo>> GetAllArrayMetadataAsync(string publicShare = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayInfo>> localVarResponse = await GetAllArrayMetadataWithHttpInfoAsync(publicShare, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get all array metadata user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicShare">Public share values can be one of exclude, only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArrayInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayInfo>>> GetAllArrayMetadataWithHttpInfoAsync(string publicShare = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (publicShare != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "public_share", publicShare));
            }

            localVarRequestOptions.Operation = "ArrayApi.GetAllArrayMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArrayInfo>>("/arrays", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllArrayMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get an ArraySchema using a url encoded uri
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArraySchema</returns>
        public ArraySchema GetArray(string _namespace, string array, string contentType, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArraySchema> localVarResponse = GetArrayWithHttpInfo(_namespace, array, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get an ArraySchema using a url encoded uri
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArraySchema</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArraySchema> GetArrayWithHttpInfo(string _namespace, string array, string contentType, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArray");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArray");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/capnp"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArraySchema>("/arrays/{namespace}/{array}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get an ArraySchema using a url encoded uri
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArraySchema</returns>
        public async System.Threading.Tasks.Task<ArraySchema> GetArrayAsync(string _namespace, string array, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArraySchema> localVarResponse = await GetArrayWithHttpInfoAsync(_namespace, array, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get an ArraySchema using a url encoded uri
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArraySchema)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArraySchema>> GetArrayWithHttpInfoAsync(string _namespace, string array, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArray");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArray");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/capnp"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArraySchema>("/arrays/{namespace}/{array}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get the max buffer sizes of an array for a subarray
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MaxBufferSizes</returns>
        public MaxBufferSizes GetArrayMaxBufferSizes(string _namespace, string array, string subarray, string contentType, string xPayer = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<MaxBufferSizes> localVarResponse = GetArrayMaxBufferSizesWithHttpInfo(_namespace, array, subarray, contentType, xPayer);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get the max buffer sizes of an array for a subarray
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MaxBufferSizes</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<MaxBufferSizes> GetArrayMaxBufferSizesWithHttpInfo(string _namespace, string array, string subarray, string contentType, string xPayer = default(string), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMaxBufferSizes");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMaxBufferSizes");
            }

            // verify the required parameter 'subarray' is set
            if (subarray == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'subarray' when calling ArrayApi->GetArrayMaxBufferSizes");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArrayMaxBufferSizes");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "subarray", subarray));
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (xPayer != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Payer", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(xPayer)); // header parameter
            }

            localVarRequestOptions.Operation = "ArrayApi.GetArrayMaxBufferSizes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MaxBufferSizes>("/arrays/{namespace}/{array}/max_buffer_sizes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayMaxBufferSizes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get the max buffer sizes of an array for a subarray
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MaxBufferSizes</returns>
        public async System.Threading.Tasks.Task<MaxBufferSizes> GetArrayMaxBufferSizesAsync(string _namespace, string array, string subarray, string contentType, string xPayer = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<MaxBufferSizes> localVarResponse = await GetArrayMaxBufferSizesWithHttpInfoAsync(_namespace, array, subarray, contentType, xPayer, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get the max buffer sizes of an array for a subarray
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="subarray">CSV string of subarray to get max buffer sizes for</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MaxBufferSizes)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<MaxBufferSizes>> GetArrayMaxBufferSizesWithHttpInfoAsync(string _namespace, string array, string subarray, string contentType, string xPayer = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMaxBufferSizes");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMaxBufferSizes");
            }

            // verify the required parameter 'subarray' is set
            if (subarray == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'subarray' when calling ArrayApi->GetArrayMaxBufferSizes");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArrayMaxBufferSizes");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "subarray", subarray));
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (xPayer != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Payer", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(xPayer)); // header parameter
            }

            localVarRequestOptions.Operation = "ArrayApi.GetArrayMaxBufferSizes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MaxBufferSizes>("/arrays/{namespace}/{array}/max_buffer_sizes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayMaxBufferSizes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get metadata from the array in JSON format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetArrayMetaDataJson(string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<Object> localVarResponse = GetArrayMetaDataJsonWithHttpInfo(_namespace, array, length, endTimestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata from the array in JSON format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> GetArrayMetaDataJsonWithHttpInfo(string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetaDataJson");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetaDataJson");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (length != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "length", length));
            }
            if (endTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "end_timestamp", endTimestamp));
            }

            localVarRequestOptions.Operation = "ArrayApi.GetArrayMetaDataJson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/arrays/{namespace}/{array}/metadata_json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayMetaDataJson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get metadata from the array in JSON format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetArrayMetaDataJsonAsync(string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<Object> localVarResponse = await GetArrayMetaDataJsonWithHttpInfoAsync(_namespace, array, length, endTimestamp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata from the array in JSON format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="length">(optional) limit character length of returned values (optional)</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch, metadata will use open_at functionality to open array at the specific timestamp (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> GetArrayMetaDataJsonWithHttpInfoAsync(string _namespace, string array, int? length = default(int?), int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetaDataJson");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetaDataJson");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (length != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "length", length));
            }
            if (endTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "end_timestamp", endTimestamp));
            }

            localVarRequestOptions.Operation = "ArrayApi.GetArrayMetaDataJson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/arrays/{namespace}/{array}/metadata_json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayMetaDataJson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayInfo</returns>
        public ArrayInfo GetArrayMetadata(string _namespace, string array, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayInfo> localVarResponse = GetArrayMetadataWithHttpInfo(_namespace, array);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayInfo</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayInfo> GetArrayMetadataWithHttpInfo(string _namespace, string array, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetadata");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetadata");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArrayMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayInfo>("/arrays/{namespace}/{array}/metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayInfo</returns>
        public async System.Threading.Tasks.Task<ArrayInfo> GetArrayMetadataAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayInfo> localVarResponse = await GetArrayMetadataWithHttpInfoAsync(_namespace, array, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayInfo)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayInfo>> GetArrayMetadataWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetadata");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetadata");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArrayMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayInfo>("/arrays/{namespace}/{array}/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayMetadata</returns>
        public ArrayMetadata GetArrayMetadataCapnp(string _namespace, string array, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayMetadata> localVarResponse = GetArrayMetadataCapnpWithHttpInfo(_namespace, array);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayMetadata</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayMetadata> GetArrayMetadataCapnpWithHttpInfo(string _namespace, string array, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetadataCapnp");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetadataCapnp");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/capnp"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArrayMetadataCapnp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayMetadata>("/arrays/{namespace}/{array}/array_metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayMetadataCapnp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayMetadata</returns>
        public async System.Threading.Tasks.Task<ArrayMetadata> GetArrayMetadataCapnpAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayMetadata> localVarResponse = await GetArrayMetadataCapnpWithHttpInfoAsync(_namespace, array, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayMetadata)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayMetadata>> GetArrayMetadataCapnpWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayMetadataCapnp");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayMetadataCapnp");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/capnp"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArrayMetadataCapnp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayMetadata>("/arrays/{namespace}/{array}/array_metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayMetadataCapnp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get the non empty domain of an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NonEmptyDomain</returns>
        public NonEmptyDomain GetArrayNonEmptyDomain(string _namespace, string array, string contentType, string xPayer = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<NonEmptyDomain> localVarResponse = GetArrayNonEmptyDomainWithHttpInfo(_namespace, array, contentType, xPayer);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get the non empty domain of an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NonEmptyDomain</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<NonEmptyDomain> GetArrayNonEmptyDomainWithHttpInfo(string _namespace, string array, string contentType, string xPayer = default(string), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayNonEmptyDomain");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayNonEmptyDomain");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArrayNonEmptyDomain");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (xPayer != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Payer", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(xPayer)); // header parameter
            }

            localVarRequestOptions.Operation = "ArrayApi.GetArrayNonEmptyDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NonEmptyDomain>("/arrays/{namespace}/{array}/non_empty_domain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayNonEmptyDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get the non empty domain of an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NonEmptyDomain</returns>
        public async System.Threading.Tasks.Task<NonEmptyDomain> GetArrayNonEmptyDomainAsync(string _namespace, string array, string contentType, string xPayer = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<NonEmptyDomain> localVarResponse = await GetArrayNonEmptyDomainWithHttpInfoAsync(_namespace, array, contentType, xPayer, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get the non empty domain of an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="contentType">Content Type of input and return mime</param>
        /// <param name="xPayer">Name of organization or user who should be charged for this request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NonEmptyDomain)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<NonEmptyDomain>> GetArrayNonEmptyDomainWithHttpInfoAsync(string _namespace, string array, string contentType, string xPayer = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayNonEmptyDomain");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayNonEmptyDomain");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'contentType' when calling ArrayApi->GetArrayNonEmptyDomain");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Content-Type", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (xPayer != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Payer", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(xPayer)); // header parameter
            }

            localVarRequestOptions.Operation = "ArrayApi.GetArrayNonEmptyDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NonEmptyDomain>("/arrays/{namespace}/{array}/non_empty_domain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayNonEmptyDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get non-empty domain from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetArrayNonEmptyDomainJson(string _namespace, string array, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<Object> localVarResponse = GetArrayNonEmptyDomainJsonWithHttpInfo(_namespace, array);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get non-empty domain from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> GetArrayNonEmptyDomainJsonWithHttpInfo(string _namespace, string array, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayNonEmptyDomainJson");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayNonEmptyDomainJson");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArrayNonEmptyDomainJson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/arrays/{namespace}/{array}/non_empty_domain_json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayNonEmptyDomainJson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get non-empty domain from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetArrayNonEmptyDomainJsonAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<Object> localVarResponse = await GetArrayNonEmptyDomainJsonWithHttpInfoAsync(_namespace, array, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get non-empty domain from the array in json format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> GetArrayNonEmptyDomainJsonWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArrayNonEmptyDomainJson");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArrayNonEmptyDomainJson");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArrayNonEmptyDomainJson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/arrays/{namespace}/{array}/non_empty_domain_json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayNonEmptyDomainJson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get an sample set of data from the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArraySample</returns>
        public ArraySample GetArraySampleData(string _namespace, string array, decimal? samples = default(decimal?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArraySample> localVarResponse = GetArraySampleDataWithHttpInfo(_namespace, array, samples);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get an sample set of data from the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArraySample</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArraySample> GetArraySampleDataWithHttpInfo(string _namespace, string array, decimal? samples = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraySampleData");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArraySampleData");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (samples != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "samples", samples));
            }

            localVarRequestOptions.Operation = "ArrayApi.GetArraySampleData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArraySample>("/arrays/{namespace}/{array}/sample", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArraySampleData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get an sample set of data from the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArraySample</returns>
        public async System.Threading.Tasks.Task<ArraySample> GetArraySampleDataAsync(string _namespace, string array, decimal? samples = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArraySample> localVarResponse = await GetArraySampleDataWithHttpInfoAsync(_namespace, array, samples, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get an sample set of data from the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="samples">Number of sample results to return (optional, default to 5.0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArraySample)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArraySample>> GetArraySampleDataWithHttpInfoAsync(string _namespace, string array, decimal? samples = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraySampleData");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArraySampleData");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (samples != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "samples", samples));
            }

            localVarRequestOptions.Operation = "ArrayApi.GetArraySampleData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArraySample>("/arrays/{namespace}/{array}/sample", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArraySampleData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all sharing details of the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArraySharing&gt;</returns>
        public List<ArraySharing> GetArraySharingPolicies(string _namespace, string array, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArraySharing>> localVarResponse = GetArraySharingPoliciesWithHttpInfo(_namespace, array);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all sharing details of the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArraySharing&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<ArraySharing>> GetArraySharingPoliciesWithHttpInfo(string _namespace, string array, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraySharingPolicies");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArraySharingPolicies");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArraySharingPolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArraySharing>>("/arrays/{namespace}/{array}/share", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArraySharingPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all sharing details of the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArraySharing&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArraySharing>> GetArraySharingPoliciesAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArraySharing>> localVarResponse = await GetArraySharingPoliciesWithHttpInfoAsync(_namespace, array, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all sharing details of the array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArraySharing&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<ArraySharing>>> GetArraySharingPoliciesWithHttpInfoAsync(string _namespace, string array, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraySharingPolicies");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetArraySharingPolicies");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArraySharingPolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArraySharing>>("/arrays/{namespace}/{array}/share", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArraySharingPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get metadata on all arrays in a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArrayInfo&gt;</returns>
        public List<ArrayInfo> GetArraysInNamespace(string _namespace, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayInfo>> localVarResponse = GetArraysInNamespaceWithHttpInfo(_namespace);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on all arrays in a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArrayInfo&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayInfo>> GetArraysInNamespaceWithHttpInfo(string _namespace, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraysInNamespace");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArraysInNamespace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArrayInfo>>("/arrays/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArraysInNamespace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get metadata on all arrays in a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArrayInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArrayInfo>> GetArraysInNamespaceAsync(string _namespace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayInfo>> localVarResponse = await GetArraysInNamespaceWithHttpInfoAsync(_namespace, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  get metadata on all arrays in a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArrayInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayInfo>>> GetArraysInNamespaceWithHttpInfoAsync(string _namespace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetArraysInNamespace");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter

            localVarRequestOptions.Operation = "ArrayApi.GetArraysInNamespace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArrayInfo>>("/arrays/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArraysInNamespace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        public int GetFragmentEndTimestamp(string _namespace, string array, int? endTimestamp = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<int> localVarResponse = GetFragmentEndTimestampWithHttpInfo(_namespace, array, endTimestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<int> GetFragmentEndTimestampWithHttpInfo(string _namespace, string array, int? endTimestamp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetFragmentEndTimestamp");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetFragmentEndTimestamp");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (endTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "end_timestamp", endTimestamp));
            }

            localVarRequestOptions.Operation = "ArrayApi.GetFragmentEndTimestamp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/arrays/{namespace}/{array}/fragment_end_timestamp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFragmentEndTimestamp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> GetFragmentEndTimestampAsync(string _namespace, string array, int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<int> localVarResponse = await GetFragmentEndTimestampWithHttpInfoAsync(_namespace, array, endTimestamp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get fragment end_timestamp on an array, will search for the closest end_timestamp to the timestamp asked
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="endTimestamp">Milliseconds since Unix epoch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<int>> GetFragmentEndTimestampWithHttpInfoAsync(string _namespace, string array, int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->GetFragmentEndTimestamp");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->GetFragmentEndTimestamp");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            if (endTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "end_timestamp", endTimestamp));
            }

            localVarRequestOptions.Operation = "ArrayApi.GetFragmentEndTimestamp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/arrays/{namespace}/{array}/fragment_end_timestamp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFragmentEndTimestamp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LastAccessedArray&gt;</returns>
        public List<LastAccessedArray> GetLastAccessedArrays(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<LastAccessedArray>> localVarResponse = GetLastAccessedArraysWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LastAccessedArray&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<LastAccessedArray>> GetLastAccessedArraysWithHttpInfo(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ArrayApi.GetLastAccessedArrays";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LastAccessedArray>>("/arrays/last_accessed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLastAccessedArrays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LastAccessedArray&gt;</returns>
        public async System.Threading.Tasks.Task<List<LastAccessedArray>> GetLastAccessedArraysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<LastAccessedArray>> localVarResponse = await GetLastAccessedArraysWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LastAccessedArray&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<LastAccessedArray>>> GetLastAccessedArraysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ArrayApi.GetLastAccessedArrays";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LastAccessedArray>>("/arrays/last_accessed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLastAccessedArrays", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  register an array at a specified URI registered to the given namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayInfo</returns>
        public ArrayInfo RegisterArray(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayInfo> localVarResponse = RegisterArrayWithHttpInfo(_namespace, array, arrayMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  register an array at a specified URI registered to the given namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayInfo</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayInfo> RegisterArrayWithHttpInfo(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->RegisterArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->RegisterArray");
            }

            // verify the required parameter 'arrayMetadata' is set
            if (arrayMetadata == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arrayMetadata' when calling ArrayApi->RegisterArray");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = arrayMetadata;

            localVarRequestOptions.Operation = "ArrayApi.RegisterArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ArrayInfo>("/arrays/{namespace}/{array}/register", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  register an array at a specified URI registered to the given namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayInfo</returns>
        public async System.Threading.Tasks.Task<ArrayInfo> RegisterArrayAsync(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayInfo> localVarResponse = await RegisterArrayWithHttpInfoAsync(_namespace, array, arrayMetadata, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  register an array at a specified URI registered to the given namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">metadata associated with array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayInfo)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayInfo>> RegisterArrayWithHttpInfoAsync(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->RegisterArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->RegisterArray");
            }

            // verify the required parameter 'arrayMetadata' is set
            if (arrayMetadata == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arrayMetadata' when calling ArrayApi->RegisterArray");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = arrayMetadata;

            localVarRequestOptions.Operation = "ArrayApi.RegisterArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ArrayInfo>("/arrays/{namespace}/{array}/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Share an array with a user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the array will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ShareArray(string _namespace, string array, ArraySharing arraySharing, int operationIndex = 0)
        {
            ShareArrayWithHttpInfo(_namespace, array, arraySharing);
        }

        /// <summary>
        ///  Share an array with a user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the array will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> ShareArrayWithHttpInfo(string _namespace, string array, ArraySharing arraySharing, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ShareArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ShareArray");
            }

            // verify the required parameter 'arraySharing' is set
            if (arraySharing == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arraySharing' when calling ArrayApi->ShareArray");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = arraySharing;

            localVarRequestOptions.Operation = "ArrayApi.ShareArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/arrays/{namespace}/{array}/share", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShareArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Share an array with a user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the array will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ShareArrayAsync(string _namespace, string array, ArraySharing arraySharing, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ShareArrayWithHttpInfoAsync(_namespace, array, arraySharing, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Share an array with a user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arraySharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the array will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> ShareArrayWithHttpInfoAsync(string _namespace, string array, ArraySharing arraySharing, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->ShareArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->ShareArray");
            }

            // verify the required parameter 'arraySharing' is set
            if (arraySharing == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arraySharing' when calling ArrayApi->ShareArray");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = arraySharing;

            localVarRequestOptions.Operation = "ArrayApi.ShareArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/arrays/{namespace}/{array}/share", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShareArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateArrayMetadata(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0)
        {
            UpdateArrayMetadataWithHttpInfo(_namespace, array, arrayMetadata);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> UpdateArrayMetadataWithHttpInfo(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->UpdateArrayMetadata");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->UpdateArrayMetadata");
            }

            // verify the required parameter 'arrayMetadata' is set
            if (arrayMetadata == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arrayMetadata' when calling ArrayApi->UpdateArrayMetadata");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = arrayMetadata;

            localVarRequestOptions.Operation = "ArrayApi.UpdateArrayMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/arrays/{namespace}/{array}/metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArrayMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateArrayMetadataAsync(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateArrayMetadataWithHttpInfoAsync(_namespace, array, arrayMetadata, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadata">array metadata to update</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> UpdateArrayMetadataWithHttpInfoAsync(string _namespace, string array, ArrayInfoUpdate arrayMetadata, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->UpdateArrayMetadata");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->UpdateArrayMetadata");
            }

            // verify the required parameter 'arrayMetadata' is set
            if (arrayMetadata == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arrayMetadata' when calling ArrayApi->UpdateArrayMetadata");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = arrayMetadata;

            localVarRequestOptions.Operation = "ArrayApi.UpdateArrayMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/arrays/{namespace}/{array}/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArrayMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateArrayMetadataCapnp(string _namespace, string array, ArrayMetadata arrayMetadataEntries, int operationIndex = 0)
        {
            UpdateArrayMetadataCapnpWithHttpInfo(_namespace, array, arrayMetadataEntries);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> UpdateArrayMetadataCapnpWithHttpInfo(string _namespace, string array, ArrayMetadata arrayMetadataEntries, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->UpdateArrayMetadataCapnp");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->UpdateArrayMetadataCapnp");
            }

            // verify the required parameter 'arrayMetadataEntries' is set
            if (arrayMetadataEntries == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arrayMetadataEntries' when calling ArrayApi->UpdateArrayMetadataCapnp");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/capnp"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/capnp"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = arrayMetadataEntries;

            localVarRequestOptions.Operation = "ArrayApi.UpdateArrayMetadataCapnp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/arrays/{namespace}/{array}/array_metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArrayMetadataCapnp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateArrayMetadataCapnpAsync(string _namespace, string array, ArrayMetadata arrayMetadataEntries, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateArrayMetadataCapnpWithHttpInfoAsync(_namespace, array, arrayMetadataEntries, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  update metadata on an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="arrayMetadataEntries">List of metadata entries</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> UpdateArrayMetadataCapnpWithHttpInfoAsync(string _namespace, string array, ArrayMetadata arrayMetadataEntries, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->UpdateArrayMetadataCapnp");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->UpdateArrayMetadataCapnp");
            }

            // verify the required parameter 'arrayMetadataEntries' is set
            if (arrayMetadataEntries == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'arrayMetadataEntries' when calling ArrayApi->UpdateArrayMetadataCapnp");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/capnp"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/capnp"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = arrayMetadataEntries;

            localVarRequestOptions.Operation = "ArrayApi.UpdateArrayMetadataCapnp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/arrays/{namespace}/{array}/array_metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArrayMetadataCapnp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  vacuum an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="vaccumRequest">Vaccum Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void VacuumArray(string _namespace, string array, ArrayVacuumRequest vaccumRequest, int operationIndex = 0)
        {
            VacuumArrayWithHttpInfo(_namespace, array, vaccumRequest);
        }

        /// <summary>
        ///  vacuum an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="vaccumRequest">Vaccum Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> VacuumArrayWithHttpInfo(string _namespace, string array, ArrayVacuumRequest vaccumRequest, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->VacuumArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->VacuumArray");
            }

            // verify the required parameter 'vaccumRequest' is set
            if (vaccumRequest == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'vaccumRequest' when calling ArrayApi->VacuumArray");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = vaccumRequest;

            localVarRequestOptions.Operation = "ArrayApi.VacuumArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/arrays/{namespace}/{array}/vacuum", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VacuumArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  vacuum an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="vaccumRequest">Vaccum Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VacuumArrayAsync(string _namespace, string array, ArrayVacuumRequest vaccumRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await VacuumArrayWithHttpInfoAsync(_namespace, array, vaccumRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  vacuum an array at a specified URI
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="vaccumRequest">Vaccum Request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> VacuumArrayWithHttpInfoAsync(string _namespace, string array, ArrayVacuumRequest vaccumRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling ArrayApi->VacuumArray");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling ArrayApi->VacuumArray");
            }

            // verify the required parameter 'vaccumRequest' is set
            if (vaccumRequest == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'vaccumRequest' when calling ArrayApi->VacuumArray");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = vaccumRequest;

            localVarRequestOptions.Operation = "ArrayApi.VacuumArray";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/arrays/{namespace}/{array}/vacuum", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VacuumArray", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
