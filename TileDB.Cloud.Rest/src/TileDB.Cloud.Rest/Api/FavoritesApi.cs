/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFavoritesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new array favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddArrayFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new array favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddArrayFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new ML model favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddMLModelFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new ML model favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddMLModelFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new notebook favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddNotebookFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new notebook favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNotebookFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new UDF favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddUDFFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new UDF favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUDFFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific array favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteArrayFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific array favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteArrayFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific ML model favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteMLModelFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific ML model favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMLModelFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific notebook favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteNotebookFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific notebook favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNotebookFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific UDF favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteUDFFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific UDF favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUDFFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch array favorite of a specific array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayFavorite</returns>
        ArrayFavorite GetArrayFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch array favorite of a specific array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayFavorite</returns>
        ApiResponse<ArrayFavorite> GetArrayFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch ML model favorite of a specific ML model
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MLModelFavorite</returns>
        MLModelFavorite GetMLModelFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch ML model favorite of a specific ML model
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MLModelFavorite</returns>
        ApiResponse<MLModelFavorite> GetMLModelFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch notebook favorite of a specific notebook
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotebookFavorite</returns>
        NotebookFavorite GetNotebookFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch notebook favorite of a specific notebook
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotebookFavorite</returns>
        ApiResponse<NotebookFavorite> GetNotebookFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch UDF favorite of a specific UDF
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UDFFavorite</returns>
        UDFFavorite GetUDFFavorite(string _namespace, string name, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch UDF favorite of a specific UDF
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UDFFavorite</returns>
        ApiResponse<UDFFavorite> GetUDFFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of array favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayFavoritesData</returns>
        ArrayFavoritesData ListArrayFavorites(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of array favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayFavoritesData</returns>
        ApiResponse<ArrayFavoritesData> ListArrayFavoritesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite array uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArrayFavorite&gt;</returns>
        List<ArrayFavorite> ListArrayFavoritesUUIDs(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite array uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArrayFavorite&gt;</returns>
        ApiResponse<List<ArrayFavorite>> ListArrayFavoritesUUIDsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of ML models favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MLModelFavoritesData</returns>
        MLModelFavoritesData ListMLModelFavorites(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of ML models favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MLModelFavoritesData</returns>
        ApiResponse<MLModelFavoritesData> ListMLModelFavoritesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite ML models uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MLModelFavorite&gt;</returns>
        List<MLModelFavorite> ListMLModelFavoritesUUIDs(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite ML models uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MLModelFavorite&gt;</returns>
        ApiResponse<List<MLModelFavorite>> ListMLModelFavoritesUUIDsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of notebook favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDashboard">return only dashboards (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotebookFavoritesData</returns>
        NotebookFavoritesData ListNotebookFavorites(bool? isDashboard = default(bool?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of notebook favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDashboard">return only dashboards (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotebookFavoritesData</returns>
        ApiResponse<NotebookFavoritesData> ListNotebookFavoritesWithHttpInfo(bool? isDashboard = default(bool?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite notebook uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotebookFavorite&gt;</returns>
        List<NotebookFavorite> ListNotebookFavoritesUUIDs(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite notebook uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotebookFavorite&gt;</returns>
        ApiResponse<List<NotebookFavorite>> ListNotebookFavoritesUUIDsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of UDF favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UDFFavoritesData</returns>
        UDFFavoritesData ListUDFFavorites(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of UDF favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UDFFavoritesData</returns>
        ApiResponse<UDFFavoritesData> ListUDFFavoritesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite UDF uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UDFFavorite&gt;</returns>
        List<UDFFavorite> ListUDFFavoritesUUIDs(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite UDF uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UDFFavorite&gt;</returns>
        ApiResponse<List<UDFFavorite>> ListUDFFavoritesUUIDsWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFavoritesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new array favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddArrayFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new array favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddArrayFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new ML model favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddMLModelFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new ML model favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMLModelFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new notebook favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNotebookFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new notebook favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNotebookFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new UDF favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddUDFFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new UDF favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUDFFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific array favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteArrayFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific array favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArrayFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific ML model favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMLModelFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific ML model favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMLModelFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific notebook favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNotebookFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific notebook favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotebookFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific UDF favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUDFFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete specific UDF favorite
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUDFFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch array favorite of a specific array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayFavorite</returns>
        System.Threading.Tasks.Task<ArrayFavorite> GetArrayFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch array favorite of a specific array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayFavorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayFavorite>> GetArrayFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch ML model favorite of a specific ML model
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MLModelFavorite</returns>
        System.Threading.Tasks.Task<MLModelFavorite> GetMLModelFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch ML model favorite of a specific ML model
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MLModelFavorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<MLModelFavorite>> GetMLModelFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch notebook favorite of a specific notebook
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotebookFavorite</returns>
        System.Threading.Tasks.Task<NotebookFavorite> GetNotebookFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch notebook favorite of a specific notebook
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotebookFavorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotebookFavorite>> GetNotebookFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch UDF favorite of a specific UDF
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UDFFavorite</returns>
        System.Threading.Tasks.Task<UDFFavorite> GetUDFFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch UDF favorite of a specific UDF
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UDFFavorite)</returns>
        System.Threading.Tasks.Task<ApiResponse<UDFFavorite>> GetUDFFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of array favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayFavoritesData</returns>
        System.Threading.Tasks.Task<ArrayFavoritesData> ListArrayFavoritesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of array favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayFavoritesData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayFavoritesData>> ListArrayFavoritesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite array uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArrayFavorite&gt;</returns>
        System.Threading.Tasks.Task<List<ArrayFavorite>> ListArrayFavoritesUUIDsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite array uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArrayFavorite&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArrayFavorite>>> ListArrayFavoritesUUIDsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of ML models favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MLModelFavoritesData</returns>
        System.Threading.Tasks.Task<MLModelFavoritesData> ListMLModelFavoritesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of ML models favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MLModelFavoritesData)</returns>
        System.Threading.Tasks.Task<ApiResponse<MLModelFavoritesData>> ListMLModelFavoritesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite ML models uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MLModelFavorite&gt;</returns>
        System.Threading.Tasks.Task<List<MLModelFavorite>> ListMLModelFavoritesUUIDsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite ML models uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MLModelFavorite&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MLModelFavorite>>> ListMLModelFavoritesUUIDsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of notebook favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDashboard">return only dashboards (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotebookFavoritesData</returns>
        System.Threading.Tasks.Task<NotebookFavoritesData> ListNotebookFavoritesAsync(bool? isDashboard = default(bool?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of notebook favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDashboard">return only dashboards (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotebookFavoritesData)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotebookFavoritesData>> ListNotebookFavoritesWithHttpInfoAsync(bool? isDashboard = default(bool?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite notebook uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotebookFavorite&gt;</returns>
        System.Threading.Tasks.Task<List<NotebookFavorite>> ListNotebookFavoritesUUIDsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite notebook uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotebookFavorite&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NotebookFavorite>>> ListNotebookFavoritesUUIDsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of UDF favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UDFFavoritesData</returns>
        System.Threading.Tasks.Task<UDFFavoritesData> ListUDFFavoritesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a page of UDF favorites of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UDFFavoritesData)</returns>
        System.Threading.Tasks.Task<ApiResponse<UDFFavoritesData>> ListUDFFavoritesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite UDF uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UDFFavorite&gt;</returns>
        System.Threading.Tasks.Task<List<UDFFavorite>> ListUDFFavoritesUUIDsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch all favorite UDF uuids of connected user
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UDFFavorite&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UDFFavorite>>> ListUDFFavoritesUUIDsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFavoritesApi : IFavoritesApiSync, IFavoritesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FavoritesApi : IFavoritesApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FavoritesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FavoritesApi(string basePath)
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FavoritesApi(TileDB.Cloud.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FavoritesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FavoritesApi(TileDB.Cloud.Rest.Client.ISynchronousClient client, TileDB.Cloud.Rest.Client.IAsynchronousClient asyncClient, TileDB.Cloud.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Add a new array favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddArrayFavorite(string _namespace, string name, int operationIndex = 0)
        {
            AddArrayFavoriteWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Add a new array favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> AddArrayFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->AddArrayFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->AddArrayFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.AddArrayFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/arrays/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddArrayFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new array favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddArrayFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddArrayFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Add a new array favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> AddArrayFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->AddArrayFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->AddArrayFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.AddArrayFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/arrays/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddArrayFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new ML model favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddMLModelFavorite(string _namespace, string name, int operationIndex = 0)
        {
            AddMLModelFavoriteWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Add a new ML model favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> AddMLModelFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->AddMLModelFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->AddMLModelFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.AddMLModelFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ml_models/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMLModelFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new ML model favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddMLModelFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddMLModelFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Add a new ML model favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> AddMLModelFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->AddMLModelFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->AddMLModelFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.AddMLModelFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ml_models/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMLModelFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new notebook favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddNotebookFavorite(string _namespace, string name, int operationIndex = 0)
        {
            AddNotebookFavoriteWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Add a new notebook favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> AddNotebookFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->AddNotebookFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->AddNotebookFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.AddNotebookFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/notebooks/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddNotebookFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new notebook favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNotebookFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddNotebookFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Add a new notebook favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> AddNotebookFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->AddNotebookFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->AddNotebookFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.AddNotebookFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/notebooks/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddNotebookFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new UDF favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddUDFFavorite(string _namespace, string name, int operationIndex = 0)
        {
            AddUDFFavoriteWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Add a new UDF favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> AddUDFFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->AddUDFFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->AddUDFFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.AddUDFFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/udfs/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUDFFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new UDF favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddUDFFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddUDFFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Add a new UDF favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> AddUDFFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->AddUDFFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->AddUDFFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.AddUDFFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/udfs/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUDFFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete specific array favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteArrayFavorite(string _namespace, string name, int operationIndex = 0)
        {
            DeleteArrayFavoriteWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Delete specific array favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> DeleteArrayFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->DeleteArrayFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->DeleteArrayFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.DeleteArrayFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/arrays/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteArrayFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete specific array favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteArrayFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteArrayFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete specific array favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> DeleteArrayFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->DeleteArrayFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->DeleteArrayFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.DeleteArrayFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/arrays/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteArrayFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete specific ML model favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteMLModelFavorite(string _namespace, string name, int operationIndex = 0)
        {
            DeleteMLModelFavoriteWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Delete specific ML model favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> DeleteMLModelFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->DeleteMLModelFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->DeleteMLModelFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.DeleteMLModelFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ml_models/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMLModelFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete specific ML model favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMLModelFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMLModelFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete specific ML model favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> DeleteMLModelFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->DeleteMLModelFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->DeleteMLModelFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.DeleteMLModelFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ml_models/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMLModelFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete specific notebook favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteNotebookFavorite(string _namespace, string name, int operationIndex = 0)
        {
            DeleteNotebookFavoriteWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Delete specific notebook favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> DeleteNotebookFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->DeleteNotebookFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->DeleteNotebookFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.DeleteNotebookFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/notebooks/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotebookFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete specific notebook favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNotebookFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteNotebookFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete specific notebook favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> DeleteNotebookFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->DeleteNotebookFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->DeleteNotebookFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.DeleteNotebookFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/notebooks/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotebookFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete specific UDF favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteUDFFavorite(string _namespace, string name, int operationIndex = 0)
        {
            DeleteUDFFavoriteWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Delete specific UDF favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> DeleteUDFFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->DeleteUDFFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->DeleteUDFFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.DeleteUDFFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/udfs/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUDFFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete specific UDF favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUDFFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUDFFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete specific UDF favorite
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> DeleteUDFFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->DeleteUDFFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->DeleteUDFFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.DeleteUDFFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/udfs/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUDFFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch array favorite of a specific array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayFavorite</returns>
        public ArrayFavorite GetArrayFavorite(string _namespace, string name, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayFavorite> localVarResponse = GetArrayFavoriteWithHttpInfo(_namespace, name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch array favorite of a specific array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayFavorite</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayFavorite> GetArrayFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->GetArrayFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->GetArrayFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetArrayFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayFavorite>("/arrays/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch array favorite of a specific array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayFavorite</returns>
        public async System.Threading.Tasks.Task<ArrayFavorite> GetArrayFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayFavorite> localVarResponse = await GetArrayFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch array favorite of a specific array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the array</param>
        /// <param name="name">The name of the array</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayFavorite)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayFavorite>> GetArrayFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->GetArrayFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->GetArrayFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetArrayFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayFavorite>("/arrays/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArrayFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch ML model favorite of a specific ML model
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MLModelFavorite</returns>
        public MLModelFavorite GetMLModelFavorite(string _namespace, string name, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<MLModelFavorite> localVarResponse = GetMLModelFavoriteWithHttpInfo(_namespace, name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch ML model favorite of a specific ML model
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MLModelFavorite</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<MLModelFavorite> GetMLModelFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->GetMLModelFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->GetMLModelFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetMLModelFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MLModelFavorite>("/ml_models/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMLModelFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch ML model favorite of a specific ML model
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MLModelFavorite</returns>
        public async System.Threading.Tasks.Task<MLModelFavorite> GetMLModelFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<MLModelFavorite> localVarResponse = await GetMLModelFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch ML model favorite of a specific ML model
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the ML model</param>
        /// <param name="name">The name of the ML model</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MLModelFavorite)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<MLModelFavorite>> GetMLModelFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->GetMLModelFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->GetMLModelFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetMLModelFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MLModelFavorite>("/ml_models/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMLModelFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch notebook favorite of a specific notebook
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotebookFavorite</returns>
        public NotebookFavorite GetNotebookFavorite(string _namespace, string name, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<NotebookFavorite> localVarResponse = GetNotebookFavoriteWithHttpInfo(_namespace, name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch notebook favorite of a specific notebook
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotebookFavorite</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<NotebookFavorite> GetNotebookFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->GetNotebookFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->GetNotebookFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetNotebookFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotebookFavorite>("/notebooks/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotebookFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch notebook favorite of a specific notebook
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotebookFavorite</returns>
        public async System.Threading.Tasks.Task<NotebookFavorite> GetNotebookFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<NotebookFavorite> localVarResponse = await GetNotebookFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch notebook favorite of a specific notebook
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the notebook</param>
        /// <param name="name">The name of the notebook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotebookFavorite)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<NotebookFavorite>> GetNotebookFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->GetNotebookFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->GetNotebookFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetNotebookFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotebookFavorite>("/notebooks/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotebookFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch UDF favorite of a specific UDF
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UDFFavorite</returns>
        public UDFFavorite GetUDFFavorite(string _namespace, string name, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<UDFFavorite> localVarResponse = GetUDFFavoriteWithHttpInfo(_namespace, name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch UDF favorite of a specific UDF
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UDFFavorite</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<UDFFavorite> GetUDFFavoriteWithHttpInfo(string _namespace, string name, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->GetUDFFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->GetUDFFavorite");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetUDFFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UDFFavorite>("/udfs/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUDFFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch UDF favorite of a specific UDF
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UDFFavorite</returns>
        public async System.Threading.Tasks.Task<UDFFavorite> GetUDFFavoriteAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<UDFFavorite> localVarResponse = await GetUDFFavoriteWithHttpInfoAsync(_namespace, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch UDF favorite of a specific UDF
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the UDF</param>
        /// <param name="name">The name of the UDF</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UDFFavorite)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<UDFFavorite>> GetUDFFavoriteWithHttpInfoAsync(string _namespace, string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FavoritesApi->GetUDFFavorite");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'name' when calling FavoritesApi->GetUDFFavorite");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "FavoritesApi.GetUDFFavorite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UDFFavorite>("/udfs/favorites/{namespace}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUDFFavorite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a page of array favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArrayFavoritesData</returns>
        public ArrayFavoritesData ListArrayFavorites(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayFavoritesData> localVarResponse = ListArrayFavoritesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a page of array favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArrayFavoritesData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<ArrayFavoritesData> ListArrayFavoritesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "FavoritesApi.ListArrayFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ArrayFavoritesData>("/arrays/favorites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListArrayFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a page of array favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArrayFavoritesData</returns>
        public async System.Threading.Tasks.Task<ArrayFavoritesData> ListArrayFavoritesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<ArrayFavoritesData> localVarResponse = await ListArrayFavoritesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a page of array favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArrayFavoritesData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<ArrayFavoritesData>> ListArrayFavoritesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "FavoritesApi.ListArrayFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArrayFavoritesData>("/arrays/favorites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListArrayFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch all favorite array uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArrayFavorite&gt;</returns>
        public List<ArrayFavorite> ListArrayFavoritesUUIDs(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayFavorite>> localVarResponse = ListArrayFavoritesUUIDsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch all favorite array uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArrayFavorite&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayFavorite>> ListArrayFavoritesUUIDsWithHttpInfo(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.ListArrayFavoritesUUIDs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArrayFavorite>>("/arrays/favorites/uuids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListArrayFavoritesUUIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch all favorite array uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArrayFavorite&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArrayFavorite>> ListArrayFavoritesUUIDsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayFavorite>> localVarResponse = await ListArrayFavoritesUUIDsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch all favorite array uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArrayFavorite&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<ArrayFavorite>>> ListArrayFavoritesUUIDsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.ListArrayFavoritesUUIDs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArrayFavorite>>("/arrays/favorites/uuids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListArrayFavoritesUUIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a page of ML models favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MLModelFavoritesData</returns>
        public MLModelFavoritesData ListMLModelFavorites(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<MLModelFavoritesData> localVarResponse = ListMLModelFavoritesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a page of ML models favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MLModelFavoritesData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<MLModelFavoritesData> ListMLModelFavoritesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "FavoritesApi.ListMLModelFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MLModelFavoritesData>("/ml_models/favorites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMLModelFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a page of ML models favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MLModelFavoritesData</returns>
        public async System.Threading.Tasks.Task<MLModelFavoritesData> ListMLModelFavoritesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<MLModelFavoritesData> localVarResponse = await ListMLModelFavoritesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a page of ML models favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MLModelFavoritesData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<MLModelFavoritesData>> ListMLModelFavoritesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "FavoritesApi.ListMLModelFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MLModelFavoritesData>("/ml_models/favorites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMLModelFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch all favorite ML models uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MLModelFavorite&gt;</returns>
        public List<MLModelFavorite> ListMLModelFavoritesUUIDs(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<MLModelFavorite>> localVarResponse = ListMLModelFavoritesUUIDsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch all favorite ML models uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MLModelFavorite&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<MLModelFavorite>> ListMLModelFavoritesUUIDsWithHttpInfo(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.ListMLModelFavoritesUUIDs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MLModelFavorite>>("/ml_models/favorites/uuids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMLModelFavoritesUUIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch all favorite ML models uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MLModelFavorite&gt;</returns>
        public async System.Threading.Tasks.Task<List<MLModelFavorite>> ListMLModelFavoritesUUIDsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<MLModelFavorite>> localVarResponse = await ListMLModelFavoritesUUIDsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch all favorite ML models uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MLModelFavorite&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<MLModelFavorite>>> ListMLModelFavoritesUUIDsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.ListMLModelFavoritesUUIDs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MLModelFavorite>>("/ml_models/favorites/uuids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMLModelFavoritesUUIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a page of notebook favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDashboard">return only dashboards (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotebookFavoritesData</returns>
        public NotebookFavoritesData ListNotebookFavorites(bool? isDashboard = default(bool?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<NotebookFavoritesData> localVarResponse = ListNotebookFavoritesWithHttpInfo(isDashboard, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a page of notebook favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDashboard">return only dashboards (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotebookFavoritesData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<NotebookFavoritesData> ListNotebookFavoritesWithHttpInfo(bool? isDashboard = default(bool?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isDashboard != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "is_dashboard", isDashboard));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "FavoritesApi.ListNotebookFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotebookFavoritesData>("/notebooks/favorites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotebookFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a page of notebook favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDashboard">return only dashboards (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotebookFavoritesData</returns>
        public async System.Threading.Tasks.Task<NotebookFavoritesData> ListNotebookFavoritesAsync(bool? isDashboard = default(bool?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<NotebookFavoritesData> localVarResponse = await ListNotebookFavoritesWithHttpInfoAsync(isDashboard, page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a page of notebook favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isDashboard">return only dashboards (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotebookFavoritesData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<NotebookFavoritesData>> ListNotebookFavoritesWithHttpInfoAsync(bool? isDashboard = default(bool?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isDashboard != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "is_dashboard", isDashboard));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "FavoritesApi.ListNotebookFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotebookFavoritesData>("/notebooks/favorites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotebookFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch all favorite notebook uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotebookFavorite&gt;</returns>
        public List<NotebookFavorite> ListNotebookFavoritesUUIDs(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<NotebookFavorite>> localVarResponse = ListNotebookFavoritesUUIDsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch all favorite notebook uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotebookFavorite&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<NotebookFavorite>> ListNotebookFavoritesUUIDsWithHttpInfo(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.ListNotebookFavoritesUUIDs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<NotebookFavorite>>("/notebooks/favorites/uuids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotebookFavoritesUUIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch all favorite notebook uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotebookFavorite&gt;</returns>
        public async System.Threading.Tasks.Task<List<NotebookFavorite>> ListNotebookFavoritesUUIDsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<NotebookFavorite>> localVarResponse = await ListNotebookFavoritesUUIDsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch all favorite notebook uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotebookFavorite&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<NotebookFavorite>>> ListNotebookFavoritesUUIDsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.ListNotebookFavoritesUUIDs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<NotebookFavorite>>("/notebooks/favorites/uuids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotebookFavoritesUUIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a page of UDF favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UDFFavoritesData</returns>
        public UDFFavoritesData ListUDFFavorites(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<UDFFavoritesData> localVarResponse = ListUDFFavoritesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a page of UDF favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UDFFavoritesData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<UDFFavoritesData> ListUDFFavoritesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "FavoritesApi.ListUDFFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UDFFavoritesData>("/udfs/favorites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUDFFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch a page of UDF favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UDFFavoritesData</returns>
        public async System.Threading.Tasks.Task<UDFFavoritesData> ListUDFFavoritesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<UDFFavoritesData> localVarResponse = await ListUDFFavoritesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a page of UDF favorites of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UDFFavoritesData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<UDFFavoritesData>> ListUDFFavoritesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "FavoritesApi.ListUDFFavorites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UDFFavoritesData>("/udfs/favorites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUDFFavorites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch all favorite UDF uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UDFFavorite&gt;</returns>
        public List<UDFFavorite> ListUDFFavoritesUUIDs(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<UDFFavorite>> localVarResponse = ListUDFFavoritesUUIDsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch all favorite UDF uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UDFFavorite&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<UDFFavorite>> ListUDFFavoritesUUIDsWithHttpInfo(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.ListUDFFavoritesUUIDs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UDFFavorite>>("/udfs/favorites/uuids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUDFFavoritesUUIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch all favorite UDF uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UDFFavorite&gt;</returns>
        public async System.Threading.Tasks.Task<List<UDFFavorite>> ListUDFFavoritesUUIDsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<UDFFavorite>> localVarResponse = await ListUDFFavoritesUUIDsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch all favorite UDF uuids of connected user
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UDFFavorite&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<UDFFavorite>>> ListUDFFavoritesUUIDsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FavoritesApi.ListUDFFavoritesUUIDs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UDFFavorite>>("/udfs/favorites/uuids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUDFFavoritesUUIDs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
