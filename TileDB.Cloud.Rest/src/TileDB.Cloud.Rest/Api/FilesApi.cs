/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a tiledb file at the specified location
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="fileCreate">Input/Output information to create a new TileDB file</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileCreated</returns>
        FileCreated HandleCreateFile(string _namespace, FileCreate fileCreate, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a tiledb file at the specified location
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="fileCreate">Input/Output information to create a new TileDB file</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileCreated</returns>
        ApiResponse<FileCreated> HandleCreateFileWithHttpInfo(string _namespace, FileCreate fileCreate, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Export a TileDB File back to its original file format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="file">The file identifier</param>
        /// <param name="fileExport">Export configuration information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileExported</returns>
        FileExported HandleExportFile(string _namespace, string file, FileExport fileExport, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Export a TileDB File back to its original file format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="file">The file identifier</param>
        /// <param name="fileExport">Export configuration information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileExported</returns>
        ApiResponse<FileExported> HandleExportFileWithHttpInfo(string _namespace, string file, FileExport fileExport, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a tiledb file at the specified location
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="inputFile">the file to upload</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="outputUri">output location of the TileDB File (optional)</param>
        /// <param name="name">name to set for registered file (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileUploaded</returns>
        FileUploaded HandleUploadFile(string _namespace, System.IO.Stream inputFile, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), string outputUri = default(string), string name = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a tiledb file at the specified location
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="inputFile">the file to upload</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="outputUri">output location of the TileDB File (optional)</param>
        /// <param name="name">name to set for registered file (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileUploaded</returns>
        ApiResponse<FileUploaded> HandleUploadFileWithHttpInfo(string _namespace, System.IO.Stream inputFile, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), string outputUri = default(string), string name = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a tiledb file at the specified location
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="fileCreate">Input/Output information to create a new TileDB file</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileCreated</returns>
        System.Threading.Tasks.Task<FileCreated> HandleCreateFileAsync(string _namespace, FileCreate fileCreate, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a tiledb file at the specified location
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="fileCreate">Input/Output information to create a new TileDB file</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileCreated)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileCreated>> HandleCreateFileWithHttpInfoAsync(string _namespace, FileCreate fileCreate, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Export a TileDB File back to its original file format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="file">The file identifier</param>
        /// <param name="fileExport">Export configuration information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileExported</returns>
        System.Threading.Tasks.Task<FileExported> HandleExportFileAsync(string _namespace, string file, FileExport fileExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Export a TileDB File back to its original file format
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="file">The file identifier</param>
        /// <param name="fileExport">Export configuration information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileExported)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileExported>> HandleExportFileWithHttpInfoAsync(string _namespace, string file, FileExport fileExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a tiledb file at the specified location
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="inputFile">the file to upload</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="outputUri">output location of the TileDB File (optional)</param>
        /// <param name="name">name to set for registered file (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUploaded</returns>
        System.Threading.Tasks.Task<FileUploaded> HandleUploadFileAsync(string _namespace, System.IO.Stream inputFile, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), string outputUri = default(string), string name = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a tiledb file at the specified location
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="inputFile">the file to upload</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="outputUri">output location of the TileDB File (optional)</param>
        /// <param name="name">name to set for registered file (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUploaded)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUploaded>> HandleUploadFileWithHttpInfoAsync(string _namespace, System.IO.Stream inputFile, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), string outputUri = default(string), string name = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IFilesApiSync, IFilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(string basePath)
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(TileDB.Cloud.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilesApi(TileDB.Cloud.Rest.Client.ISynchronousClient client, TileDB.Cloud.Rest.Client.IAsynchronousClient asyncClient, TileDB.Cloud.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a tiledb file at the specified location
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="fileCreate">Input/Output information to create a new TileDB file</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileCreated</returns>
        public FileCreated HandleCreateFile(string _namespace, FileCreate fileCreate, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<FileCreated> localVarResponse = HandleCreateFileWithHttpInfo(_namespace, fileCreate, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a tiledb file at the specified location
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="fileCreate">Input/Output information to create a new TileDB file</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileCreated</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<FileCreated> HandleCreateFileWithHttpInfo(string _namespace, FileCreate fileCreate, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FilesApi->HandleCreateFile");
            }

            // verify the required parameter 'fileCreate' is set
            if (fileCreate == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'fileCreate' when calling FilesApi->HandleCreateFile");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME)); // header parameter
            }
            localVarRequestOptions.Data = fileCreate;

            localVarRequestOptions.Operation = "FilesApi.HandleCreateFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileCreated>("/files/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleCreateFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a tiledb file at the specified location
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="fileCreate">Input/Output information to create a new TileDB file</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileCreated</returns>
        public async System.Threading.Tasks.Task<FileCreated> HandleCreateFileAsync(string _namespace, FileCreate fileCreate, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<FileCreated> localVarResponse = await HandleCreateFileWithHttpInfoAsync(_namespace, fileCreate, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a tiledb file at the specified location
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="fileCreate">Input/Output information to create a new TileDB file</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileCreated)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<FileCreated>> HandleCreateFileWithHttpInfoAsync(string _namespace, FileCreate fileCreate, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FilesApi->HandleCreateFile");
            }

            // verify the required parameter 'fileCreate' is set
            if (fileCreate == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'fileCreate' when calling FilesApi->HandleCreateFile");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME)); // header parameter
            }
            localVarRequestOptions.Data = fileCreate;

            localVarRequestOptions.Operation = "FilesApi.HandleCreateFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FileCreated>("/files/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleCreateFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Export a TileDB File back to its original file format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="file">The file identifier</param>
        /// <param name="fileExport">Export configuration information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileExported</returns>
        public FileExported HandleExportFile(string _namespace, string file, FileExport fileExport, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<FileExported> localVarResponse = HandleExportFileWithHttpInfo(_namespace, file, fileExport);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Export a TileDB File back to its original file format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="file">The file identifier</param>
        /// <param name="fileExport">Export configuration information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileExported</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<FileExported> HandleExportFileWithHttpInfo(string _namespace, string file, FileExport fileExport, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FilesApi->HandleExportFile");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'file' when calling FilesApi->HandleExportFile");
            }

            // verify the required parameter 'fileExport' is set
            if (fileExport == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'fileExport' when calling FilesApi->HandleExportFile");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("file", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(file)); // path parameter
            localVarRequestOptions.Data = fileExport;

            localVarRequestOptions.Operation = "FilesApi.HandleExportFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileExported>("/files/{namespace}/{file}/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleExportFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Export a TileDB File back to its original file format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="file">The file identifier</param>
        /// <param name="fileExport">Export configuration information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileExported</returns>
        public async System.Threading.Tasks.Task<FileExported> HandleExportFileAsync(string _namespace, string file, FileExport fileExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<FileExported> localVarResponse = await HandleExportFileWithHttpInfoAsync(_namespace, file, fileExport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Export a TileDB File back to its original file format
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="file">The file identifier</param>
        /// <param name="fileExport">Export configuration information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileExported)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<FileExported>> HandleExportFileWithHttpInfoAsync(string _namespace, string file, FileExport fileExport, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FilesApi->HandleExportFile");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'file' when calling FilesApi->HandleExportFile");
            }

            // verify the required parameter 'fileExport' is set
            if (fileExport == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'fileExport' when calling FilesApi->HandleExportFile");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("file", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(file)); // path parameter
            localVarRequestOptions.Data = fileExport;

            localVarRequestOptions.Operation = "FilesApi.HandleExportFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FileExported>("/files/{namespace}/{file}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleExportFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload a tiledb file at the specified location
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="inputFile">the file to upload</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="outputUri">output location of the TileDB File (optional)</param>
        /// <param name="name">name to set for registered file (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileUploaded</returns>
        public FileUploaded HandleUploadFile(string _namespace, System.IO.Stream inputFile, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), string outputUri = default(string), string name = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<FileUploaded> localVarResponse = HandleUploadFileWithHttpInfo(_namespace, inputFile, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, outputUri, name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a tiledb file at the specified location
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="inputFile">the file to upload</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="outputUri">output location of the TileDB File (optional)</param>
        /// <param name="name">name to set for registered file (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileUploaded</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<FileUploaded> HandleUploadFileWithHttpInfo(string _namespace, System.IO.Stream inputFile, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), string outputUri = default(string), string name = default(string), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FilesApi->HandleUploadFile");
            }

            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'inputFile' when calling FilesApi->HandleUploadFile");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("input_file", inputFile);
            if (outputUri != null)
            {
                localVarRequestOptions.FormParameters.Add("output_uri", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(outputUri)); // form parameter
            }
            if (name != null)
            {
                localVarRequestOptions.FormParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // form parameter
            }

            localVarRequestOptions.Operation = "FilesApi.HandleUploadFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileUploaded>("/files/{namespace}/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleUploadFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload a tiledb file at the specified location
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="inputFile">the file to upload</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="outputUri">output location of the TileDB File (optional)</param>
        /// <param name="name">name to set for registered file (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileUploaded</returns>
        public async System.Threading.Tasks.Task<FileUploaded> HandleUploadFileAsync(string _namespace, System.IO.Stream inputFile, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), string outputUri = default(string), string name = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<FileUploaded> localVarResponse = await HandleUploadFileWithHttpInfoAsync(_namespace, inputFile, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, outputUri, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a tiledb file at the specified location
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the file</param>
        /// <param name="inputFile">the file to upload</param>
        /// <param name="X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME">Optional registered access credentials to use for creation (optional)</param>
        /// <param name="outputUri">output location of the TileDB File (optional)</param>
        /// <param name="name">name to set for registered file (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileUploaded)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<FileUploaded>> HandleUploadFileWithHttpInfoAsync(string _namespace, System.IO.Stream inputFile, string X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = default(string), string outputUri = default(string), string name = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling FilesApi->HandleUploadFile");
            }

            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'inputFile' when calling FilesApi->HandleUploadFile");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("input_file", inputFile);
            if (outputUri != null)
            {
                localVarRequestOptions.FormParameters.Add("output_uri", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(outputUri)); // form parameter
            }
            if (name != null)
            {
                localVarRequestOptions.FormParameters.Add("name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(name)); // form parameter
            }

            localVarRequestOptions.Operation = "FilesApi.HandleUploadFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FileUploaded>("/files/{namespace}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleUploadFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
