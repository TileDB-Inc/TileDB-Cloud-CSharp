/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskGraphLogsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a task graph log.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that will own this task graph log.</param>
        /// <param name="log"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaskGraphLog</returns>
        TaskGraphLog CreateTaskGraphLog(string _namespace, TaskGraphLog log, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a task graph log.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that will own this task graph log.</param>
        /// <param name="log"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaskGraphLog</returns>
        ApiResponse<TaskGraphLog> CreateTaskGraphLogWithHttpInfo(string _namespace, TaskGraphLog log, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch information about a single task graph execution. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaskGraphLog</returns>
        TaskGraphLog GetTaskGraphLog(string _namespace, string id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch information about a single task graph execution. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaskGraphLog</returns>
        ApiResponse<TaskGraphLog> GetTaskGraphLogWithHttpInfo(string _namespace, string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Include logs for this namespace. (optional)</param>
        /// <param name="createdBy">Include logs from only this user. (optional)</param>
        /// <param name="search">search string that will look at name. (optional)</param>
        /// <param name="startTime">Include logs created after this time. (optional)</param>
        /// <param name="endTime">Include logs created before this time. (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaskGraphLogsData</returns>
        TaskGraphLogsData ListTaskGraphLogs(string _namespace = default(string), string createdBy = default(string), string search = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Include logs for this namespace. (optional)</param>
        /// <param name="createdBy">Include logs from only this user. (optional)</param>
        /// <param name="search">search string that will look at name. (optional)</param>
        /// <param name="startTime">Include logs created after this time. (optional)</param>
        /// <param name="endTime">Include logs created before this time. (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaskGraphLogsData</returns>
        ApiResponse<TaskGraphLogsData> ListTaskGraphLogsWithHttpInfo(string _namespace = default(string), string createdBy = default(string), string search = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="report">The node status to report.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ReportClientNode(string _namespace, string id, TaskGraphClientNodeStatus report, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="report">The node status to report.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReportClientNodeWithHttpInfo(string _namespace, string id, TaskGraphClientNodeStatus report, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update information about a single task graph execution. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="log">Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTaskGraphLog(string _namespace, string id, TaskGraphLog log, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update information about a single task graph execution. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="log">Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTaskGraphLogWithHttpInfo(string _namespace, string id, TaskGraphLog log, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskGraphLogsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a task graph log.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that will own this task graph log.</param>
        /// <param name="log"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskGraphLog</returns>
        System.Threading.Tasks.Task<TaskGraphLog> CreateTaskGraphLogAsync(string _namespace, TaskGraphLog log, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a task graph log.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that will own this task graph log.</param>
        /// <param name="log"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskGraphLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskGraphLog>> CreateTaskGraphLogWithHttpInfoAsync(string _namespace, TaskGraphLog log, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch information about a single task graph execution. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskGraphLog</returns>
        System.Threading.Tasks.Task<TaskGraphLog> GetTaskGraphLogAsync(string _namespace, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch information about a single task graph execution. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskGraphLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskGraphLog>> GetTaskGraphLogWithHttpInfoAsync(string _namespace, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Include logs for this namespace. (optional)</param>
        /// <param name="createdBy">Include logs from only this user. (optional)</param>
        /// <param name="search">search string that will look at name. (optional)</param>
        /// <param name="startTime">Include logs created after this time. (optional)</param>
        /// <param name="endTime">Include logs created before this time. (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskGraphLogsData</returns>
        System.Threading.Tasks.Task<TaskGraphLogsData> ListTaskGraphLogsAsync(string _namespace = default(string), string createdBy = default(string), string search = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Include logs for this namespace. (optional)</param>
        /// <param name="createdBy">Include logs from only this user. (optional)</param>
        /// <param name="search">search string that will look at name. (optional)</param>
        /// <param name="startTime">Include logs created after this time. (optional)</param>
        /// <param name="endTime">Include logs created before this time. (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskGraphLogsData)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskGraphLogsData>> ListTaskGraphLogsWithHttpInfoAsync(string _namespace = default(string), string createdBy = default(string), string search = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="report">The node status to report.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReportClientNodeAsync(string _namespace, string id, TaskGraphClientNodeStatus report, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="report">The node status to report.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReportClientNodeWithHttpInfoAsync(string _namespace, string id, TaskGraphClientNodeStatus report, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update information about a single task graph execution. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="log">Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTaskGraphLogAsync(string _namespace, string id, TaskGraphLog log, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update information about a single task graph execution. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="log">Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTaskGraphLogWithHttpInfoAsync(string _namespace, string id, TaskGraphLog log, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskGraphLogsApi : ITaskGraphLogsApiSync, ITaskGraphLogsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskGraphLogsApi : ITaskGraphLogsApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGraphLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskGraphLogsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGraphLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskGraphLogsApi(string basePath)
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGraphLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskGraphLogsApi(TileDB.Cloud.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGraphLogsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaskGraphLogsApi(TileDB.Cloud.Rest.Client.ISynchronousClient client, TileDB.Cloud.Rest.Client.IAsynchronousClient asyncClient, TileDB.Cloud.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a task graph log.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that will own this task graph log.</param>
        /// <param name="log"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaskGraphLog</returns>
        public TaskGraphLog CreateTaskGraphLog(string _namespace, TaskGraphLog log, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLog> localVarResponse = CreateTaskGraphLogWithHttpInfo(_namespace, log);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a task graph log.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that will own this task graph log.</param>
        /// <param name="log"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaskGraphLog</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLog> CreateTaskGraphLogWithHttpInfo(string _namespace, TaskGraphLog log, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling TaskGraphLogsApi->CreateTaskGraphLog");
            }

            // verify the required parameter 'log' is set
            if (log == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'log' when calling TaskGraphLogsApi->CreateTaskGraphLog");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.Data = log;

            localVarRequestOptions.Operation = "TaskGraphLogsApi.CreateTaskGraphLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskGraphLog>("/taskgraphs/{namespace}/log", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskGraphLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a task graph log.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that will own this task graph log.</param>
        /// <param name="log"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskGraphLog</returns>
        public async System.Threading.Tasks.Task<TaskGraphLog> CreateTaskGraphLogAsync(string _namespace, TaskGraphLog log, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLog> localVarResponse = await CreateTaskGraphLogWithHttpInfoAsync(_namespace, log, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a task graph log.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that will own this task graph log.</param>
        /// <param name="log"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskGraphLog)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLog>> CreateTaskGraphLogWithHttpInfoAsync(string _namespace, TaskGraphLog log, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling TaskGraphLogsApi->CreateTaskGraphLog");
            }

            // verify the required parameter 'log' is set
            if (log == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'log' when calling TaskGraphLogsApi->CreateTaskGraphLog");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.Data = log;

            localVarRequestOptions.Operation = "TaskGraphLogsApi.CreateTaskGraphLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskGraphLog>("/taskgraphs/{namespace}/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskGraphLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch information about a single task graph execution. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaskGraphLog</returns>
        public TaskGraphLog GetTaskGraphLog(string _namespace, string id, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLog> localVarResponse = GetTaskGraphLogWithHttpInfo(_namespace, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch information about a single task graph execution. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaskGraphLog</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLog> GetTaskGraphLogWithHttpInfo(string _namespace, string id, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling TaskGraphLogsApi->GetTaskGraphLog");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling TaskGraphLogsApi->GetTaskGraphLog");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TaskGraphLogsApi.GetTaskGraphLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskGraphLog>("/taskgraphs/{namespace}/logs/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskGraphLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch information about a single task graph execution. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskGraphLog</returns>
        public async System.Threading.Tasks.Task<TaskGraphLog> GetTaskGraphLogAsync(string _namespace, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLog> localVarResponse = await GetTaskGraphLogWithHttpInfoAsync(_namespace, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch information about a single task graph execution. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskGraphLog)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLog>> GetTaskGraphLogWithHttpInfoAsync(string _namespace, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling TaskGraphLogsApi->GetTaskGraphLog");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling TaskGraphLogsApi->GetTaskGraphLog");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TaskGraphLogsApi.GetTaskGraphLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskGraphLog>("/taskgraphs/{namespace}/logs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskGraphLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Include logs for this namespace. (optional)</param>
        /// <param name="createdBy">Include logs from only this user. (optional)</param>
        /// <param name="search">search string that will look at name. (optional)</param>
        /// <param name="startTime">Include logs created after this time. (optional)</param>
        /// <param name="endTime">Include logs created before this time. (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaskGraphLogsData</returns>
        public TaskGraphLogsData ListTaskGraphLogs(string _namespace = default(string), string createdBy = default(string), string search = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLogsData> localVarResponse = ListTaskGraphLogsWithHttpInfo(_namespace, createdBy, search, startTime, endTime, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Include logs for this namespace. (optional)</param>
        /// <param name="createdBy">Include logs from only this user. (optional)</param>
        /// <param name="search">search string that will look at name. (optional)</param>
        /// <param name="startTime">Include logs created after this time. (optional)</param>
        /// <param name="endTime">Include logs created before this time. (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaskGraphLogsData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLogsData> ListTaskGraphLogsWithHttpInfo(string _namespace = default(string), string createdBy = default(string), string search = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (createdBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "created_by", createdBy));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "start_time", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "end_time", endTime));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "TaskGraphLogsApi.ListTaskGraphLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskGraphLogsData>("/taskgraphs/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTaskGraphLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Include logs for this namespace. (optional)</param>
        /// <param name="createdBy">Include logs from only this user. (optional)</param>
        /// <param name="search">search string that will look at name. (optional)</param>
        /// <param name="startTime">Include logs created after this time. (optional)</param>
        /// <param name="endTime">Include logs created before this time. (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskGraphLogsData</returns>
        public async System.Threading.Tasks.Task<TaskGraphLogsData> ListTaskGraphLogsAsync(string _namespace = default(string), string createdBy = default(string), string search = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLogsData> localVarResponse = await ListTaskGraphLogsWithHttpInfoAsync(_namespace, createdBy, search, startTime, endTime, page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Include logs for this namespace. (optional)</param>
        /// <param name="createdBy">Include logs from only this user. (optional)</param>
        /// <param name="search">search string that will look at name. (optional)</param>
        /// <param name="startTime">Include logs created after this time. (optional)</param>
        /// <param name="endTime">Include logs created before this time. (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskGraphLogsData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<TaskGraphLogsData>> ListTaskGraphLogsWithHttpInfoAsync(string _namespace = default(string), string createdBy = default(string), string search = default(string), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (createdBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "created_by", createdBy));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "start_time", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "end_time", endTime));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "TaskGraphLogsApi.ListTaskGraphLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskGraphLogsData>("/taskgraphs/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTaskGraphLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="report">The node status to report.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ReportClientNode(string _namespace, string id, TaskGraphClientNodeStatus report, int operationIndex = 0)
        {
            ReportClientNodeWithHttpInfo(_namespace, id, report);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="report">The node status to report.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> ReportClientNodeWithHttpInfo(string _namespace, string id, TaskGraphClientNodeStatus report, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling TaskGraphLogsApi->ReportClientNode");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling TaskGraphLogsApi->ReportClientNode");
            }

            // verify the required parameter 'report' is set
            if (report == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'report' when calling TaskGraphLogsApi->ReportClientNode");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = report;

            localVarRequestOptions.Operation = "TaskGraphLogsApi.ReportClientNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/taskgraphs/{namespace}/logs/{id}/report_client_node", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReportClientNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="report">The node status to report.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReportClientNodeAsync(string _namespace, string id, TaskGraphClientNodeStatus report, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReportClientNodeWithHttpInfoAsync(_namespace, id, report, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="report">The node status to report.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> ReportClientNodeWithHttpInfoAsync(string _namespace, string id, TaskGraphClientNodeStatus report, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling TaskGraphLogsApi->ReportClientNode");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling TaskGraphLogsApi->ReportClientNode");
            }

            // verify the required parameter 'report' is set
            if (report == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'report' when calling TaskGraphLogsApi->ReportClientNode");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = report;

            localVarRequestOptions.Operation = "TaskGraphLogsApi.ReportClientNode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/taskgraphs/{namespace}/logs/{id}/report_client_node", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReportClientNode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update information about a single task graph execution. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="log">Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTaskGraphLog(string _namespace, string id, TaskGraphLog log, int operationIndex = 0)
        {
            UpdateTaskGraphLogWithHttpInfo(_namespace, id, log);
        }

        /// <summary>
        ///  Update information about a single task graph execution. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="log">Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> UpdateTaskGraphLogWithHttpInfo(string _namespace, string id, TaskGraphLog log, int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling TaskGraphLogsApi->UpdateTaskGraphLog");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling TaskGraphLogsApi->UpdateTaskGraphLog");
            }

            // verify the required parameter 'log' is set
            if (log == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'log' when calling TaskGraphLogsApi->UpdateTaskGraphLog");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = log;

            localVarRequestOptions.Operation = "TaskGraphLogsApi.UpdateTaskGraphLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/taskgraphs/{namespace}/logs/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskGraphLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update information about a single task graph execution. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="log">Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTaskGraphLogAsync(string _namespace, string id, TaskGraphLog log, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTaskGraphLogWithHttpInfoAsync(_namespace, id, log, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Update information about a single task graph execution. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this task graph log.</param>
        /// <param name="id">The UUID of the task graph log entry.</param>
        /// <param name="log">Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> UpdateTaskGraphLogWithHttpInfoAsync(string _namespace, string id, TaskGraphLog log, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling TaskGraphLogsApi->UpdateTaskGraphLog");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'id' when calling TaskGraphLogsApi->UpdateTaskGraphLog");
            }

            // verify the required parameter 'log' is set
            if (log == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'log' when calling TaskGraphLogsApi->UpdateTaskGraphLog");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = log;

            localVarRequestOptions.Operation = "TaskGraphLogsApi.UpdateTaskGraphLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/taskgraphs/{namespace}/logs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskGraphLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
