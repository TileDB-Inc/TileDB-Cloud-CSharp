/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegisteredTaskGraphsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the given registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <returns></returns>
        void DeleteRegisteredTaskGraph (string _namespace, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the given registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRegisteredTaskGraphWithHttpInfo (string _namespace, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch the contents of this registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <returns>RegisteredTaskGraph</returns>
        RegisteredTaskGraph GetRegisteredTaskGraph (string _namespace, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch the contents of this registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <returns>ApiResponse of RegisteredTaskGraph</returns>
        ApiResponse<RegisteredTaskGraph> GetRegisteredTaskGraphWithHttpInfo (string _namespace, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get sharing policies for the task graph.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <returns>List<TaskGraphSharing></returns>
        List<TaskGraphSharing> GetRegisteredTaskGraphSharingPolicies (string _namespace, string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get sharing policies for the task graph.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <returns>ApiResponse of List<TaskGraphSharing></returns>
        ApiResponse<List<TaskGraphSharing>> GetRegisteredTaskGraphSharingPoliciesWithHttpInfo (string _namespace, string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register a task graph in the given namespace, with the given name. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">Task graph to register. (optional)</param>
        /// <returns></returns>
        void RegisterRegisteredTaskGraph (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register a task graph in the given namespace, with the given name. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">Task graph to register. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterRegisteredTaskGraphWithHttpInfo (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a task graph.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="taskGraphSharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the UDF will not be shared with the namespace at all. </param>
        /// <returns></returns>
        void ShareRegisteredTaskGraph (string _namespace, string name, TaskGraphSharing taskGraphSharing);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a task graph.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="taskGraphSharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the UDF will not be shared with the namespace at all. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ShareRegisteredTaskGraphWithHttpInfo (string _namespace, string name, TaskGraphSharing taskGraphSharing);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the contents of an existing registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">The new contents of the task graph. (optional)</param>
        /// <returns></returns>
        void UpdateRegisteredTaskGraph (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the contents of an existing registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">The new contents of the task graph. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRegisteredTaskGraphWithHttpInfo (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the given registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRegisteredTaskGraphAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the given registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch the contents of this registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RegisteredTaskGraph</returns>
        System.Threading.Tasks.Task<RegisteredTaskGraph> GetRegisteredTaskGraphAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch the contents of this registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RegisteredTaskGraph)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisteredTaskGraph>> GetRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get sharing policies for the task graph.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TaskGraphSharing></returns>
        System.Threading.Tasks.Task<List<TaskGraphSharing>> GetRegisteredTaskGraphSharingPoliciesAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get sharing policies for the task graph.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TaskGraphSharing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskGraphSharing>>> GetRegisteredTaskGraphSharingPoliciesWithHttpInfoAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register a task graph in the given namespace, with the given name. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">Task graph to register. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterRegisteredTaskGraphAsync (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Register a task graph in the given namespace, with the given name. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">Task graph to register. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a task graph.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="taskGraphSharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the UDF will not be shared with the namespace at all. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ShareRegisteredTaskGraphAsync (string _namespace, string name, TaskGraphSharing taskGraphSharing, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a task graph.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="taskGraphSharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the UDF will not be shared with the namespace at all. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShareRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, TaskGraphSharing taskGraphSharing, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the contents of an existing registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">The new contents of the task graph. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRegisteredTaskGraphAsync (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the contents of an existing registered task graph. 
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">The new contents of the task graph. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegisteredTaskGraphsApi : IRegisteredTaskGraphsApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisteredTaskGraphsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegisteredTaskGraphsApi(String basePath)
        {
            this.Configuration = new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisteredTaskGraphsApi"/> class
        /// </summary>
        /// <returns></returns>
        public RegisteredTaskGraphsApi()
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegisteredTaskGraphsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegisteredTaskGraphsApi(TileDB.Cloud.Rest.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Delete the given registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <returns></returns>
        public void DeleteRegisteredTaskGraph (string _namespace, string name)
        {
             DeleteRegisteredTaskGraphWithHttpInfo(_namespace, name);
        }

        /// <summary>
        ///  Delete the given registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRegisteredTaskGraphWithHttpInfo (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->DeleteRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->DeleteRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete the given registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRegisteredTaskGraphAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteRegisteredTaskGraphWithHttpInfoAsync(_namespace, name, cancellationToken);

        }

        /// <summary>
        ///  Delete the given registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->DeleteRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->DeleteRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Fetch the contents of this registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <returns>RegisteredTaskGraph</returns>
        public RegisteredTaskGraph GetRegisteredTaskGraph (string _namespace, string name)
        {
             ApiResponse<RegisteredTaskGraph> localVarResponse = GetRegisteredTaskGraphWithHttpInfo(_namespace, name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch the contents of this registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <returns>ApiResponse of RegisteredTaskGraph</returns>
        public ApiResponse<RegisteredTaskGraph> GetRegisteredTaskGraphWithHttpInfo (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->GetRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->GetRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisteredTaskGraph>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RegisteredTaskGraph) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisteredTaskGraph)));
        }

        /// <summary>
        ///  Fetch the contents of this registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RegisteredTaskGraph</returns>
        public async System.Threading.Tasks.Task<RegisteredTaskGraph> GetRegisteredTaskGraphAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RegisteredTaskGraph> localVarResponse = await GetRegisteredTaskGraphWithHttpInfoAsync(_namespace, name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch the contents of this registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RegisteredTaskGraph)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegisteredTaskGraph>> GetRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->GetRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->GetRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegisteredTaskGraph>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RegisteredTaskGraph) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegisteredTaskGraph)));
        }

        /// <summary>
        ///  Get sharing policies for the task graph.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <returns>List<TaskGraphSharing></returns>
        public List<TaskGraphSharing> GetRegisteredTaskGraphSharingPolicies (string _namespace, string name)
        {
             ApiResponse<List<TaskGraphSharing>> localVarResponse = GetRegisteredTaskGraphSharingPoliciesWithHttpInfo(_namespace, name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get sharing policies for the task graph.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <returns>ApiResponse of List<TaskGraphSharing></returns>
        public ApiResponse<List<TaskGraphSharing>> GetRegisteredTaskGraphSharingPoliciesWithHttpInfo (string _namespace, string name)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->GetRegisteredTaskGraphSharingPolicies");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->GetRegisteredTaskGraphSharingPolicies");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegisteredTaskGraphSharingPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskGraphSharing>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskGraphSharing>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskGraphSharing>)));
        }

        /// <summary>
        ///  Get sharing policies for the task graph.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TaskGraphSharing></returns>
        public async System.Threading.Tasks.Task<List<TaskGraphSharing>> GetRegisteredTaskGraphSharingPoliciesAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TaskGraphSharing>> localVarResponse = await GetRegisteredTaskGraphSharingPoliciesWithHttpInfoAsync(_namespace, name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get sharing policies for the task graph.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TaskGraphSharing&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskGraphSharing>>> GetRegisteredTaskGraphSharingPoliciesWithHttpInfoAsync (string _namespace, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->GetRegisteredTaskGraphSharingPolicies");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->GetRegisteredTaskGraphSharingPolicies");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegisteredTaskGraphSharingPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskGraphSharing>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TaskGraphSharing>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskGraphSharing>)));
        }

        /// <summary>
        ///  Register a task graph in the given namespace, with the given name. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">Task graph to register. (optional)</param>
        /// <returns></returns>
        public void RegisterRegisteredTaskGraph (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph))
        {
             RegisterRegisteredTaskGraphWithHttpInfo(_namespace, name, graph);
        }

        /// <summary>
        ///  Register a task graph in the given namespace, with the given name. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">Task graph to register. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterRegisteredTaskGraphWithHttpInfo (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->RegisterRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->RegisterRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (graph != null && graph.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(graph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = graph; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Register a task graph in the given namespace, with the given name. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">Task graph to register. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterRegisteredTaskGraphAsync (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RegisterRegisteredTaskGraphWithHttpInfoAsync(_namespace, name, graph, cancellationToken);

        }

        /// <summary>
        ///  Register a task graph in the given namespace, with the given name. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">Task graph to register. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->RegisterRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->RegisterRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (graph != null && graph.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(graph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = graph; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Share a task graph.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="taskGraphSharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the UDF will not be shared with the namespace at all. </param>
        /// <returns></returns>
        public void ShareRegisteredTaskGraph (string _namespace, string name, TaskGraphSharing taskGraphSharing)
        {
             ShareRegisteredTaskGraphWithHttpInfo(_namespace, name, taskGraphSharing);
        }

        /// <summary>
        ///  Share a task graph.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="taskGraphSharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the UDF will not be shared with the namespace at all. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ShareRegisteredTaskGraphWithHttpInfo (string _namespace, string name, TaskGraphSharing taskGraphSharing)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->ShareRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->ShareRegisteredTaskGraph");
            // verify the required parameter 'taskGraphSharing' is set
            if (taskGraphSharing == null)
                throw new ApiException(400, "Missing required parameter 'taskGraphSharing' when calling RegisteredTaskGraphsApi->ShareRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (taskGraphSharing != null && taskGraphSharing.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskGraphSharing); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskGraphSharing; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Share a task graph.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="taskGraphSharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the UDF will not be shared with the namespace at all. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ShareRegisteredTaskGraphAsync (string _namespace, string name, TaskGraphSharing taskGraphSharing, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ShareRegisteredTaskGraphWithHttpInfoAsync(_namespace, name, taskGraphSharing, cancellationToken);

        }

        /// <summary>
        ///  Share a task graph.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns the registered task graph.</param>
        /// <param name="name">The name of the task graph.</param>
        /// <param name="taskGraphSharing">Namespace and list of permissions to share with. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the UDF will not be shared with the namespace at all. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShareRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, TaskGraphSharing taskGraphSharing, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->ShareRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->ShareRegisteredTaskGraph");
            // verify the required parameter 'taskGraphSharing' is set
            if (taskGraphSharing == null)
                throw new ApiException(400, "Missing required parameter 'taskGraphSharing' when calling RegisteredTaskGraphsApi->ShareRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (taskGraphSharing != null && taskGraphSharing.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(taskGraphSharing); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskGraphSharing; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Update the contents of an existing registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">The new contents of the task graph. (optional)</param>
        /// <returns></returns>
        public void UpdateRegisteredTaskGraph (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph))
        {
             UpdateRegisteredTaskGraphWithHttpInfo(_namespace, name, graph);
        }

        /// <summary>
        ///  Update the contents of an existing registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">The new contents of the task graph. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRegisteredTaskGraphWithHttpInfo (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->UpdateRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->UpdateRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (graph != null && graph.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(graph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = graph; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Update the contents of an existing registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">The new contents of the task graph. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRegisteredTaskGraphAsync (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateRegisteredTaskGraphWithHttpInfoAsync(_namespace, name, graph, cancellationToken);

        }

        /// <summary>
        ///  Update the contents of an existing registered task graph. 
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace that owns this registered UDF.</param>
        /// <param name="name">The name of the registered task graph.</param>
        /// <param name="graph">The new contents of the task graph. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRegisteredTaskGraphWithHttpInfoAsync (string _namespace, string name, RegisteredTaskGraph graph = default(RegisteredTaskGraph), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling RegisteredTaskGraphsApi->UpdateRegisteredTaskGraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegisteredTaskGraphsApi->UpdateRegisteredTaskGraph");

            var localVarPath = "/taskgraphs/{namespace}/registered/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (graph != null && graph.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(graph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = graph; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRegisteredTaskGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
