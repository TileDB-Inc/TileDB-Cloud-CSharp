/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run a sql query
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> RunSQL(string _namespace, SQLParameters sql, string acceptEncoding = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run a sql query
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> RunSQLWithHttpInfo(string _namespace, SQLParameters sql, string acceptEncoding = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run a sql query
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> RunSQLAsync(string _namespace, SQLParameters sql, string acceptEncoding = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run a sql query
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> RunSQLWithHttpInfoAsync(string _namespace, SQLParameters sql, string acceptEncoding = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISqlApi : ISqlApiSync, ISqlApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SqlApi : ISqlApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SqlApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SqlApi(string basePath)
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SqlApi(TileDB.Cloud.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SqlApi(TileDB.Cloud.Rest.Client.ISynchronousClient client, TileDB.Cloud.Rest.Client.IAsynchronousClient asyncClient, TileDB.Cloud.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Run a sql query
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> RunSQL(string _namespace, SQLParameters sql, string acceptEncoding = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<Object>> localVarResponse = RunSQLWithHttpInfo(_namespace, sql, acceptEncoding);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Run a sql query
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<Object>> RunSQLWithHttpInfo(string _namespace, SQLParameters sql, string acceptEncoding = default(string), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling SqlApi->RunSQL");
            }

            // verify the required parameter 'sql' is set
            if (sql == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'sql' when calling SqlApi->RunSQL");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            if (acceptEncoding != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Encoding", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(acceptEncoding)); // header parameter
            }
            localVarRequestOptions.Data = sql;

            localVarRequestOptions.Operation = "SqlApi.RunSQL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Object>>("/sql/{namespace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunSQL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Run a sql query
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> RunSQLAsync(string _namespace, SQLParameters sql, string acceptEncoding = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<Object>> localVarResponse = await RunSQLWithHttpInfoAsync(_namespace, sql, acceptEncoding, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Run a sql query
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<Object>>> RunSQLWithHttpInfoAsync(string _namespace, SQLParameters sql, string acceptEncoding = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling SqlApi->RunSQL");
            }

            // verify the required parameter 'sql' is set
            if (sql == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'sql' when calling SqlApi->RunSQL");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            if (acceptEncoding != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Encoding", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(acceptEncoding)); // header parameter
            }
            localVarRequestOptions.Data = sql;

            localVarRequestOptions.Operation = "SqlApi.RunSQL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Object>>("/sql/{namespace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunSQL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
