/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run a sql query
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> RunSQL (string _namespace, SQLParameters sql, string acceptEncoding = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run a sql query
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> RunSQLWithHttpInfo (string _namespace, SQLParameters sql, string acceptEncoding = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch an array task
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to fetch</param>
        /// <returns>ArrayTask</returns>
        ArrayTask TaskIdGet (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch an array task
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to fetch</param>
        /// <returns>ApiResponse of ArrayTask</returns>
        ApiResponse<ArrayTask> TaskIdGetWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of an array task
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to retrieve stored results</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <returns>string</returns>
        string TaskIdResultGet (string id, string acceptEncoding = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of an array task
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to retrieve stored results</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TaskIdResultGetWithHttpInfo (string id, string acceptEncoding = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all array tasks a user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to filter (optional)</param>
        /// <param name="createdBy">username to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot; (optional)</param>
        /// <param name="excludeType">task_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">match file_type of task array, more than one can be included (optional)</param>
        /// <param name="excludeFileType">exclude file_type of task arrays, more than one can be included (optional)</param>
        /// <param name="status">Filter to only return these statuses (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include start_time, name (optional)</param>
        /// <returns>ArrayTaskData</returns>
        ArrayTaskData TasksGet (string _namespace = default(string), string createdBy = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), List<string> excludeType = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), string status = default(string), string search = default(string), string orderby = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all array tasks a user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to filter (optional)</param>
        /// <param name="createdBy">username to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot; (optional)</param>
        /// <param name="excludeType">task_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">match file_type of task array, more than one can be included (optional)</param>
        /// <param name="excludeFileType">exclude file_type of task arrays, more than one can be included (optional)</param>
        /// <param name="status">Filter to only return these statuses (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include start_time, name (optional)</param>
        /// <returns>ApiResponse of ArrayTaskData</returns>
        ApiResponse<ArrayTaskData> TasksGetWithHttpInfo (string _namespace = default(string), string createdBy = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), List<string> excludeType = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), string status = default(string), string search = default(string), string orderby = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run a sql query
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> RunSQLAsync (string _namespace, SQLParameters sql, string acceptEncoding = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Run a sql query
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> RunSQLWithHttpInfoAsync (string _namespace, SQLParameters sql, string acceptEncoding = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch an array task
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayTask</returns>
        System.Threading.Tasks.Task<ArrayTask> TaskIdGetAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch an array task
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayTask>> TaskIdGetWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of an array task
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to retrieve stored results</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TaskIdResultGetAsync (string id, string acceptEncoding = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve results of an array task
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to retrieve stored results</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TaskIdResultGetWithHttpInfoAsync (string id, string acceptEncoding = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all array tasks a user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to filter (optional)</param>
        /// <param name="createdBy">username to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot; (optional)</param>
        /// <param name="excludeType">task_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">match file_type of task array, more than one can be included (optional)</param>
        /// <param name="excludeFileType">exclude file_type of task arrays, more than one can be included (optional)</param>
        /// <param name="status">Filter to only return these statuses (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include start_time, name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayTaskData</returns>
        System.Threading.Tasks.Task<ArrayTaskData> TasksGetAsync (string _namespace = default(string), string createdBy = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), List<string> excludeType = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), string status = default(string), string search = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of all array tasks a user has access to
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to filter (optional)</param>
        /// <param name="createdBy">username to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot; (optional)</param>
        /// <param name="excludeType">task_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">match file_type of task array, more than one can be included (optional)</param>
        /// <param name="excludeFileType">exclude file_type of task arrays, more than one can be included (optional)</param>
        /// <param name="status">Filter to only return these statuses (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include start_time, name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayTaskData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayTaskData>> TasksGetWithHttpInfoAsync (string _namespace = default(string), string createdBy = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), List<string> excludeType = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), string status = default(string), string search = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// </summary>
        /// <returns></returns>
        public TasksApi()
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(TileDB.Cloud.Rest.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Run a sql query
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> RunSQL (string _namespace, SQLParameters sql, string acceptEncoding = default(string))
        {
             ApiResponse<List<Object>> localVarResponse = RunSQLWithHttpInfo(_namespace, sql, acceptEncoding);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Run a sql query
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse<List<Object>> RunSQLWithHttpInfo (string _namespace, SQLParameters sql, string acceptEncoding = default(string))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling TasksApi->RunSQL");
            // verify the required parameter 'sql' is set
            if (sql == null)
                throw new ApiException(400, "Missing required parameter 'sql' when calling TasksApi->RunSQL");

            var localVarPath = "/sql/{namespace}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", this.Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter
            if (sql != null && sql.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sql); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sql; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunSQL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Run a sql query
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> RunSQLAsync (string _namespace, SQLParameters sql, string acceptEncoding = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Object>> localVarResponse = await RunSQLWithHttpInfoAsync(_namespace, sql, acceptEncoding, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Run a sql query
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to run task under is in (an organization name or user&#39;s username)</param>
        /// <param name="sql">sql being submitted</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> RunSQLWithHttpInfoAsync (string _namespace, SQLParameters sql, string acceptEncoding = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling TasksApi->RunSQL");
            // verify the required parameter 'sql' is set
            if (sql == null)
                throw new ApiException(400, "Missing required parameter 'sql' when calling TasksApi->RunSQL");

            var localVarPath = "/sql/{namespace}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", this.Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter
            if (sql != null && sql.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sql); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sql; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunSQL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Fetch an array task
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to fetch</param>
        /// <returns>ArrayTask</returns>
        public ArrayTask TaskIdGet (string id)
        {
             ApiResponse<ArrayTask> localVarResponse = TaskIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch an array task
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to fetch</param>
        /// <returns>ApiResponse of ArrayTask</returns>
        public ApiResponse<ArrayTask> TaskIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TasksApi->TaskIdGet");

            var localVarPath = "/task/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayTask)));
        }

        /// <summary>
        ///  Fetch an array task
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayTask</returns>
        public async System.Threading.Tasks.Task<ArrayTask> TaskIdGetAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayTask> localVarResponse = await TaskIdGetWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch an array task
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayTask>> TaskIdGetWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TasksApi->TaskIdGet");

            var localVarPath = "/task/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayTask)));
        }

        /// <summary>
        ///  Retrieve results of an array task
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to retrieve stored results</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <returns>string</returns>
        public string TaskIdResultGet (string id, string acceptEncoding = default(string))
        {
             ApiResponse<string> localVarResponse = TaskIdResultGetWithHttpInfo(id, acceptEncoding);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve results of an array task
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to retrieve stored results</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> TaskIdResultGetWithHttpInfo (string id, string acceptEncoding = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TasksApi->TaskIdResultGet");

            var localVarPath = "/task/{id}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", this.Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskIdResultGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve results of an array task
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to retrieve stored results</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TaskIdResultGetAsync (string id, string acceptEncoding = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await TaskIdResultGetWithHttpInfoAsync(id, acceptEncoding, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve results of an array task
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">task id to retrieve stored results</param>
        /// <param name="acceptEncoding">Encoding to use (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TaskIdResultGetWithHttpInfoAsync (string id, string acceptEncoding = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TasksApi->TaskIdResultGet");

            var localVarPath = "/task/{id}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", this.Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TaskIdResultGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Fetch a list of all array tasks a user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to filter (optional)</param>
        /// <param name="createdBy">username to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot; (optional)</param>
        /// <param name="excludeType">task_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">match file_type of task array, more than one can be included (optional)</param>
        /// <param name="excludeFileType">exclude file_type of task arrays, more than one can be included (optional)</param>
        /// <param name="status">Filter to only return these statuses (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include start_time, name (optional)</param>
        /// <returns>ArrayTaskData</returns>
        public ArrayTaskData TasksGet (string _namespace = default(string), string createdBy = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), List<string> excludeType = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), string status = default(string), string search = default(string), string orderby = default(string))
        {
             ApiResponse<ArrayTaskData> localVarResponse = TasksGetWithHttpInfo(_namespace, createdBy, array, start, end, page, perPage, type, excludeType, fileType, excludeFileType, status, search, orderby);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of all array tasks a user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to filter (optional)</param>
        /// <param name="createdBy">username to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot; (optional)</param>
        /// <param name="excludeType">task_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">match file_type of task array, more than one can be included (optional)</param>
        /// <param name="excludeFileType">exclude file_type of task arrays, more than one can be included (optional)</param>
        /// <param name="status">Filter to only return these statuses (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include start_time, name (optional)</param>
        /// <returns>ApiResponse of ArrayTaskData</returns>
        public ApiResponse<ArrayTaskData> TasksGetWithHttpInfo (string _namespace = default(string), string createdBy = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), List<string> excludeType = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), string status = default(string), string search = default(string), string orderby = default(string))
        {

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (createdBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_by", createdBy)); // query parameter
            if (array != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "array", array)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (excludeType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "exclude_type", excludeType)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_type", fileType)); // query parameter
            if (excludeFileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_file_type", excludeFileType)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayTaskData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayTaskData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayTaskData)));
        }

        /// <summary>
        ///  Fetch a list of all array tasks a user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to filter (optional)</param>
        /// <param name="createdBy">username to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot; (optional)</param>
        /// <param name="excludeType">task_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">match file_type of task array, more than one can be included (optional)</param>
        /// <param name="excludeFileType">exclude file_type of task arrays, more than one can be included (optional)</param>
        /// <param name="status">Filter to only return these statuses (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include start_time, name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ArrayTaskData</returns>
        public async System.Threading.Tasks.Task<ArrayTaskData> TasksGetAsync (string _namespace = default(string), string createdBy = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), List<string> excludeType = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), string status = default(string), string search = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ArrayTaskData> localVarResponse = await TasksGetWithHttpInfoAsync(_namespace, createdBy, array, start, end, page, perPage, type, excludeType, fileType, excludeFileType, status, search, orderby, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch a list of all array tasks a user has access to
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace to filter (optional)</param>
        /// <param name="createdBy">username to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">task type, \&quot;QUERY\&quot;, \&quot;SQL\&quot;, \&quot;UDF\&quot;, \&quot;GENERIC_UDF\&quot; (optional)</param>
        /// <param name="excludeType">task_type to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="fileType">match file_type of task array, more than one can be included (optional)</param>
        /// <param name="excludeFileType">exclude file_type of task arrays, more than one can be included (optional)</param>
        /// <param name="status">Filter to only return these statuses (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include start_time, name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ArrayTaskData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayTaskData>> TasksGetWithHttpInfoAsync (string _namespace = default(string), string createdBy = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), List<string> excludeType = default(List<string>), List<string> fileType = default(List<string>), List<string> excludeFileType = default(List<string>), string status = default(string), string search = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (createdBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_by", createdBy)); // query parameter
            if (array != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "array", array)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (excludeType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "exclude_type", excludeType)); // query parameter
            if (fileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "file_type", fileType)); // query parameter
            if (excludeFileType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_file_type", excludeFileType)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TasksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayTaskData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayTaskData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayTaskData)));
        }

    }
}
