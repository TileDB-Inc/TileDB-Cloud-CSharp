/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be accepted</param>
        /// <returns></returns>
        void AcceptInvitation (string invitation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be accepted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AcceptInvitationWithHttpInfo (string invitation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels join organization invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="organization">name or uuid of organization</param>
        /// <returns></returns>
        void CancelJoinOrganization (string invitation, string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels join organization invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="organization">name or uuid of organization</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelJoinOrganizationWithHttpInfo (string invitation, string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels array sharing invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns></returns>
        void CancelShareArrayByInvite (string _namespace, string invitation, string array);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels array sharing invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelShareArrayByInviteWithHttpInfo (string _namespace, string invitation, string array);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of invitations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or id of organization to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot; (optional)</param>
        /// <param name="status">Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot; (optional)</param>
        /// <param name="orderby">sort by which field valid values include timestamp, array_name, organization_name (optional)</param>
        /// <returns>InvitationData</returns>
        InvitationData FetchInvitations (string organization = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), string status = default(string), string orderby = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of invitations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or id of organization to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot; (optional)</param>
        /// <param name="status">Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot; (optional)</param>
        /// <param name="orderby">sort by which field valid values include timestamp, array_name, organization_name (optional)</param>
        /// <returns>ApiResponse of InvitationData</returns>
        ApiResponse<InvitationData> FetchInvitationsWithHttpInfo (string organization = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), string status = default(string), string orderby = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends email to multiple recipients with joining information regarding an organization
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <returns></returns>
        void JoinOrganization (string organization, InvitationOrganizationJoinEmail emailInvite);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends email to multiple recipients with joining information regarding an organization
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> JoinOrganizationWithHttpInfo (string organization, InvitationOrganizationJoinEmail emailInvite);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends email to multiple recipients with sharing information regarding an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <returns></returns>
        void ShareArrayByInvite (string _namespace, string array, InvitationArrayShareEmail emailInvite);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends email to multiple recipients with sharing information regarding an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ShareArrayByInviteWithHttpInfo (string _namespace, string array, InvitationArrayShareEmail emailInvite);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be accepted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AcceptInvitationAsync (string invitation, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be accepted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AcceptInvitationWithHttpInfoAsync (string invitation, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels join organization invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelJoinOrganizationAsync (string invitation, string organization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels join organization invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelJoinOrganizationWithHttpInfoAsync (string invitation, string organization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels array sharing invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelShareArrayByInviteAsync (string _namespace, string invitation, string array, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels array sharing invitation
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelShareArrayByInviteWithHttpInfoAsync (string _namespace, string invitation, string array, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of invitations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or id of organization to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot; (optional)</param>
        /// <param name="status">Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot; (optional)</param>
        /// <param name="orderby">sort by which field valid values include timestamp, array_name, organization_name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InvitationData</returns>
        System.Threading.Tasks.Task<InvitationData> FetchInvitationsAsync (string organization = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), string status = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch a list of invitations
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or id of organization to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot; (optional)</param>
        /// <param name="status">Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot; (optional)</param>
        /// <param name="orderby">sort by which field valid values include timestamp, array_name, organization_name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InvitationData)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationData>> FetchInvitationsWithHttpInfoAsync (string organization = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), string status = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends email to multiple recipients with joining information regarding an organization
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task JoinOrganizationAsync (string organization, InvitationOrganizationJoinEmail emailInvite, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends email to multiple recipients with joining information regarding an organization
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> JoinOrganizationWithHttpInfoAsync (string organization, InvitationOrganizationJoinEmail emailInvite, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends email to multiple recipients with sharing information regarding an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ShareArrayByInviteAsync (string _namespace, string array, InvitationArrayShareEmail emailInvite, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends email to multiple recipients with sharing information regarding an array
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShareArrayByInviteWithHttpInfoAsync (string _namespace, string array, InvitationArrayShareEmail emailInvite, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvitationApi : IInvitationApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvitationApi(String basePath)
        {
            this.Configuration = new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class
        /// </summary>
        /// <returns></returns>
        public InvitationApi()
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvitationApi(TileDB.Cloud.Rest.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Accepts invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be accepted</param>
        /// <returns></returns>
        public void AcceptInvitation (string invitation)
        {
             AcceptInvitationWithHttpInfo(invitation);
        }

        /// <summary>
        ///  Accepts invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be accepted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AcceptInvitationWithHttpInfo (string invitation)
        {
            // verify the required parameter 'invitation' is set
            if (invitation == null)
                throw new ApiException(400, "Missing required parameter 'invitation' when calling InvitationApi->AcceptInvitation");

            var localVarPath = "/invitations/{invitation}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitation != null) localVarPathParams.Add("invitation", this.Configuration.ApiClient.ParameterToString(invitation)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Accepts invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be accepted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AcceptInvitationAsync (string invitation, CancellationToken cancellationToken = default(CancellationToken))
        {
             await AcceptInvitationWithHttpInfoAsync(invitation, cancellationToken);

        }

        /// <summary>
        ///  Accepts invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be accepted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AcceptInvitationWithHttpInfoAsync (string invitation, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'invitation' is set
            if (invitation == null)
                throw new ApiException(400, "Missing required parameter 'invitation' when calling InvitationApi->AcceptInvitation");

            var localVarPath = "/invitations/{invitation}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitation != null) localVarPathParams.Add("invitation", this.Configuration.ApiClient.ParameterToString(invitation)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Cancels join organization invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="organization">name or uuid of organization</param>
        /// <returns></returns>
        public void CancelJoinOrganization (string invitation, string organization)
        {
             CancelJoinOrganizationWithHttpInfo(invitation, organization);
        }

        /// <summary>
        ///  Cancels join organization invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="organization">name or uuid of organization</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelJoinOrganizationWithHttpInfo (string invitation, string organization)
        {
            // verify the required parameter 'invitation' is set
            if (invitation == null)
                throw new ApiException(400, "Missing required parameter 'invitation' when calling InvitationApi->CancelJoinOrganization");
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling InvitationApi->CancelJoinOrganization");

            var localVarPath = "/invitations/{invitation}/{organization}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitation != null) localVarPathParams.Add("invitation", this.Configuration.ApiClient.ParameterToString(invitation)); // path parameter
            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelJoinOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Cancels join organization invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelJoinOrganizationAsync (string invitation, string organization, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CancelJoinOrganizationWithHttpInfoAsync(invitation, organization, cancellationToken);

        }

        /// <summary>
        ///  Cancels join organization invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelJoinOrganizationWithHttpInfoAsync (string invitation, string organization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'invitation' is set
            if (invitation == null)
                throw new ApiException(400, "Missing required parameter 'invitation' when calling InvitationApi->CancelJoinOrganization");
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling InvitationApi->CancelJoinOrganization");

            var localVarPath = "/invitations/{invitation}/{organization}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitation != null) localVarPathParams.Add("invitation", this.Configuration.ApiClient.ParameterToString(invitation)); // path parameter
            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelJoinOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Cancels array sharing invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns></returns>
        public void CancelShareArrayByInvite (string _namespace, string invitation, string array)
        {
             CancelShareArrayByInviteWithHttpInfo(_namespace, invitation, array);
        }

        /// <summary>
        ///  Cancels array sharing invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelShareArrayByInviteWithHttpInfo (string _namespace, string invitation, string array)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling InvitationApi->CancelShareArrayByInvite");
            // verify the required parameter 'invitation' is set
            if (invitation == null)
                throw new ApiException(400, "Missing required parameter 'invitation' when calling InvitationApi->CancelShareArrayByInvite");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling InvitationApi->CancelShareArrayByInvite");

            var localVarPath = "/invitations/{invitation}/{namespace}/{array}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (invitation != null) localVarPathParams.Add("invitation", this.Configuration.ApiClient.ParameterToString(invitation)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelShareArrayByInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Cancels array sharing invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelShareArrayByInviteAsync (string _namespace, string invitation, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CancelShareArrayByInviteWithHttpInfoAsync(_namespace, invitation, array, cancellationToken);

        }

        /// <summary>
        ///  Cancels array sharing invitation
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="invitation">the id of invitation about to be cancelled</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelShareArrayByInviteWithHttpInfoAsync (string _namespace, string invitation, string array, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling InvitationApi->CancelShareArrayByInvite");
            // verify the required parameter 'invitation' is set
            if (invitation == null)
                throw new ApiException(400, "Missing required parameter 'invitation' when calling InvitationApi->CancelShareArrayByInvite");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling InvitationApi->CancelShareArrayByInvite");

            var localVarPath = "/invitations/{invitation}/{namespace}/{array}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (invitation != null) localVarPathParams.Add("invitation", this.Configuration.ApiClient.ParameterToString(invitation)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelShareArrayByInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Fetch a list of invitations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or id of organization to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot; (optional)</param>
        /// <param name="status">Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot; (optional)</param>
        /// <param name="orderby">sort by which field valid values include timestamp, array_name, organization_name (optional)</param>
        /// <returns>InvitationData</returns>
        public InvitationData FetchInvitations (string organization = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), string status = default(string), string orderby = default(string))
        {
             ApiResponse<InvitationData> localVarResponse = FetchInvitationsWithHttpInfo(organization, array, start, end, page, perPage, type, status, orderby);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch a list of invitations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or id of organization to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot; (optional)</param>
        /// <param name="status">Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot; (optional)</param>
        /// <param name="orderby">sort by which field valid values include timestamp, array_name, organization_name (optional)</param>
        /// <returns>ApiResponse of InvitationData</returns>
        public ApiResponse<InvitationData> FetchInvitationsWithHttpInfo (string organization = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), string status = default(string), string orderby = default(string))
        {

            var localVarPath = "/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organization", organization)); // query parameter
            if (array != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "array", array)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InvitationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationData)));
        }

        /// <summary>
        ///  Fetch a list of invitations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or id of organization to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot; (optional)</param>
        /// <param name="status">Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot; (optional)</param>
        /// <param name="orderby">sort by which field valid values include timestamp, array_name, organization_name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InvitationData</returns>
        public async System.Threading.Tasks.Task<InvitationData> FetchInvitationsAsync (string organization = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), string status = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InvitationData> localVarResponse = await FetchInvitationsWithHttpInfoAsync(organization, array, start, end, page, perPage, type, status, orderby, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch a list of invitations
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or id of organization to filter (optional)</param>
        /// <param name="array">name/uri of array that is url-encoded to filter (optional)</param>
        /// <param name="start">start time for tasks to filter by (optional)</param>
        /// <param name="end">end time for tasks to filter by (optional)</param>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="type">invitation type, \&quot;ARRAY_SHARE\&quot;, \&quot;JOIN_ORGANIZATION\&quot; (optional)</param>
        /// <param name="status">Filter to only return \&quot;PENDING\&quot;, \&quot;ACCEPTED\&quot; (optional)</param>
        /// <param name="orderby">sort by which field valid values include timestamp, array_name, organization_name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InvitationData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationData>> FetchInvitationsWithHttpInfoAsync (string organization = default(string), string array = default(string), int? start = default(int?), int? end = default(int?), int? page = default(int?), int? perPage = default(int?), string type = default(string), string status = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organization", organization)); // query parameter
            if (array != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "array", array)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FetchInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InvitationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationData)));
        }

        /// <summary>
        ///  Sends email to multiple recipients with joining information regarding an organization
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <returns></returns>
        public void JoinOrganization (string organization, InvitationOrganizationJoinEmail emailInvite)
        {
             JoinOrganizationWithHttpInfo(organization, emailInvite);
        }

        /// <summary>
        ///  Sends email to multiple recipients with joining information regarding an organization
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> JoinOrganizationWithHttpInfo (string organization, InvitationOrganizationJoinEmail emailInvite)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling InvitationApi->JoinOrganization");
            // verify the required parameter 'emailInvite' is set
            if (emailInvite == null)
                throw new ApiException(400, "Missing required parameter 'emailInvite' when calling InvitationApi->JoinOrganization");

            var localVarPath = "/invitations/{organization}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (emailInvite != null && emailInvite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailInvite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailInvite; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sends email to multiple recipients with joining information regarding an organization
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task JoinOrganizationAsync (string organization, InvitationOrganizationJoinEmail emailInvite, CancellationToken cancellationToken = default(CancellationToken))
        {
             await JoinOrganizationWithHttpInfoAsync(organization, emailInvite, cancellationToken);

        }

        /// <summary>
        ///  Sends email to multiple recipients with joining information regarding an organization
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">name or uuid of organization</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> JoinOrganizationWithHttpInfoAsync (string organization, InvitationOrganizationJoinEmail emailInvite, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling InvitationApi->JoinOrganization");
            // verify the required parameter 'emailInvite' is set
            if (emailInvite == null)
                throw new ApiException(400, "Missing required parameter 'emailInvite' when calling InvitationApi->JoinOrganization");

            var localVarPath = "/invitations/{organization}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (emailInvite != null && emailInvite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailInvite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailInvite; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sends email to multiple recipients with sharing information regarding an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <returns></returns>
        public void ShareArrayByInvite (string _namespace, string array, InvitationArrayShareEmail emailInvite)
        {
             ShareArrayByInviteWithHttpInfo(_namespace, array, emailInvite);
        }

        /// <summary>
        ///  Sends email to multiple recipients with sharing information regarding an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ShareArrayByInviteWithHttpInfo (string _namespace, string array, InvitationArrayShareEmail emailInvite)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling InvitationApi->ShareArrayByInvite");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling InvitationApi->ShareArrayByInvite");
            // verify the required parameter 'emailInvite' is set
            if (emailInvite == null)
                throw new ApiException(400, "Missing required parameter 'emailInvite' when calling InvitationApi->ShareArrayByInvite");

            var localVarPath = "/invitations/{namespace}/{array}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (emailInvite != null && emailInvite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailInvite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailInvite; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareArrayByInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Sends email to multiple recipients with sharing information regarding an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ShareArrayByInviteAsync (string _namespace, string array, InvitationArrayShareEmail emailInvite, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ShareArrayByInviteWithHttpInfoAsync(_namespace, array, emailInvite, cancellationToken);

        }

        /// <summary>
        ///  Sends email to multiple recipients with sharing information regarding an array
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">namespace array is in (an organization name or user&#39;s username)</param>
        /// <param name="array">name/uri of array that is url-encoded</param>
        /// <param name="emailInvite">list of email recipients</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShareArrayByInviteWithHttpInfoAsync (string _namespace, string array, InvitationArrayShareEmail emailInvite, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling InvitationApi->ShareArrayByInvite");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling InvitationApi->ShareArrayByInvite");
            // verify the required parameter 'emailInvite' is set
            if (emailInvite == null)
                throw new ApiException(400, "Missing required parameter 'emailInvite' when calling InvitationApi->ShareArrayByInvite");

            var localVarPath = "/invitations/{namespace}/{array}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (emailInvite != null && emailInvite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailInvite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailInvite; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareArrayByInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
