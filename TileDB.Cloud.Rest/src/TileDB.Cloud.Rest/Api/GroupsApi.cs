/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes the contents of the group by adding/removing members.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <returns></returns>
        void ChangeGroupContents (string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes the contents of the group by adding/removing members.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeGroupContentsWithHttpInfo (string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <returns></returns>
        void CreateGroup (string _namespace, GroupCreate groupCreate = default(GroupCreate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateGroupWithHttpInfo (string _namespace, GroupCreate groupCreate = default(GroupCreate));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns></returns>
        void DeleteGroup (string groupNamespace, string groupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo (string groupNamespace, string groupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>GroupInfo</returns>
        GroupInfo GetGroup (string groupNamespace, string groupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> GetGroupWithHttpInfo (string groupNamespace, string groupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <returns>GroupContents</returns>
        GroupContents GetGroupContents (string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <returns>ApiResponse of GroupContents</returns>
        ApiResponse<GroupContents> GetGroupContentsWithHttpInfo (string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>List<GroupSharing></returns>
        List<GroupSharing> GetGroupSharingPolicies (string groupNamespace, string groupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>ApiResponse of List<GroupSharing></returns>
        ApiResponse<List<GroupSharing>> GetGroupSharingPoliciesWithHttpInfo (string groupNamespace, string groupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupBrowserFilterData</returns>
        GroupBrowserFilterData GroupsBrowserOwnedFiltersGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        ApiResponse<GroupBrowserFilterData> GroupsBrowserOwnedFiltersGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupBrowserFilterData</returns>
        GroupBrowserFilterData GroupsBrowserPublicFiltersGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        ApiResponse<GroupBrowserFilterData> GroupsBrowserPublicFiltersGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupBrowserFilterData</returns>
        GroupBrowserFilterData GroupsBrowserSharedFiltersGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        ApiResponse<GroupBrowserFilterData> GroupsBrowserSharedFiltersGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the group contents
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>GroupContentsFilterData</returns>
        GroupContentsFilterData GroupsGroupNamespaceGroupNameContentsFiltersGet (string groupNamespace, string groupName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the group contents
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>ApiResponse of GroupContentsFilterData</returns>
        ApiResponse<GroupContentsFilterData> GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfo (string groupNamespace, string groupName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of owned groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <returns>GroupBrowserData</returns>
        GroupBrowserData ListOwnedGroups (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of owned groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        ApiResponse<GroupBrowserData> ListOwnedGroupsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of public groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <returns>GroupBrowserData</returns>
        GroupBrowserData ListPublicGroups (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of public groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        ApiResponse<GroupBrowserData> ListPublicGroupsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of shared groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <returns>GroupBrowserData</returns>
        GroupBrowserData ListSharedGroups (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of shared groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        ApiResponse<GroupBrowserData> ListSharedGroupsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Registers an existing group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <returns></returns>
        void RegisterGroup (string _namespace, string array, GroupRegister groupRegister = default(GroupRegister));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Registers an existing group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterGroupWithHttpInfo (string _namespace, string array, GroupRegister groupRegister = default(GroupRegister));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a group with a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <returns></returns>
        void ShareGroup (string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a group with a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ShareGroupWithHttpInfo (string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes attributes of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <returns></returns>
        void UpdateGroup (string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes attributes of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGroupWithHttpInfo (string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes the contents of the group by adding/removing members.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeGroupContentsAsync (string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes the contents of the group by adding/removing members.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeGroupContentsWithHttpInfoAsync (string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateGroupAsync (string _namespace, GroupCreate groupCreate = default(GroupCreate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateGroupWithHttpInfoAsync (string _namespace, GroupCreate groupCreate = default(GroupCreate), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> GetGroupAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> GetGroupWithHttpInfoAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupContents</returns>
        System.Threading.Tasks.Task<GroupContents> GetGroupContentsAsync (string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupContents)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupContents>> GetGroupContentsWithHttpInfoAsync (string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GroupSharing></returns>
        System.Threading.Tasks.Task<List<GroupSharing>> GetGroupSharingPoliciesAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GroupSharing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupSharing>>> GetGroupSharingPoliciesWithHttpInfoAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserOwnedFiltersGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserOwnedFiltersGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserPublicFiltersGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserPublicFiltersGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserSharedFiltersGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserSharedFiltersGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the group contents
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupContentsFilterData</returns>
        System.Threading.Tasks.Task<GroupContentsFilterData> GroupsGroupNamespaceGroupNameContentsFiltersGetAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the group contents
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupContentsFilterData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupContentsFilterData>> GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfoAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of owned groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserData</returns>
        System.Threading.Tasks.Task<GroupBrowserData> ListOwnedGroupsAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of owned groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListOwnedGroupsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of public groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserData</returns>
        System.Threading.Tasks.Task<GroupBrowserData> ListPublicGroupsAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of public groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListPublicGroupsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of shared groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserData</returns>
        System.Threading.Tasks.Task<GroupBrowserData> ListSharedGroupsAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of shared groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListSharedGroupsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Registers an existing group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterGroupAsync (string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Registers an existing group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterGroupWithHttpInfoAsync (string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a group with a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ShareGroupAsync (string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a group with a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShareGroupWithHttpInfoAsync (string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes attributes of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGroupAsync (string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes attributes of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupWithHttpInfoAsync (string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(String basePath)
        {
            this.Configuration = new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupsApi()
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(TileDB.Cloud.Rest.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TileDB.Cloud.Rest.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Changes the contents of the group by adding/removing members.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <returns></returns>
        public void ChangeGroupContents (string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges))
        {
             ChangeGroupContentsWithHttpInfo(groupNamespace, groupName, groupChanges);
        }

        /// <summary>
        ///  Changes the contents of the group by adding/removing members.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChangeGroupContentsWithHttpInfo (string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->ChangeGroupContents");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ChangeGroupContents");

            var localVarPath = "/groups/{group_namespace}/{group_name}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (groupChanges != null && groupChanges.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupChanges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupChanges; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeGroupContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Changes the contents of the group by adding/removing members.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeGroupContentsAsync (string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ChangeGroupContentsWithHttpInfoAsync(groupNamespace, groupName, groupChanges, cancellationToken);

        }

        /// <summary>
        ///  Changes the contents of the group by adding/removing members.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChangeGroupContentsWithHttpInfoAsync (string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->ChangeGroupContents");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ChangeGroupContents");

            var localVarPath = "/groups/{group_namespace}/{group_name}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (groupChanges != null && groupChanges.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupChanges); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupChanges; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeGroupContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Creates a new group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <returns></returns>
        public void CreateGroup (string _namespace, GroupCreate groupCreate = default(GroupCreate))
        {
             CreateGroupWithHttpInfo(_namespace, groupCreate);
        }

        /// <summary>
        ///  Creates a new group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateGroupWithHttpInfo (string _namespace, GroupCreate groupCreate = default(GroupCreate))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling GroupsApi->CreateGroup");

            var localVarPath = "/groups/{namespace}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (groupCreate != null && groupCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupCreate; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Creates a new group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateGroupAsync (string _namespace, GroupCreate groupCreate = default(GroupCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
             await CreateGroupWithHttpInfoAsync(_namespace, groupCreate, cancellationToken);

        }

        /// <summary>
        ///  Creates a new group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateGroupWithHttpInfoAsync (string _namespace, GroupCreate groupCreate = default(GroupCreate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling GroupsApi->CreateGroup");

            var localVarPath = "/groups/{namespace}/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (groupCreate != null && groupCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupCreate; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns></returns>
        public void DeleteGroup (string groupNamespace, string groupName)
        {
             DeleteGroupWithHttpInfo(groupNamespace, groupName);
        }

        /// <summary>
        ///  Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGroupWithHttpInfo (string groupNamespace, string groupName)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->DeleteGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->DeleteGroup");

            var localVarPath = "/groups/{group_namespace}/{group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteGroupWithHttpInfoAsync(groupNamespace, groupName, cancellationToken);

        }

        /// <summary>
        ///  Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->DeleteGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->DeleteGroup");

            var localVarPath = "/groups/{group_namespace}/{group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo GetGroup (string groupNamespace, string groupName)
        {
             ApiResponse<GroupInfo> localVarResponse = GetGroupWithHttpInfo(groupNamespace, groupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public ApiResponse<GroupInfo> GetGroupWithHttpInfo (string groupNamespace, string groupName)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroup");

            var localVarPath = "/groups/{group_namespace}/{group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        ///  Returns the the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> GetGroupAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupInfo> localVarResponse = await GetGroupWithHttpInfoAsync(groupNamespace, groupName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupInfo>> GetGroupWithHttpInfoAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroup");

            var localVarPath = "/groups/{group_namespace}/{group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupInfo)));
        }

        /// <summary>
        ///  Returns the contents of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <returns>GroupContents</returns>
        public GroupContents GetGroupContents (string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>))
        {
             ApiResponse<GroupContents> localVarResponse = GetGroupContentsWithHttpInfo(groupNamespace, groupName, page, perPage, _namespace, search, orderby, tag, excludeTag, memberType, excludeMemberType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the contents of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <returns>ApiResponse of GroupContents</returns>
        public ApiResponse<GroupContents> GetGroupContentsWithHttpInfo (string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroupContents");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupContents");

            var localVarPath = "/groups/{group_namespace}/{group_name}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (memberType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "member_type", memberType)); // query parameter
            if (excludeMemberType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_member_type", excludeMemberType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupContents) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContents)));
        }

        /// <summary>
        ///  Returns the contents of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupContents</returns>
        public async System.Threading.Tasks.Task<GroupContents> GetGroupContentsAsync (string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupContents> localVarResponse = await GetGroupContentsWithHttpInfoAsync(groupNamespace, groupName, page, perPage, _namespace, search, orderby, tag, excludeTag, memberType, excludeMemberType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the contents of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupContents)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupContents>> GetGroupContentsWithHttpInfoAsync (string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroupContents");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupContents");

            var localVarPath = "/groups/{group_namespace}/{group_name}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (memberType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "member_type", memberType)); // query parameter
            if (excludeMemberType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_member_type", excludeMemberType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupContents) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContents)));
        }

        /// <summary>
        ///  Get all sharing details of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>List<GroupSharing></returns>
        public List<GroupSharing> GetGroupSharingPolicies (string groupNamespace, string groupName)
        {
             ApiResponse<List<GroupSharing>> localVarResponse = GetGroupSharingPoliciesWithHttpInfo(groupNamespace, groupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all sharing details of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>ApiResponse of List<GroupSharing></returns>
        public ApiResponse<List<GroupSharing>> GetGroupSharingPoliciesWithHttpInfo (string groupNamespace, string groupName)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroupSharingPolicies");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupSharingPolicies");

            var localVarPath = "/groups/{group_namespace}/{group_name}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSharingPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupSharing>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GroupSharing>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupSharing>)));
        }

        /// <summary>
        ///  Get all sharing details of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GroupSharing></returns>
        public async System.Threading.Tasks.Task<List<GroupSharing>> GetGroupSharingPoliciesAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<GroupSharing>> localVarResponse = await GetGroupSharingPoliciesWithHttpInfoAsync(groupNamespace, groupName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get all sharing details of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GroupSharing&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupSharing>>> GetGroupSharingPoliciesWithHttpInfoAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroupSharingPolicies");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupSharingPolicies");

            var localVarPath = "/groups/{group_namespace}/{group_name}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSharingPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupSharing>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GroupSharing>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupSharing>)));
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupBrowserFilterData</returns>
        public GroupBrowserFilterData GroupsBrowserOwnedFiltersGet ()
        {
             ApiResponse<GroupBrowserFilterData> localVarResponse = GroupsBrowserOwnedFiltersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        public ApiResponse<GroupBrowserFilterData> GroupsBrowserOwnedFiltersGetWithHttpInfo ()
        {

            var localVarPath = "/groups/browser/owned/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsBrowserOwnedFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserFilterData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserFilterData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserFilterData)));
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserOwnedFiltersGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupBrowserFilterData> localVarResponse = await GroupsBrowserOwnedFiltersGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserOwnedFiltersGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/groups/browser/owned/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsBrowserOwnedFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserFilterData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserFilterData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserFilterData)));
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupBrowserFilterData</returns>
        public GroupBrowserFilterData GroupsBrowserPublicFiltersGet ()
        {
             ApiResponse<GroupBrowserFilterData> localVarResponse = GroupsBrowserPublicFiltersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        public ApiResponse<GroupBrowserFilterData> GroupsBrowserPublicFiltersGetWithHttpInfo ()
        {

            var localVarPath = "/groups/browser/public/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsBrowserPublicFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserFilterData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserFilterData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserFilterData)));
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserPublicFiltersGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupBrowserFilterData> localVarResponse = await GroupsBrowserPublicFiltersGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserPublicFiltersGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/groups/browser/public/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsBrowserPublicFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserFilterData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserFilterData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserFilterData)));
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupBrowserFilterData</returns>
        public GroupBrowserFilterData GroupsBrowserSharedFiltersGet ()
        {
             ApiResponse<GroupBrowserFilterData> localVarResponse = GroupsBrowserSharedFiltersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        public ApiResponse<GroupBrowserFilterData> GroupsBrowserSharedFiltersGetWithHttpInfo ()
        {

            var localVarPath = "/groups/browser/shared/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsBrowserSharedFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserFilterData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserFilterData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserFilterData)));
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserSharedFiltersGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupBrowserFilterData> localVarResponse = await GroupsBrowserSharedFiltersGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserSharedFiltersGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/groups/browser/shared/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsBrowserSharedFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserFilterData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserFilterData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserFilterData)));
        }

        /// <summary>
        ///  Fetch data to initialize filters for the group contents
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>GroupContentsFilterData</returns>
        public GroupContentsFilterData GroupsGroupNamespaceGroupNameContentsFiltersGet (string groupNamespace, string groupName)
        {
             ApiResponse<GroupContentsFilterData> localVarResponse = GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfo(groupNamespace, groupName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the group contents
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <returns>ApiResponse of GroupContentsFilterData</returns>
        public ApiResponse<GroupContentsFilterData> GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfo (string groupNamespace, string groupName)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GroupsGroupNamespaceGroupNameContentsFiltersGet");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GroupsGroupNamespaceGroupNameContentsFiltersGet");

            var localVarPath = "/groups/{group_namespace}/{group_name}/contents/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGroupNamespaceGroupNameContentsFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContentsFilterData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupContentsFilterData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContentsFilterData)));
        }

        /// <summary>
        ///  Fetch data to initialize filters for the group contents
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupContentsFilterData</returns>
        public async System.Threading.Tasks.Task<GroupContentsFilterData> GroupsGroupNamespaceGroupNameContentsFiltersGetAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupContentsFilterData> localVarResponse = await GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfoAsync(groupNamespace, groupName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetch data to initialize filters for the group contents
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupContentsFilterData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupContentsFilterData>> GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfoAsync (string groupNamespace, string groupName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GroupsGroupNamespaceGroupNameContentsFiltersGet");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GroupsGroupNamespaceGroupNameContentsFiltersGet");

            var localVarPath = "/groups/{group_namespace}/{group_name}/contents/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGroupNamespaceGroupNameContentsFiltersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupContentsFilterData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupContentsFilterData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupContentsFilterData)));
        }

        /// <summary>
        ///  Returns one page of owned groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <returns>GroupBrowserData</returns>
        public GroupBrowserData ListOwnedGroups (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string))
        {
             ApiResponse<GroupBrowserData> localVarResponse = ListOwnedGroupsWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of owned groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        public ApiResponse<GroupBrowserData> ListOwnedGroupsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string))
        {

            var localVarPath = "/groups/browser/owned";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter
            if (parent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent", parent)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOwnedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserData)));
        }

        /// <summary>
        ///  Returns one page of owned groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserData> ListOwnedGroupsAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupBrowserData> localVarResponse = await ListOwnedGroupsWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns one page of owned groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListOwnedGroupsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/groups/browser/owned";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter
            if (parent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent", parent)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOwnedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserData)));
        }

        /// <summary>
        ///  Returns one page of public groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <returns>GroupBrowserData</returns>
        public GroupBrowserData ListPublicGroups (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string))
        {
             ApiResponse<GroupBrowserData> localVarResponse = ListPublicGroupsWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of public groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        public ApiResponse<GroupBrowserData> ListPublicGroupsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string))
        {

            var localVarPath = "/groups/browser/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter
            if (parent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent", parent)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPublicGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserData)));
        }

        /// <summary>
        ///  Returns one page of public groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserData> ListPublicGroupsAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupBrowserData> localVarResponse = await ListPublicGroupsWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns one page of public groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListPublicGroupsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/groups/browser/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter
            if (parent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent", parent)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPublicGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserData)));
        }

        /// <summary>
        ///  Returns one page of shared groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <returns>GroupBrowserData</returns>
        public GroupBrowserData ListSharedGroups (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>))
        {
             ApiResponse<GroupBrowserData> localVarResponse = ListSharedGroupsWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent, sharedTo);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of shared groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        public ApiResponse<GroupBrowserData> ListSharedGroupsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>))
        {

            var localVarPath = "/groups/browser/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter
            if (parent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent", parent)); // query parameter
            if (sharedTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "shared_to", sharedTo)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSharedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserData)));
        }

        /// <summary>
        ///  Returns one page of shared groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupBrowserData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserData> ListSharedGroupsAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupBrowserData> localVarResponse = await ListSharedGroupsWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent, sharedTo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns one page of shared groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListSharedGroupsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/groups/browser/shared";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (_namespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "namespace", _namespace)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderby", orderby)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permissions", permissions)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (excludeTag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "exclude_tag", excludeTag)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter
            if (parent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent", parent)); // query parameter
            if (sharedTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "shared_to", sharedTo)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSharedGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupBrowserData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupBrowserData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupBrowserData)));
        }

        /// <summary>
        ///  Registers an existing group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <returns></returns>
        public void RegisterGroup (string _namespace, string array, GroupRegister groupRegister = default(GroupRegister))
        {
             RegisterGroupWithHttpInfo(_namespace, array, groupRegister);
        }

        /// <summary>
        ///  Registers an existing group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterGroupWithHttpInfo (string _namespace, string array, GroupRegister groupRegister = default(GroupRegister))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling GroupsApi->RegisterGroup");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling GroupsApi->RegisterGroup");

            var localVarPath = "/groups/{namespace}/{array}/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (groupRegister != null && groupRegister.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupRegister); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupRegister; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Registers an existing group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterGroupAsync (string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), CancellationToken cancellationToken = default(CancellationToken))
        {
             await RegisterGroupWithHttpInfoAsync(_namespace, array, groupRegister, cancellationToken);

        }

        /// <summary>
        ///  Registers an existing group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterGroupWithHttpInfoAsync (string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling GroupsApi->RegisterGroup");
            // verify the required parameter 'array' is set
            if (array == null)
                throw new ApiException(400, "Missing required parameter 'array' when calling GroupsApi->RegisterGroup");

            var localVarPath = "/groups/{namespace}/{array}/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", this.Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (array != null) localVarPathParams.Add("array", this.Configuration.ApiClient.ParameterToString(array)); // path parameter
            if (groupRegister != null && groupRegister.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupRegister); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupRegister; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Share a group with a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <returns></returns>
        public void ShareGroup (string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest)
        {
             ShareGroupWithHttpInfo(groupNamespace, groupName, groupSharingRequest);
        }

        /// <summary>
        ///  Share a group with a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ShareGroupWithHttpInfo (string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->ShareGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ShareGroup");
            // verify the required parameter 'groupSharingRequest' is set
            if (groupSharingRequest == null)
                throw new ApiException(400, "Missing required parameter 'groupSharingRequest' when calling GroupsApi->ShareGroup");

            var localVarPath = "/groups/{group_namespace}/{group_name}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (groupSharingRequest != null && groupSharingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupSharingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupSharingRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Share a group with a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ShareGroupAsync (string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ShareGroupWithHttpInfoAsync(groupNamespace, groupName, groupSharingRequest, cancellationToken);

        }

        /// <summary>
        ///  Share a group with a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShareGroupWithHttpInfoAsync (string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->ShareGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ShareGroup");
            // verify the required parameter 'groupSharingRequest' is set
            if (groupSharingRequest == null)
                throw new ApiException(400, "Missing required parameter 'groupSharingRequest' when calling GroupsApi->ShareGroup");

            var localVarPath = "/groups/{group_namespace}/{group_name}/share";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (groupSharingRequest != null && groupSharingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupSharingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupSharingRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShareGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Changes attributes of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <returns></returns>
        public void UpdateGroup (string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate))
        {
             UpdateGroupWithHttpInfo(groupNamespace, groupName, groupUpdate);
        }

        /// <summary>
        ///  Changes attributes of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateGroupWithHttpInfo (string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->UpdateGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->UpdateGroup");

            var localVarPath = "/groups/{group_namespace}/{group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (groupUpdate != null && groupUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupUpdate; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Changes attributes of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGroupAsync (string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateGroupWithHttpInfoAsync(groupNamespace, groupName, groupUpdate, cancellationToken);

        }

        /// <summary>
        ///  Changes attributes of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupWithHttpInfoAsync (string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
                throw new ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->UpdateGroup");
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->UpdateGroup");

            var localVarPath = "/groups/{group_namespace}/{group_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupNamespace != null) localVarPathParams.Add("group_namespace", this.Configuration.ApiClient.ParameterToString(groupNamespace)); // path parameter
            if (groupName != null) localVarPathParams.Add("group_name", this.Configuration.ApiClient.ParameterToString(groupName)); // path parameter
            if (groupUpdate != null && groupUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupUpdate; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarHeaderParams["X-TILEDB-REST-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
