/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes the contents of the group by adding/removing members.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ChangeGroupContents(string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes the contents of the group by adding/removing members.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeGroupContentsWithHttpInfo(string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateGroup(string _namespace, GroupCreate groupCreate = default(GroupCreate), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateGroupWithHttpInfo(string _namespace, GroupCreate groupCreate = default(GroupCreate), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteGroup(string groupNamespace, string groupName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo(string groupNamespace, string groupName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupInfo</returns>
        GroupInfo GetGroup(string groupNamespace, string groupName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        ApiResponse<GroupInfo> GetGroupWithHttpInfo(string groupNamespace, string groupName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupContents</returns>
        GroupContents GetGroupContents(string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupContents</returns>
        ApiResponse<GroupContents> GetGroupContentsWithHttpInfo(string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupSharing&gt;</returns>
        List<GroupSharing> GetGroupSharingPolicies(string groupNamespace, string groupName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupSharing&gt;</returns>
        ApiResponse<List<GroupSharing>> GetGroupSharingPoliciesWithHttpInfo(string groupNamespace, string groupName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserFilterData</returns>
        GroupBrowserFilterData GroupsBrowserOwnedFiltersGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        ApiResponse<GroupBrowserFilterData> GroupsBrowserOwnedFiltersGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserFilterData</returns>
        GroupBrowserFilterData GroupsBrowserPublicFiltersGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        ApiResponse<GroupBrowserFilterData> GroupsBrowserPublicFiltersGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserFilterData</returns>
        GroupBrowserFilterData GroupsBrowserSharedFiltersGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        ApiResponse<GroupBrowserFilterData> GroupsBrowserSharedFiltersGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the group contents
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupContentsFilterData</returns>
        GroupContentsFilterData GroupsGroupNamespaceGroupNameContentsFiltersGet(string groupNamespace, string groupName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the group contents
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupContentsFilterData</returns>
        ApiResponse<GroupContentsFilterData> GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfo(string groupNamespace, string groupName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of owned groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserData</returns>
        GroupBrowserData ListOwnedGroups(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of owned groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        ApiResponse<GroupBrowserData> ListOwnedGroupsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of public groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserData</returns>
        GroupBrowserData ListPublicGroups(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of public groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        ApiResponse<GroupBrowserData> ListPublicGroupsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of shared groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserData</returns>
        GroupBrowserData ListSharedGroups(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of shared groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        ApiResponse<GroupBrowserData> ListSharedGroupsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Registers an existing group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RegisterGroup(string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Registers an existing group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterGroupWithHttpInfo(string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a group with a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ShareGroup(string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a group with a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ShareGroupWithHttpInfo(string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes attributes of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateGroup(string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes attributes of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGroupWithHttpInfo(string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes the contents of the group by adding/removing members.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeGroupContentsAsync(string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes the contents of the group by adding/removing members.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeGroupContentsWithHttpInfoAsync(string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateGroupAsync(string _namespace, GroupCreate groupCreate = default(GroupCreate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateGroupWithHttpInfoAsync(string _namespace, GroupCreate groupCreate = default(GroupCreate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupInfo</returns>
        System.Threading.Tasks.Task<GroupInfo> GetGroupAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupInfo>> GetGroupWithHttpInfoAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupContents</returns>
        System.Threading.Tasks.Task<GroupContents> GetGroupContentsAsync(string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contents of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupContents)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupContents>> GetGroupContentsWithHttpInfoAsync(string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupSharing&gt;</returns>
        System.Threading.Tasks.Task<List<GroupSharing>> GetGroupSharingPoliciesAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get all sharing details of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupSharing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupSharing>>> GetGroupSharingPoliciesWithHttpInfoAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserOwnedFiltersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserOwnedFiltersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserPublicFiltersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserPublicFiltersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserSharedFiltersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the groups browser
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserFilterData>> GroupsBrowserSharedFiltersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the group contents
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupContentsFilterData</returns>
        System.Threading.Tasks.Task<GroupContentsFilterData> GroupsGroupNamespaceGroupNameContentsFiltersGetAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch data to initialize filters for the group contents
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupContentsFilterData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupContentsFilterData>> GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfoAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of owned groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserData</returns>
        System.Threading.Tasks.Task<GroupBrowserData> ListOwnedGroupsAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of owned groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListOwnedGroupsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of public groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserData</returns>
        System.Threading.Tasks.Task<GroupBrowserData> ListPublicGroupsAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of public groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListPublicGroupsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of shared groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserData</returns>
        System.Threading.Tasks.Task<GroupBrowserData> ListSharedGroupsAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns one page of shared groups.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupBrowserData>> ListSharedGroupsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Registers an existing group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterGroupAsync(string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Registers an existing group in the namespace.
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterGroupWithHttpInfoAsync(string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a group with a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ShareGroupAsync(string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Share a group with a namespace
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShareGroupWithHttpInfoAsync(string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes attributes of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGroupAsync(string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes attributes of the group
        /// </remarks>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupWithHttpInfoAsync(string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IGroupsApiSync, IGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private TileDB.Cloud.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(string basePath)
        {
            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                new TileDB.Cloud.Rest.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(TileDB.Cloud.Rest.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TileDB.Cloud.Rest.Client.Configuration.MergeConfigurations(
                TileDB.Cloud.Rest.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TileDB.Cloud.Rest.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupsApi(TileDB.Cloud.Rest.Client.ISynchronousClient client, TileDB.Cloud.Rest.Client.IAsynchronousClient asyncClient, TileDB.Cloud.Rest.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TileDB.Cloud.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TileDB.Cloud.Rest.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TileDB.Cloud.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Changes the contents of the group by adding/removing members.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ChangeGroupContents(string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), int operationIndex = 0)
        {
            ChangeGroupContentsWithHttpInfo(groupNamespace, groupName, groupChanges);
        }

        /// <summary>
        ///  Changes the contents of the group by adding/removing members.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> ChangeGroupContentsWithHttpInfo(string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), int operationIndex = 0)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->ChangeGroupContents");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ChangeGroupContents");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = groupChanges;

            localVarRequestOptions.Operation = "GroupsApi.ChangeGroupContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{group_namespace}/{group_name}/contents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeGroupContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Changes the contents of the group by adding/removing members.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeGroupContentsAsync(string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ChangeGroupContentsWithHttpInfoAsync(groupNamespace, groupName, groupChanges, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Changes the contents of the group by adding/removing members.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupChanges"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> ChangeGroupContentsWithHttpInfoAsync(string groupNamespace, string groupName, GroupChanges groupChanges = default(GroupChanges), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->ChangeGroupContents");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ChangeGroupContents");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = groupChanges;

            localVarRequestOptions.Operation = "GroupsApi.ChangeGroupContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/groups/{group_namespace}/{group_name}/contents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeGroupContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateGroup(string _namespace, GroupCreate groupCreate = default(GroupCreate), int operationIndex = 0)
        {
            CreateGroupWithHttpInfo(_namespace, groupCreate);
        }

        /// <summary>
        ///  Creates a new group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> CreateGroupWithHttpInfo(string _namespace, GroupCreate groupCreate = default(GroupCreate), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling GroupsApi->CreateGroup");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.Data = groupCreate;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{namespace}/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateGroupAsync(string _namespace, GroupCreate groupCreate = default(GroupCreate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateGroupWithHttpInfoAsync(_namespace, groupCreate, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Creates a new group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="groupCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> CreateGroupWithHttpInfoAsync(string _namespace, GroupCreate groupCreate = default(GroupCreate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling GroupsApi->CreateGroup");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.Data = groupCreate;

            localVarRequestOptions.Operation = "GroupsApi.CreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/groups/{namespace}/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteGroup(string groupNamespace, string groupName, int operationIndex = 0)
        {
            DeleteGroupWithHttpInfo(groupNamespace, groupName);
        }

        /// <summary>
        ///  Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> DeleteGroupWithHttpInfo(string groupNamespace, string groupName, int operationIndex = 0)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->DeleteGroup");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->DeleteGroup");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{group_namespace}/{group_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteGroupWithHttpInfoAsync(groupNamespace, groupName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes the group. The assets are not deleted nor are not relocated to any other group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->DeleteGroup");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->DeleteGroup");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{group_namespace}/{group_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupInfo</returns>
        public GroupInfo GetGroup(string groupNamespace, string groupName, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupInfo> localVarResponse = GetGroupWithHttpInfo(groupNamespace, groupName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupInfo</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupInfo> GetGroupWithHttpInfo(string groupNamespace, string groupName, int operationIndex = 0)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroup");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroup");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupInfo>("/groups/{group_namespace}/{group_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupInfo</returns>
        public async System.Threading.Tasks.Task<GroupInfo> GetGroupAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupInfo> localVarResponse = await GetGroupWithHttpInfoAsync(groupNamespace, groupName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupInfo)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupInfo>> GetGroupWithHttpInfoAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroup");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroup");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupInfo>("/groups/{group_namespace}/{group_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the contents of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupContents</returns>
        public GroupContents GetGroupContents(string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupContents> localVarResponse = GetGroupContentsWithHttpInfo(groupNamespace, groupName, page, perPage, _namespace, search, orderby, tag, excludeTag, memberType, excludeMemberType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the contents of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupContents</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupContents> GetGroupContentsWithHttpInfo(string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), int operationIndex = 0)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroupContents");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupContents");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (memberType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "member_type", memberType));
            }
            if (excludeMemberType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_member_type", excludeMemberType));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupContents>("/groups/{group_namespace}/{group_name}/contents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the contents of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupContents</returns>
        public async System.Threading.Tasks.Task<GroupContents> GetGroupContentsAsync(string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupContents> localVarResponse = await GetGroupContentsWithHttpInfoAsync(groupNamespace, groupName, page, perPage, _namespace, search, orderby, tag, excludeTag, memberType, excludeMemberType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the contents of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="page">pagination offset for assets (optional)</param>
        /// <param name="perPage">pagination limit for assets (optional)</param>
        /// <param name="_namespace">namespace to search for (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="memberType">member type to search for, more than one can be included (optional)</param>
        /// <param name="excludeMemberType">member type to exclude matching groups in results, more than one can be included (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupContents)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupContents>> GetGroupContentsWithHttpInfoAsync(string groupNamespace, string groupName, int? page = default(int?), int? perPage = default(int?), string _namespace = default(string), string search = default(string), string orderby = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), List<string> memberType = default(List<string>), List<string> excludeMemberType = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroupContents");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupContents");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (memberType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "member_type", memberType));
            }
            if (excludeMemberType != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_member_type", excludeMemberType));
            }

            localVarRequestOptions.Operation = "GroupsApi.GetGroupContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupContents>("/groups/{group_namespace}/{group_name}/contents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all sharing details of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GroupSharing&gt;</returns>
        public List<GroupSharing> GetGroupSharingPolicies(string groupNamespace, string groupName, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<GroupSharing>> localVarResponse = GetGroupSharingPoliciesWithHttpInfo(groupNamespace, groupName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all sharing details of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GroupSharing&gt;</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<List<GroupSharing>> GetGroupSharingPoliciesWithHttpInfo(string groupNamespace, string groupName, int operationIndex = 0)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroupSharingPolicies");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupSharingPolicies");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupSharingPolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GroupSharing>>("/groups/{group_namespace}/{group_name}/share", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupSharingPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get all sharing details of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GroupSharing&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupSharing>> GetGroupSharingPoliciesAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<List<GroupSharing>> localVarResponse = await GetGroupSharingPoliciesWithHttpInfoAsync(groupNamespace, groupName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get all sharing details of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GroupSharing&gt;)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<List<GroupSharing>>> GetGroupSharingPoliciesWithHttpInfoAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GetGroupSharingPolicies");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetGroupSharingPolicies");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GetGroupSharingPolicies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GroupSharing>>("/groups/{group_namespace}/{group_name}/share", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupSharingPolicies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserFilterData</returns>
        public GroupBrowserFilterData GroupsBrowserOwnedFiltersGet(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> localVarResponse = GroupsBrowserOwnedFiltersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> GroupsBrowserOwnedFiltersGetWithHttpInfo(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GroupsBrowserOwnedFiltersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupBrowserFilterData>("/groups/browser/owned/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsBrowserOwnedFiltersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserOwnedFiltersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> localVarResponse = await GroupsBrowserOwnedFiltersGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData>> GroupsBrowserOwnedFiltersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GroupsBrowserOwnedFiltersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupBrowserFilterData>("/groups/browser/owned/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsBrowserOwnedFiltersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserFilterData</returns>
        public GroupBrowserFilterData GroupsBrowserPublicFiltersGet(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> localVarResponse = GroupsBrowserPublicFiltersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> GroupsBrowserPublicFiltersGetWithHttpInfo(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GroupsBrowserPublicFiltersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupBrowserFilterData>("/groups/browser/public/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsBrowserPublicFiltersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserPublicFiltersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> localVarResponse = await GroupsBrowserPublicFiltersGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData>> GroupsBrowserPublicFiltersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GroupsBrowserPublicFiltersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupBrowserFilterData>("/groups/browser/public/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsBrowserPublicFiltersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserFilterData</returns>
        public GroupBrowserFilterData GroupsBrowserSharedFiltersGet(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> localVarResponse = GroupsBrowserSharedFiltersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserFilterData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> GroupsBrowserSharedFiltersGetWithHttpInfo(int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GroupsBrowserSharedFiltersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupBrowserFilterData>("/groups/browser/shared/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsBrowserSharedFiltersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserFilterData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserFilterData> GroupsBrowserSharedFiltersGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData> localVarResponse = await GroupsBrowserSharedFiltersGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the groups browser
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserFilterData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserFilterData>> GroupsBrowserSharedFiltersGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupsApi.GroupsBrowserSharedFiltersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupBrowserFilterData>("/groups/browser/shared/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsBrowserSharedFiltersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the group contents
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupContentsFilterData</returns>
        public GroupContentsFilterData GroupsGroupNamespaceGroupNameContentsFiltersGet(string groupNamespace, string groupName, int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupContentsFilterData> localVarResponse = GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfo(groupNamespace, groupName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the group contents
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupContentsFilterData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupContentsFilterData> GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfo(string groupNamespace, string groupName, int operationIndex = 0)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GroupsGroupNamespaceGroupNameContentsFiltersGet");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GroupsGroupNamespaceGroupNameContentsFiltersGet");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GroupsGroupNamespaceGroupNameContentsFiltersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupContentsFilterData>("/groups/{group_namespace}/{group_name}/contents/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsGroupNamespaceGroupNameContentsFiltersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the group contents
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupContentsFilterData</returns>
        public async System.Threading.Tasks.Task<GroupContentsFilterData> GroupsGroupNamespaceGroupNameContentsFiltersGetAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupContentsFilterData> localVarResponse = await GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfoAsync(groupNamespace, groupName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch data to initialize filters for the group contents
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupContentsFilterData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupContentsFilterData>> GroupsGroupNamespaceGroupNameContentsFiltersGetWithHttpInfoAsync(string groupNamespace, string groupName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->GroupsGroupNamespaceGroupNameContentsFiltersGet");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GroupsGroupNamespaceGroupNameContentsFiltersGet");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.GroupsGroupNamespaceGroupNameContentsFiltersGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupContentsFilterData>("/groups/{group_namespace}/{group_name}/contents/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsGroupNamespaceGroupNameContentsFiltersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns one page of owned groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserData</returns>
        public GroupBrowserData ListOwnedGroups(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> localVarResponse = ListOwnedGroupsWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of owned groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> ListOwnedGroupsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (flat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "flat", flat));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }

            localVarRequestOptions.Operation = "GroupsApi.ListOwnedGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupBrowserData>("/groups/browser/owned", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOwnedGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns one page of owned groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserData> ListOwnedGroupsAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> localVarResponse = await ListOwnedGroupsWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of owned groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData>> ListOwnedGroupsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (flat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "flat", flat));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }

            localVarRequestOptions.Operation = "GroupsApi.ListOwnedGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupBrowserData>("/groups/browser/owned", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOwnedGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns one page of public groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserData</returns>
        public GroupBrowserData ListPublicGroups(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> localVarResponse = ListPublicGroupsWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of public groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> ListPublicGroupsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (flat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "flat", flat));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }

            localVarRequestOptions.Operation = "GroupsApi.ListPublicGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupBrowserData>("/groups/browser/public", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPublicGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns one page of public groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserData> ListPublicGroupsAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> localVarResponse = await ListPublicGroupsWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of public groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData>> ListPublicGroupsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (flat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "flat", flat));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }

            localVarRequestOptions.Operation = "GroupsApi.ListPublicGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupBrowserData>("/groups/browser/public", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPublicGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns one page of shared groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupBrowserData</returns>
        public GroupBrowserData ListSharedGroups(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> localVarResponse = ListSharedGroupsWithHttpInfo(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent, sharedTo);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of shared groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupBrowserData</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> ListSharedGroupsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), int operationIndex = 0)
        {
            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (flat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "flat", flat));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (sharedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "shared_to", sharedTo));
            }

            localVarRequestOptions.Operation = "GroupsApi.ListSharedGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupBrowserData>("/groups/browser/shared", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSharedGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns one page of shared groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupBrowserData</returns>
        public async System.Threading.Tasks.Task<GroupBrowserData> ListSharedGroupsAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData> localVarResponse = await ListSharedGroupsWithHttpInfoAsync(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent, sharedTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns one page of shared groups.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">pagination offset (optional)</param>
        /// <param name="perPage">pagination limit (optional)</param>
        /// <param name="search">search string that will look at name, namespace or description fields (optional)</param>
        /// <param name="_namespace">namespace (optional)</param>
        /// <param name="orderby">sort by which field valid values include last_accessed, size, name (optional)</param>
        /// <param name="permissions">permissions valid values include read, read_write, write, admin (optional)</param>
        /// <param name="tag">tag to search for, more than one can be included (optional)</param>
        /// <param name="excludeTag">tags to exclude matching array in results, more than one can be included (optional)</param>
        /// <param name="flat">if true, ignores the nesting of groups and searches all of them (optional)</param>
        /// <param name="parent">search only the children of the groups with this uuid (optional)</param>
        /// <param name="sharedTo">namespaces to filter results of where there groups were shared to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupBrowserData)</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<GroupBrowserData>> ListSharedGroupsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string search = default(string), string _namespace = default(string), string orderby = default(string), string permissions = default(string), List<string> tag = default(List<string>), List<string> excludeTag = default(List<string>), bool? flat = default(bool?), string parent = default(string), List<string> sharedTo = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (permissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "permissions", permissions));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (excludeTag != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "exclude_tag", excludeTag));
            }
            if (flat != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "flat", flat));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (sharedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(TileDB.Cloud.Rest.Client.ClientUtils.ParameterToMultiMap("multi", "shared_to", sharedTo));
            }

            localVarRequestOptions.Operation = "GroupsApi.ListSharedGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupBrowserData>("/groups/browser/shared", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSharedGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Registers an existing group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RegisterGroup(string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), int operationIndex = 0)
        {
            RegisterGroupWithHttpInfo(_namespace, array, groupRegister);
        }

        /// <summary>
        ///  Registers an existing group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> RegisterGroupWithHttpInfo(string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), int operationIndex = 0)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling GroupsApi->RegisterGroup");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling GroupsApi->RegisterGroup");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = groupRegister;

            localVarRequestOptions.Operation = "GroupsApi.RegisterGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{namespace}/{array}/register", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Registers an existing group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterGroupAsync(string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RegisterGroupWithHttpInfoAsync(_namespace, array, groupRegister, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Registers an existing group in the namespace.
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">The namespace of the group</param>
        /// <param name="array">The unique name or id of the group</param>
        /// <param name="groupRegister"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> RegisterGroupWithHttpInfoAsync(string _namespace, string array, GroupRegister groupRegister = default(GroupRegister), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter '_namespace' when calling GroupsApi->RegisterGroup");
            }

            // verify the required parameter 'array' is set
            if (array == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'array' when calling GroupsApi->RegisterGroup");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(_namespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("array", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(array)); // path parameter
            localVarRequestOptions.Data = groupRegister;

            localVarRequestOptions.Operation = "GroupsApi.RegisterGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/groups/{namespace}/{array}/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Share a group with a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ShareGroup(string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, int operationIndex = 0)
        {
            ShareGroupWithHttpInfo(groupNamespace, groupName, groupSharingRequest);
        }

        /// <summary>
        ///  Share a group with a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> ShareGroupWithHttpInfo(string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->ShareGroup");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ShareGroup");
            }

            // verify the required parameter 'groupSharingRequest' is set
            if (groupSharingRequest == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupSharingRequest' when calling GroupsApi->ShareGroup");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = groupSharingRequest;

            localVarRequestOptions.Operation = "GroupsApi.ShareGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/groups/{group_namespace}/{group_name}/share", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShareGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Share a group with a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ShareGroupAsync(string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ShareGroupWithHttpInfoAsync(groupNamespace, groupName, groupSharingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Share a group with a namespace
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupSharingRequest">Namespace and list of permissions to share with. Sharing is recursive, it is applied to all reachable subgroups and arrays of the group. An empty list of permissions will remove the namespace; if permissions already exist they will be deleted then new ones added. In the event of a failure, the new policies will be rolled back to prevent partial policies, and it&#39;s likely the group will not be shared with the namespace at all.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> ShareGroupWithHttpInfoAsync(string groupNamespace, string groupName, GroupSharingRequest groupSharingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->ShareGroup");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->ShareGroup");
            }

            // verify the required parameter 'groupSharingRequest' is set
            if (groupSharingRequest == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupSharingRequest' when calling GroupsApi->ShareGroup");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = groupSharingRequest;

            localVarRequestOptions.Operation = "GroupsApi.ShareGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/groups/{group_namespace}/{group_name}/share", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShareGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Changes attributes of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateGroup(string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), int operationIndex = 0)
        {
            UpdateGroupWithHttpInfo(groupNamespace, groupName, groupUpdate);
        }

        /// <summary>
        ///  Changes attributes of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TileDB.Cloud.Rest.Client.ApiResponse<Object> UpdateGroupWithHttpInfo(string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), int operationIndex = 0)
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->UpdateGroup");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->UpdateGroup");
            }

            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = groupUpdate;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/groups/{group_namespace}/{group_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Changes attributes of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGroupAsync(string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateGroupWithHttpInfoAsync(groupNamespace, groupName, groupUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Changes attributes of the group
        /// </summary>
        /// <exception cref="TileDB.Cloud.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupNamespace">The namespace of the group</param>
        /// <param name="groupName">The unique name or id of the group</param>
        /// <param name="groupUpdate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TileDB.Cloud.Rest.Client.ApiResponse<Object>> UpdateGroupWithHttpInfoAsync(string groupNamespace, string groupName, GroupUpdate groupUpdate = default(GroupUpdate), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupNamespace' is set
            if (groupNamespace == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupNamespace' when calling GroupsApi->UpdateGroup");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new TileDB.Cloud.Rest.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->UpdateGroup");
            }


            TileDB.Cloud.Rest.Client.RequestOptions localVarRequestOptions = new TileDB.Cloud.Rest.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TileDB.Cloud.Rest.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_namespace", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupNamespace)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_name", TileDB.Cloud.Rest.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = groupUpdate;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-TILEDB-REST-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-TILEDB-REST-API-KEY"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + TileDB.Cloud.Rest.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/groups/{group_namespace}/{group_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
