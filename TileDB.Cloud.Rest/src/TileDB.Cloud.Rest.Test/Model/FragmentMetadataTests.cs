/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using TileDB.Cloud.Rest.Api;
using TileDB.Cloud.Rest.Model;
using TileDB.Cloud.Rest.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace TileDB.Cloud.Rest.Test.Model
{
    /// <summary>
    ///  Class for testing FragmentMetadata
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class FragmentMetadataTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for FragmentMetadata
        //private FragmentMetadata instance;

        public FragmentMetadataTests()
        {
            // TODO uncomment below to create an instance of FragmentMetadata
            //instance = new FragmentMetadata();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FragmentMetadata
        /// </summary>
        [Fact]
        public void FragmentMetadataInstanceTest()
        {
            // TODO uncomment below to test "IsType" FragmentMetadata
            //Assert.IsType<FragmentMetadata>(instance);
        }


        /// <summary>
        /// Test the property 'FileSizes'
        /// </summary>
        [Fact]
        public void FileSizesTest()
        {
            // TODO unit test for the property 'FileSizes'
        }
        /// <summary>
        /// Test the property 'FileVarSizes'
        /// </summary>
        [Fact]
        public void FileVarSizesTest()
        {
            // TODO unit test for the property 'FileVarSizes'
        }
        /// <summary>
        /// Test the property 'FileValiditySizes'
        /// </summary>
        [Fact]
        public void FileValiditySizesTest()
        {
            // TODO unit test for the property 'FileValiditySizes'
        }
        /// <summary>
        /// Test the property 'FragmentUri'
        /// </summary>
        [Fact]
        public void FragmentUriTest()
        {
            // TODO unit test for the property 'FragmentUri'
        }
        /// <summary>
        /// Test the property 'HasTimestamps'
        /// </summary>
        [Fact]
        public void HasTimestampsTest()
        {
            // TODO unit test for the property 'HasTimestamps'
        }
        /// <summary>
        /// Test the property 'HasDeleteMeta'
        /// </summary>
        [Fact]
        public void HasDeleteMetaTest()
        {
            // TODO unit test for the property 'HasDeleteMeta'
        }
        /// <summary>
        /// Test the property 'SparseTileNum'
        /// </summary>
        [Fact]
        public void SparseTileNumTest()
        {
            // TODO unit test for the property 'SparseTileNum'
        }
        /// <summary>
        /// Test the property 'TileIndexBase'
        /// </summary>
        [Fact]
        public void TileIndexBaseTest()
        {
            // TODO unit test for the property 'TileIndexBase'
        }
        /// <summary>
        /// Test the property 'TileOffsets'
        /// </summary>
        [Fact]
        public void TileOffsetsTest()
        {
            // TODO unit test for the property 'TileOffsets'
        }
        /// <summary>
        /// Test the property 'TileVarOffsets'
        /// </summary>
        [Fact]
        public void TileVarOffsetsTest()
        {
            // TODO unit test for the property 'TileVarOffsets'
        }
        /// <summary>
        /// Test the property 'TileVarSizes'
        /// </summary>
        [Fact]
        public void TileVarSizesTest()
        {
            // TODO unit test for the property 'TileVarSizes'
        }
        /// <summary>
        /// Test the property 'TileValidityOffsets'
        /// </summary>
        [Fact]
        public void TileValidityOffsetsTest()
        {
            // TODO unit test for the property 'TileValidityOffsets'
        }
        /// <summary>
        /// Test the property 'TileMinBuffer'
        /// </summary>
        [Fact]
        public void TileMinBufferTest()
        {
            // TODO unit test for the property 'TileMinBuffer'
        }
        /// <summary>
        /// Test the property 'TileMinVarBuffer'
        /// </summary>
        [Fact]
        public void TileMinVarBufferTest()
        {
            // TODO unit test for the property 'TileMinVarBuffer'
        }
        /// <summary>
        /// Test the property 'TileMaxBuffer'
        /// </summary>
        [Fact]
        public void TileMaxBufferTest()
        {
            // TODO unit test for the property 'TileMaxBuffer'
        }
        /// <summary>
        /// Test the property 'TileMaxVarBuffer'
        /// </summary>
        [Fact]
        public void TileMaxVarBufferTest()
        {
            // TODO unit test for the property 'TileMaxVarBuffer'
        }
        /// <summary>
        /// Test the property 'TileSums'
        /// </summary>
        [Fact]
        public void TileSumsTest()
        {
            // TODO unit test for the property 'TileSums'
        }
        /// <summary>
        /// Test the property 'TileNullCounts'
        /// </summary>
        [Fact]
        public void TileNullCountsTest()
        {
            // TODO unit test for the property 'TileNullCounts'
        }
        /// <summary>
        /// Test the property 'FragmentMins'
        /// </summary>
        [Fact]
        public void FragmentMinsTest()
        {
            // TODO unit test for the property 'FragmentMins'
        }
        /// <summary>
        /// Test the property 'FragmentMaxs'
        /// </summary>
        [Fact]
        public void FragmentMaxsTest()
        {
            // TODO unit test for the property 'FragmentMaxs'
        }
        /// <summary>
        /// Test the property 'FragmentSums'
        /// </summary>
        [Fact]
        public void FragmentSumsTest()
        {
            // TODO unit test for the property 'FragmentSums'
        }
        /// <summary>
        /// Test the property 'FragmentNullCounts'
        /// </summary>
        [Fact]
        public void FragmentNullCountsTest()
        {
            // TODO unit test for the property 'FragmentNullCounts'
        }
        /// <summary>
        /// Test the property '_Version'
        /// </summary>
        [Fact]
        public void _VersionTest()
        {
            // TODO unit test for the property '_Version'
        }
        /// <summary>
        /// Test the property 'TimestampRange'
        /// </summary>
        [Fact]
        public void TimestampRangeTest()
        {
            // TODO unit test for the property 'TimestampRange'
        }
        /// <summary>
        /// Test the property 'LastTileCellNum'
        /// </summary>
        [Fact]
        public void LastTileCellNumTest()
        {
            // TODO unit test for the property 'LastTileCellNum'
        }

    }

}
