/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Api;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UserApi
            //Assert.IsInstanceOf(typeof(UserApi), instance);
        }

        
        /// <summary>
        /// Test AddAWSAccessCredentials
        /// </summary>
        [Test]
        public void AddAWSAccessCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //AWSAccessCredentials awsAccessCredentials = null;
            //instance.AddAWSAccessCredentials(_namespace, awsAccessCredentials);
            
        }
        
        /// <summary>
        /// Test AddUserToOrganization
        /// </summary>
        [Test]
        public void AddUserToOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //OrganizationUser user = null;
            //instance.AddUserToOrganization(organization, user);
            
        }
        
        /// <summary>
        /// Test CheckAWSAccessCredentials
        /// </summary>
        [Test]
        public void CheckAWSAccessCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //var response = instance.CheckAWSAccessCredentials(_namespace);
            //Assert.IsInstanceOf(typeof(List<AWSAccessCredentials>), response, "response is List<AWSAccessCredentials>");
        }
        
        /// <summary>
        /// Test CheckAWSAccessCredentialsByName
        /// </summary>
        [Test]
        public void CheckAWSAccessCredentialsByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.CheckAWSAccessCredentialsByName(_namespace, name);
            //Assert.IsInstanceOf(typeof(AWSAccessCredentials), response, "response is AWSAccessCredentials");
        }
        
        /// <summary>
        /// Test ConfirmEmail
        /// </summary>
        [Test]
        public void ConfirmEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ConfirmEmail();
            
        }
        
        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Test]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //instance.CreateUser(user);
            
        }
        
        /// <summary>
        /// Test DeleteAWSAccessCredentials
        /// </summary>
        [Test]
        public void DeleteAWSAccessCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //instance.DeleteAWSAccessCredentials(_namespace, name);
            
        }
        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //instance.DeleteUser(username);
            
        }
        
        /// <summary>
        /// Test DeleteUserFromOrganization
        /// </summary>
        [Test]
        public void DeleteUserFromOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string username = null;
            //instance.DeleteUserFromOrganization(organization, username);
            
        }
        
        /// <summary>
        /// Test GetOrganizationUser
        /// </summary>
        [Test]
        public void GetOrganizationUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string username = null;
            //var response = instance.GetOrganizationUser(organization, username);
            //Assert.IsInstanceOf(typeof(OrganizationUser), response, "response is OrganizationUser");
        }
        
        /// <summary>
        /// Test GetSession
        /// </summary>
        [Test]
        public void GetSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rememberMe = null;
            //var response = instance.GetSession(rememberMe);
            //Assert.IsInstanceOf(typeof(Token), response, "response is Token");
        }
        
        /// <summary>
        /// Test GetTokenScopes
        /// </summary>
        [Test]
        public void GetTokenScopesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTokenScopes();
            //Assert.IsInstanceOf(typeof(List<TokenScope>), response, "response is List<TokenScope>");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUser();
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test GetUserWithUsername
        /// </summary>
        [Test]
        public void GetUserWithUsernameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.GetUserWithUsername(username);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test RequestToken
        /// </summary>
        [Test]
        public void RequestTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenRequest tokenRequest = null;
            //var response = instance.RequestToken(tokenRequest);
            //Assert.IsInstanceOf(typeof(Token), response, "response is Token");
        }
        
        /// <summary>
        /// Test ResetUserPassword
        /// </summary>
        [Test]
        public void ResetUserPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject user = null;
            //instance.ResetUserPassword(user);
            
        }
        
        /// <summary>
        /// Test RevokeToken
        /// </summary>
        [Test]
        public void RevokeTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //instance.RevokeToken(token);
            
        }
        
        /// <summary>
        /// Test TokensGet
        /// </summary>
        [Test]
        public void TokensGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TokensGet();
            //Assert.IsInstanceOf(typeof(List<Token>), response, "response is List<Token>");
        }
        
        /// <summary>
        /// Test TokensSessionGet
        /// </summary>
        [Test]
        public void TokensSessionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TokensSessionGet();
            //Assert.IsInstanceOf(typeof(List<Token>), response, "response is List<Token>");
        }
        
        /// <summary>
        /// Test UpdateAWSAccessCredentials
        /// </summary>
        [Test]
        public void UpdateAWSAccessCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //AWSAccessCredentials awsAccessCredentials = null;
            //instance.UpdateAWSAccessCredentials(_namespace, name, awsAccessCredentials);
            
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //User user = null;
            //instance.UpdateUser(username, user);
            
        }
        
        /// <summary>
        /// Test UpdateUserInOrganization
        /// </summary>
        [Test]
        public void UpdateUserInOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organization = null;
            //string username = null;
            //OrganizationUser user = null;
            //instance.UpdateUserInOrganization(organization, username, user);
            
        }
        
    }

}
