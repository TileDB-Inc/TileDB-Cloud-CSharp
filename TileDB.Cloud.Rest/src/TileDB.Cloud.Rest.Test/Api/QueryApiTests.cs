/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Api;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Test
{
    /// <summary>
    ///  Class for testing QueryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class QueryApiTests
    {
        private QueryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new QueryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of QueryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' QueryApi
            //Assert.IsInstanceOf(typeof(QueryApi), instance);
        }

        
        /// <summary>
        /// Test FinalizeQuery
        /// </summary>
        [Test]
        public void FinalizeQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string array = null;
            //string type = null;
            //string contentType = null;
            //Query query = null;
            //string xPayer = null;
            //int? openAt = null;
            //var response = instance.FinalizeQuery(_namespace, array, type, contentType, query, xPayer, openAt);
            //Assert.IsInstanceOf(typeof(Query), response, "response is Query");
        }
        
        /// <summary>
        /// Test GetEstResultSizes
        /// </summary>
        [Test]
        public void GetEstResultSizesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string array = null;
            //string type = null;
            //string contentType = null;
            //Query query = null;
            //string xPayer = null;
            //int? openAt = null;
            //var response = instance.GetEstResultSizes(_namespace, array, type, contentType, query, xPayer, openAt);
            //Assert.IsInstanceOf(typeof(Query), response, "response is Query");
        }
        
        /// <summary>
        /// Test GetFile
        /// </summary>
        [Test]
        public void GetFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string array = null;
            //string contentType = null;
            //string xPayer = null;
            //var response = instance.GetFile(_namespace, array, contentType, xPayer);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test SubmitQuery
        /// </summary>
        [Test]
        public void SubmitQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string array = null;
            //string type = null;
            //string contentType = null;
            //Query query = null;
            //string xPayer = null;
            //int? openAt = null;
            //var response = instance.SubmitQuery(_namespace, array, type, contentType, query, xPayer, openAt);
            //Assert.IsInstanceOf(typeof(Query), response, "response is Query");
        }
        
        /// <summary>
        /// Test SubmitQueryJson
        /// </summary>
        [Test]
        public void SubmitQueryJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string array = null;
            //string contentType = null;
            //QueryJson queryJson = null;
            //string xPayer = null;
            //var response = instance.SubmitQueryJson(_namespace, array, contentType, queryJson, xPayer);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}
