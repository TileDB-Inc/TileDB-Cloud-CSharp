/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Api;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Test
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupsApiTests
    {
        private GroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' GroupsApi
            //Assert.IsInstanceOf(typeof(GroupsApi), instance);
        }

        
        /// <summary>
        /// Test ChangeGroupContents
        /// </summary>
        [Test]
        public void ChangeGroupContentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupNamespace = null;
            //string groupName = null;
            //GroupChanges groupChanges = null;
            //instance.ChangeGroupContents(groupNamespace, groupName, groupChanges);
            
        }
        
        /// <summary>
        /// Test CreateGroup
        /// </summary>
        [Test]
        public void CreateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //GroupCreate groupCreate = null;
            //instance.CreateGroup(_namespace, groupCreate);
            
        }
        
        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Test]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupNamespace = null;
            //string groupName = null;
            //instance.DeleteGroup(groupNamespace, groupName);
            
        }
        
        /// <summary>
        /// Test GetGroup
        /// </summary>
        [Test]
        public void GetGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupNamespace = null;
            //string groupName = null;
            //var response = instance.GetGroup(groupNamespace, groupName);
            //Assert.IsInstanceOf(typeof(GroupInfo), response, "response is GroupInfo");
        }
        
        /// <summary>
        /// Test GetGroupContents
        /// </summary>
        [Test]
        public void GetGroupContentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupNamespace = null;
            //string groupName = null;
            //int? page = null;
            //int? perPage = null;
            //string _namespace = null;
            //string search = null;
            //string orderby = null;
            //List<string> tag = null;
            //List<string> excludeTag = null;
            //List<string> memberType = null;
            //List<string> excludeMemberType = null;
            //var response = instance.GetGroupContents(groupNamespace, groupName, page, perPage, _namespace, search, orderby, tag, excludeTag, memberType, excludeMemberType);
            //Assert.IsInstanceOf(typeof(GroupContents), response, "response is GroupContents");
        }
        
        /// <summary>
        /// Test GetGroupSharingPolicies
        /// </summary>
        [Test]
        public void GetGroupSharingPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupNamespace = null;
            //string groupName = null;
            //var response = instance.GetGroupSharingPolicies(groupNamespace, groupName);
            //Assert.IsInstanceOf(typeof(List<GroupSharing>), response, "response is List<GroupSharing>");
        }
        
        /// <summary>
        /// Test GroupsBrowserOwnedFiltersGet
        /// </summary>
        [Test]
        public void GroupsBrowserOwnedFiltersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GroupsBrowserOwnedFiltersGet();
            //Assert.IsInstanceOf(typeof(GroupBrowserFilterData), response, "response is GroupBrowserFilterData");
        }
        
        /// <summary>
        /// Test GroupsBrowserPublicFiltersGet
        /// </summary>
        [Test]
        public void GroupsBrowserPublicFiltersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GroupsBrowserPublicFiltersGet();
            //Assert.IsInstanceOf(typeof(GroupBrowserFilterData), response, "response is GroupBrowserFilterData");
        }
        
        /// <summary>
        /// Test GroupsBrowserSharedFiltersGet
        /// </summary>
        [Test]
        public void GroupsBrowserSharedFiltersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GroupsBrowserSharedFiltersGet();
            //Assert.IsInstanceOf(typeof(GroupBrowserFilterData), response, "response is GroupBrowserFilterData");
        }
        
        /// <summary>
        /// Test GroupsGroupNamespaceGroupNameContentsFiltersGet
        /// </summary>
        [Test]
        public void GroupsGroupNamespaceGroupNameContentsFiltersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupNamespace = null;
            //string groupName = null;
            //var response = instance.GroupsGroupNamespaceGroupNameContentsFiltersGet(groupNamespace, groupName);
            //Assert.IsInstanceOf(typeof(GroupContentsFilterData), response, "response is GroupContentsFilterData");
        }
        
        /// <summary>
        /// Test ListOwnedGroups
        /// </summary>
        [Test]
        public void ListOwnedGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string search = null;
            //string _namespace = null;
            //string orderby = null;
            //string permissions = null;
            //List<string> tag = null;
            //List<string> excludeTag = null;
            //bool? flat = null;
            //string parent = null;
            //var response = instance.ListOwnedGroups(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent);
            //Assert.IsInstanceOf(typeof(GroupBrowserData), response, "response is GroupBrowserData");
        }
        
        /// <summary>
        /// Test ListPublicGroups
        /// </summary>
        [Test]
        public void ListPublicGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string search = null;
            //string _namespace = null;
            //string orderby = null;
            //string permissions = null;
            //List<string> tag = null;
            //List<string> excludeTag = null;
            //bool? flat = null;
            //string parent = null;
            //var response = instance.ListPublicGroups(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent);
            //Assert.IsInstanceOf(typeof(GroupBrowserData), response, "response is GroupBrowserData");
        }
        
        /// <summary>
        /// Test ListSharedGroups
        /// </summary>
        [Test]
        public void ListSharedGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string search = null;
            //string _namespace = null;
            //string orderby = null;
            //string permissions = null;
            //List<string> tag = null;
            //List<string> excludeTag = null;
            //bool? flat = null;
            //string parent = null;
            //var response = instance.ListSharedGroups(page, perPage, search, _namespace, orderby, permissions, tag, excludeTag, flat, parent);
            //Assert.IsInstanceOf(typeof(GroupBrowserData), response, "response is GroupBrowserData");
        }
        
        /// <summary>
        /// Test RegisterGroup
        /// </summary>
        [Test]
        public void RegisterGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string array = null;
            //GroupRegister groupRegister = null;
            //instance.RegisterGroup(_namespace, array, groupRegister);
            
        }
        
        /// <summary>
        /// Test ShareGroup
        /// </summary>
        [Test]
        public void ShareGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupNamespace = null;
            //string groupName = null;
            //GroupSharingRequest groupSharingRequest = null;
            //instance.ShareGroup(groupNamespace, groupName, groupSharingRequest);
            
        }
        
        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Test]
        public void UpdateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupNamespace = null;
            //string groupName = null;
            //GroupUpdate groupUpdate = null;
            //instance.UpdateGroup(groupNamespace, groupName, groupUpdate);
            
        }
        
    }

}
