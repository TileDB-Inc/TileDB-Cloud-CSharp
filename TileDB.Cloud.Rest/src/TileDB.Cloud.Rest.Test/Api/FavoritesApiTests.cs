/*
 * TileDB Storage Platform API
 *
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.2.19
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TileDB.Cloud.Rest.Client;
using TileDB.Cloud.Rest.Api;
using TileDB.Cloud.Rest.Model;

namespace TileDB.Cloud.Rest.Test
{
    /// <summary>
    ///  Class for testing FavoritesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FavoritesApiTests
    {
        private FavoritesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FavoritesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FavoritesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' FavoritesApi
            //Assert.IsInstanceOf(typeof(FavoritesApi), instance);
        }

        
        /// <summary>
        /// Test AddArrayFavorite
        /// </summary>
        [Test]
        public void AddArrayFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FavoriteCreate body = null;
            //instance.AddArrayFavorite(body);
            
        }
        
        /// <summary>
        /// Test AddMLModelFavorite
        /// </summary>
        [Test]
        public void AddMLModelFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FavoriteCreate body = null;
            //instance.AddMLModelFavorite(body);
            
        }
        
        /// <summary>
        /// Test AddNotebookFavorite
        /// </summary>
        [Test]
        public void AddNotebookFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FavoriteCreate body = null;
            //instance.AddNotebookFavorite(body);
            
        }
        
        /// <summary>
        /// Test AddUDFFavorite
        /// </summary>
        [Test]
        public void AddUDFFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FavoriteCreate body = null;
            //instance.AddUDFFavorite(body);
            
        }
        
        /// <summary>
        /// Test DeleteArrayFavorite
        /// </summary>
        [Test]
        public void DeleteArrayFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteArrayFavorite(id);
            
        }
        
        /// <summary>
        /// Test DeleteMLModelFavorite
        /// </summary>
        [Test]
        public void DeleteMLModelFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteMLModelFavorite(id);
            
        }
        
        /// <summary>
        /// Test DeleteNotebookFavorite
        /// </summary>
        [Test]
        public void DeleteNotebookFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteNotebookFavorite(id);
            
        }
        
        /// <summary>
        /// Test DeleteUDFFavorite
        /// </summary>
        [Test]
        public void DeleteUDFFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteUDFFavorite(id);
            
        }
        
        /// <summary>
        /// Test GetArrayFavorite
        /// </summary>
        [Test]
        public void GetArrayFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetArrayFavorite(id);
            //Assert.IsInstanceOf(typeof(ArrayFavorite), response, "response is ArrayFavorite");
        }
        
        /// <summary>
        /// Test GetArrayFavoriteForArray
        /// </summary>
        [Test]
        public void GetArrayFavoriteForArrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetArrayFavoriteForArray(_namespace, name);
            //Assert.IsInstanceOf(typeof(ArrayFavorite), response, "response is ArrayFavorite");
        }
        
        /// <summary>
        /// Test GetMLModelFavorite
        /// </summary>
        [Test]
        public void GetMLModelFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetMLModelFavorite(id);
            //Assert.IsInstanceOf(typeof(MLModelFavorite), response, "response is MLModelFavorite");
        }
        
        /// <summary>
        /// Test GetMLModelFavoriteForMLModel
        /// </summary>
        [Test]
        public void GetMLModelFavoriteForMLModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetMLModelFavoriteForMLModel(_namespace, name);
            //Assert.IsInstanceOf(typeof(MLModelFavorite), response, "response is MLModelFavorite");
        }
        
        /// <summary>
        /// Test GetNotebookFavorite
        /// </summary>
        [Test]
        public void GetNotebookFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetNotebookFavorite(id);
            //Assert.IsInstanceOf(typeof(NotebookFavorite), response, "response is NotebookFavorite");
        }
        
        /// <summary>
        /// Test GetNotebookFavoriteForNotebook
        /// </summary>
        [Test]
        public void GetNotebookFavoriteForNotebookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetNotebookFavoriteForNotebook(_namespace, name);
            //Assert.IsInstanceOf(typeof(NotebookFavorite), response, "response is NotebookFavorite");
        }
        
        /// <summary>
        /// Test GetUDFFavorite
        /// </summary>
        [Test]
        public void GetUDFFavoriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUDFFavorite(id);
            //Assert.IsInstanceOf(typeof(UDFFavorite), response, "response is UDFFavorite");
        }
        
        /// <summary>
        /// Test GetUDFFavoriteForUDF
        /// </summary>
        [Test]
        public void GetUDFFavoriteForUDFTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetUDFFavoriteForUDF(_namespace, name);
            //Assert.IsInstanceOf(typeof(UDFFavorite), response, "response is UDFFavorite");
        }
        
        /// <summary>
        /// Test ListArrayFavorites
        /// </summary>
        [Test]
        public void ListArrayFavoritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListArrayFavorites(page, perPage);
            //Assert.IsInstanceOf(typeof(ArrayFavoritesData), response, "response is ArrayFavoritesData");
        }
        
        /// <summary>
        /// Test ListArrayFavoritesUUIDs
        /// </summary>
        [Test]
        public void ListArrayFavoritesUUIDsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListArrayFavoritesUUIDs();
            //Assert.IsInstanceOf(typeof(List<ArrayFavorite>), response, "response is List<ArrayFavorite>");
        }
        
        /// <summary>
        /// Test ListMLModelFavorites
        /// </summary>
        [Test]
        public void ListMLModelFavoritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListMLModelFavorites(page, perPage);
            //Assert.IsInstanceOf(typeof(MLModelFavoritesData), response, "response is MLModelFavoritesData");
        }
        
        /// <summary>
        /// Test ListMLModelFavoritesUUIDs
        /// </summary>
        [Test]
        public void ListMLModelFavoritesUUIDsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListMLModelFavoritesUUIDs();
            //Assert.IsInstanceOf(typeof(List<MLModelFavorite>), response, "response is List<MLModelFavorite>");
        }
        
        /// <summary>
        /// Test ListNotebookFavorites
        /// </summary>
        [Test]
        public void ListNotebookFavoritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? isDashboard = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListNotebookFavorites(isDashboard, page, perPage);
            //Assert.IsInstanceOf(typeof(NotebookFavoritesData), response, "response is NotebookFavoritesData");
        }
        
        /// <summary>
        /// Test ListNotebookFavoritesUUIDs
        /// </summary>
        [Test]
        public void ListNotebookFavoritesUUIDsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListNotebookFavoritesUUIDs();
            //Assert.IsInstanceOf(typeof(List<NotebookFavorite>), response, "response is List<NotebookFavorite>");
        }
        
        /// <summary>
        /// Test ListUDFFavorites
        /// </summary>
        [Test]
        public void ListUDFFavoritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.ListUDFFavorites(page, perPage);
            //Assert.IsInstanceOf(typeof(UDFFavoritesData), response, "response is UDFFavoritesData");
        }
        
        /// <summary>
        /// Test ListUDFFavoritesUUIDs
        /// </summary>
        [Test]
        public void ListUDFFavoritesUUIDsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListUDFFavoritesUUIDs();
            //Assert.IsInstanceOf(typeof(List<UDFFavorite>), response, "response is List<UDFFavorite>");
        }
        
    }

}
